{"version":3,"file":"static/js/9362.00c0c12d.chunk.js","mappings":"uSA8RA,QA3QA,WACE,MAAMA,GAAWC,EAAAA,EAAAA,OACX,SAAEC,EAAQ,aAAEC,GAAiBH,EAASI,OAAS,CAAC,GAC/CC,EAAoBC,IAAyBC,EAAAA,EAAAA,UAAS,KACtDC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAS,KAClDG,EAAUC,IAAeJ,EAAAA,EAAAA,WAAS,GACnCK,GAAWC,EAAAA,EAAAA,OAEVC,EAAeC,IADPC,KAAKC,MAAMC,aAAaC,QAAQ,SAASC,KACdb,EAAAA,EAAAA,UAAS,KAU7Cc,EAAgB,IAHKC,OAAOC,aAC/BpB,GAAgB,IAAIqB,KAAKC,GAAU,CAAM,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,KAAM,QAM9CC,EAAc,IACH,OAAZxB,QAAY,IAAZA,OAAY,EAAZA,EAAcqB,KAAKC,IAAK,IAAAG,EAAA,MAAM,CAC/BC,OAAa,OAALJ,QAAK,IAALA,OAAK,EAALA,EAAOK,MACfC,SAAe,OAALN,QAAK,IAALA,OAAK,EAALA,EAAOC,KACjBM,KAAW,OAALP,QAAK,IAALA,OAAK,EAALA,EAAOO,KACbC,WAAiB,OAALR,QAAK,IAALA,GAAkB,QAAbG,EAALH,EAAOS,mBAAW,IAAAN,OAAb,EAALA,EAAoBO,MAAMC,GACpCA,EAAIC,eAAe,gBAEtB,KAGGC,GAASC,EAAAA,EAAAA,IAAU,CACvBlB,cAAeA,EACfmB,SAAUA,CAACC,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,EAC9B,MAAME,EAA+B,OAAhBpC,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBgB,KAAI,CAACqB,EAAMC,KAChD,MAAMC,EAAU,CACdC,YAAa,IAAIC,KACjBC,QAASL,EAAKJ,EAAOS,SAAW,aAAc,EAC9CC,SAAUnC,KAAKC,MAAMC,aAAaC,QAAQ,SAASC,KAuBrD,OApBW,OAAXO,QAAW,IAAXA,GAAAA,EAAayB,SAAS3B,IAAW,IAAD4B,EAAAC,EAAAC,EAAAC,EAC9B,MAAMC,EAAgBhB,EAAY,OAALhB,QAAK,IAALA,OAAK,EAALA,EAAOM,UAC9B2B,EAAab,EAAKY,IAAkB,GAEP,UAA1B,OAALhC,QAAK,IAALA,GAAW,QAAN4B,EAAL5B,EAAOO,YAAI,IAAAqB,OAAN,EAALA,EAAaM,eACfZ,EAAa,OAALtB,QAAK,IAALA,OAAK,EAALA,EAAOM,UAAY6B,IAAOF,GAAYG,UAC1CH,EACA,GAE2B,YAA1B,OAALjC,QAAK,IAALA,GAAW,QAAN6B,EAAL7B,EAAOO,YAAI,IAAAsB,OAAN,EAALA,EAAaK,gBACb,CAAC,WAAY,YAAYG,SAAc,OAALrC,QAAK,IAALA,GAAiB,QAAZ8B,EAAL9B,EAAOQ,kBAAU,IAAAsB,OAAZ,EAALA,EAAmBI,eAErDZ,EAAa,OAALtB,QAAK,IAALA,OAAK,EAALA,EAAOM,UAAYgC,WAAWL,IAAe,GACb,YAA1B,OAALjC,QAAK,IAALA,GAAW,QAAN+B,EAAL/B,EAAOO,YAAI,IAAAwB,OAAN,EAALA,EAAaG,eACtBZ,EAAa,OAALtB,QAAK,IAALA,OAAK,EAALA,EAAOM,UAAYiC,SAASN,EAAY,KAAO,GAEvDX,EAAa,OAALtB,QAAK,IAALA,OAAK,EAALA,EAAOM,UAAY2B,CAC7B,IAGKX,CAAO,IAGhBkB,EAAQrB,EAAa,KAInB,OACJsB,EAAM,QACNC,EAAO,OACP1B,EAAM,WACN2B,EAAU,aACVC,EAAY,aACZC,EAAY,cACZC,EAAa,UACb5B,GACEL,EACE2B,EAAUO,UACd,IACE7D,GAAY,GAEY,aADH8D,EAAAA,EAAAA,IAAQ,iCAAkCC,IAClDC,SACXC,EAAAA,GAAMC,QAAQ,6CACdlC,IACA/B,EAAS,uBAEb,CAAE,MAAOkE,GACPC,QAAQC,MAAMF,GACdF,EAAAA,GAAMI,MAAM,qCACZrC,IACA/B,EAAS,sBACX,CAAC,QACCD,GAAY,EACd,GAiFF,OArBAsE,EAAAA,EAAAA,YAAU,KACR,GAAI/E,GAAYA,EAASgF,OAAS,EAAG,CA1DjBV,WACpB,MAAMW,EAAS,IAAIC,WACbC,EAAYC,EAAK5D,KAAK6D,MAAM,KAAKC,MAAM7B,cA+C7C,GA7CAwB,EAAOM,OAASjB,UAAuB,IAAhB,OAAEkB,GAAQC,EAC/B,GAAkB,QAAdN,EAAqB,CACvB,MAAMO,EAAMC,IAAAA,MAAWH,EAAOI,OAAQ,CACpCC,QAAQ,IAEJC,EAAgB,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKK,KAExB,GAAID,GAAcA,EAAWd,OAAS,EAAG,CACvCzE,EAAoBuF,GACpB,MAAME,EAAoB5E,OAAO6E,KAAKH,EAAW,IACjD1F,EAAsB4F,EACxB,MACEtB,EAAAA,GAAMI,MAAM,6BACZpE,EAAS,sBAEb,MAAO,GAAkB,SAAdyE,EAAsB,CAC/B,MAAMY,EAAO,IAAIG,WAAWV,EAAOI,QAC7BO,EAAW,IAAIC,IAAAA,gBAEfD,EAASE,KAAKC,KAAKP,GAEzB,MAAMQ,EAAYJ,EAASK,aAAa,GAClCC,EAAW,GAajB,GAVAF,EAAUG,QAAQ,CAAEC,cAAc,IAAQ,CAACC,EAAKC,KAC9C,MAAMC,EAAU,CAAC,EACjBF,EAAIG,SAAS,CAAEJ,cAAc,IAAQ,CAACK,EAAMC,KAC1CH,EAAQP,EAAUW,QAAQ,EAAGD,GAAWE,OAASH,EAAKG,KAAK,IAE7DV,EAASW,KAAKN,EAAQ,IAEhB,OAARL,QAAQ,IAARA,GAAAA,EAAUY,OAAO,EAAG,GACpB9G,EAAoBkG,GAEhBA,GAAYA,EAASzB,OAAS,EAAG,CACnC,MAAMgB,EAAoB5E,OAAO6E,KAAKQ,EAAS,IAC/CrG,EAAsB4F,EACxB,MACEtB,EAAAA,GAAMI,MAAM,8BACZpE,EAAS,sBAEb,GAGgB,QAAdyE,EACFF,EAAOqC,WAAWlC,QACb,GAAkB,SAAdD,EAAsB,CAC/B,MAAMoC,EAAO,IAAIC,KAAK,CAACpC,IACvBH,EAAOwC,kBAAkBF,EAC3B,GAMEG,CADkB1H,EAAS,GAE7B,IACC,CAACA,KAEJ+E,EAAAA,EAAAA,YAAU,KACR,MAAM4C,EAAsC,OAAlBxH,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoByH,QAAQrG,IACpD,MAAMqE,EAAoB,OAAXnE,QAAW,IAAXA,OAAW,EAAXA,EAAaQ,MACzB8D,GAASxE,KAAc,OAAJwE,QAAI,IAAJA,OAAI,EAAJA,EAAMlE,WAAYN,KAAc,OAAJwE,QAAI,IAAJA,OAAI,EAAJA,EAAMpE,UAExD,QAAIiE,IACFvB,EAAoB,OAANuB,QAAM,IAANA,OAAM,EAANA,EAAQ/D,SAAUN,IACzB,EAEG,IAEdV,EAAiB8G,EAAkB,GAClC,CAACxH,KAGF0H,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,UAAW,OAAQC,UAAU,cAAaJ,SAAA,EAC9CF,EAAAA,EAAAA,KAACO,EAAAA,KAAI,CACHC,MAAO,oBACPC,SAAS,OACTC,WAAW,MACXC,GAAG,OAAMT,SACV,gCAGDF,EAAAA,EAAAA,KAACY,EAAAA,KAAI,CACHC,gBAAgB,kBAChBF,GAAI,EACJG,GAAI,EACJC,IAAK,EACLC,aAAc,oBAAoBd,SAvL1B,CACd,CAAEpG,OAAQ,gBAAiBE,SAAU,aACrC,CAAEF,OAAQ,iBAAkBE,SAAU,eAuLvBP,KAAI,CAACwH,EAAQC,KACpBlB,EAAAA,EAAAA,KAACmB,EAAAA,SAAQ,CAEPC,QAAS,CAAEC,KAAM,GACjBX,WAAY,MACZD,SAAU,CAAEa,GAAI,OAAQC,GAAI,QAC5Bf,MAAM,oBACNgB,MAAO,CAAEC,cAAe,aAAcvB,SAErCe,EAAOnH,QAPHoH,QAWXlB,EAAAA,EAAAA,KAACY,EAAAA,KAAI,CACHC,gBAAgB,kBAChBF,GAAI,EACJI,IAAK,EACLV,UAAW,OAAOH,SAEN,OAAXtG,QAAW,IAAXA,OAAW,EAAXA,EAAaH,KAAI,CAACqB,EAAMoG,KACvBf,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACmB,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,GAAoBK,GAAG,OAAMxB,SACjD,OAAJpF,QAAI,IAAJA,OAAI,EAAJA,EAAMhB,QADgC,OAAJgB,QAAI,IAAJA,OAAI,EAAJA,EAAM6G,KAG3C3B,EAAAA,EAAAA,KAACmB,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,GAAInB,UAC7BC,EAAAA,EAAAA,MAACyB,EAAAA,GAAM,CACLC,QAAQ,UACRnB,WAAW,MACXoB,cAAY,EACZxC,MAAO5E,EAAW,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMd,UACpBL,KAAU,OAAJmB,QAAI,IAAJA,OAAI,EAAJA,EAAMd,SACZ+H,SAAUzF,EAAa4D,SAAA,EAEvBC,EAAAA,EAAAA,MAAA,UAAQb,MAAM,GAAEY,SAAA,CACb,IACAnH,GACgB,OAAbA,QAAa,IAAbA,GAAAA,EAAeqB,MACZ8D,KACM,OAAJpD,QAAI,IAAJA,OAAI,EAAJA,EAAMhB,UAAWoE,IACZ,OAAJpD,QAAI,IAAJA,OAAI,EAAJA,EAAMd,YAAakE,IACrBA,IAEW,OAAbnF,QAAa,IAAbA,OAAa,EAAbA,EAAeqB,MACZ8D,KACM,OAAJpD,QAAI,IAAJA,OAAI,EAAJA,EAAMhB,UAAWoE,IACZ,OAAJpD,QAAI,IAAJA,OAAI,EAAJA,EAAMd,YAAakE,IACrBA,IAGN,0BAEa,OAAlB5F,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBmB,KAAKC,IACxBsG,EAAAA,EAAAA,KAAA,UAAQV,MAAO5F,EAAMwG,SAClBxG,GADwBA,kBAUvCsG,EAAAA,EAAAA,KAACgC,EAAAA,KAAI,CAACA,MAAI,EAACC,eAAgB,MAAOP,GAAG,IAAGxB,UACtCF,EAAAA,EAAAA,KAACkC,EAAAA,OAAM,CAACC,KAAK,KAAKC,QAASA,IAAM7F,IAAgBsF,QAAQ,QAAO3B,SAAC,eAO3E,C","sources":["views/admin/opportunityproject/components/OpportunityprojectImport.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport Papa from \"papaparse\";\nimport {\n  Flex,\n  useColorModeValue,\n  Select,\n  Button,\n  Text,\n  Grid,\n  GridItem,\n} from \"@chakra-ui/react\";\nimport { useFormik } from \"formik\";\nimport { postApi } from \"services/api\";\nimport { toast } from \"react-toastify\";\nimport moment from \"moment\";\nimport ExcelJS from \"exceljs\";\nimport Card from \"components/card/Card\";\n\nfunction OpportunityprojectImport() {\n  const location = useLocation();\n  const { fileData, customFields } = location.state || {};\n  const [importedFileFields, setImportedFileFields] = useState([]);\n  const [importedFileData, setImportedFileData] = useState([]);\n  const [isLoding, setIsLoding] = useState(false);\n  const navigate = useNavigate();\n  const userId = JSON.parse(localStorage.getItem(\"user\"))._id;\n  const [filterContact, setFilterContact] = useState([]);\n\n  const columns = [\n    { Header: \"Fields In Crm\", accessor: \"crmFields\" },\n    { Header: \"Fields In File\", accessor: \"fileFields\" },\n  ];\n\n  const initialFieldValues = Object.fromEntries(\n    (customFields || []).map((field) => [field?.name, \"\"]),\n  );\n  const initialValues = {\n    ...initialFieldValues,\n  };\n\n  const fieldsInCrm = [\n    ...customFields?.map((field) => ({\n      Header: field?.label,\n      accessor: field?.name,\n      type: field?.type,\n      formikType: field?.validations?.find((obj) =>\n        obj.hasOwnProperty(\"formikType\"),\n      ),\n    })),\n  ];\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: (values, { resetForm }) => {\n      const contactsData = importedFileData?.map((item, ind) => {\n        const contact = {\n          createdDate: new Date(),\n          deleted: item[values.deleted || \"deleted\"] || false,\n          createBy: JSON.parse(localStorage.getItem(\"user\"))._id,\n        };\n\n        fieldsInCrm?.forEach((field) => {\n          const selectedField = values[field?.accessor];\n          const fieldValue = item[selectedField] || \"\";\n\n          if (field?.type?.toLowerCase() === \"date\") {\n            contact[field?.accessor] = moment(fieldValue).isValid()\n              ? fieldValue\n              : \"\";\n          } else if (\n            field?.type?.toLowerCase() === \"number\" &&\n            [\"positive\", \"negative\"].includes(field?.formikType?.toLowerCase())\n          ) {\n            contact[field?.accessor] = parseFloat(fieldValue) || \"\";\n          } else if (field?.type?.toLowerCase() === \"number\") {\n            contact[field?.accessor] = parseInt(fieldValue, 10) || \"\";\n          } else {\n            contact[field?.accessor] = fieldValue;\n          }\n        });\n\n        return contact;\n      });\n\n      AddData(contactsData);\n    },\n  });\n\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n    resetForm,\n  } = formik;\n  const AddData = async (contacts) => {\n    try {\n      setIsLoding(true);\n      let response = await postApi(\"api/opportunityproject/addMany\", contacts);\n      if (response.status === 200) {\n        toast.success(`Opportunity Project imported successfully`);\n        resetForm();\n        navigate(\"/opportunityproject\");\n      }\n    } catch (e) {\n      console.error(e);\n      toast.error(`Opportunity Project import failed`);\n      resetForm();\n      navigate(\"/opportunityproject\");\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  const parseFileData = async (file) => {\n    const reader = new FileReader();\n    const extension = file.name.split(\".\").pop().toLowerCase();\n\n    reader.onload = async ({ target }) => {\n      if (extension === \"csv\") {\n        const csv = Papa.parse(target.result, {\n          header: true,\n        });\n        const parsedData = csv?.data;\n\n        if (parsedData && parsedData.length > 0) {\n          setImportedFileData(parsedData);\n          const fileHeadingFields = Object.keys(parsedData[0]);\n          setImportedFileFields(fileHeadingFields);\n        } else {\n          toast.error(\"Empty or invalid CSV file\");\n          navigate(\"/opportunityproject\");\n        }\n      } else if (extension === \"xlsx\") {\n        const data = new Uint8Array(target.result);\n        const workbook = new ExcelJS.Workbook();\n\n        await workbook.xlsx.load(data);\n\n        const worksheet = workbook.getWorksheet(1);\n        const jsonData = [];\n\n        // Iterate over rows and cells\n        worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {\n          const rowData = {};\n          row.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n            rowData[worksheet.getCell(1, colNumber).value] = cell.value;\n          });\n          jsonData.push(rowData);\n        });\n        jsonData?.splice(0, 1);\n        setImportedFileData(jsonData);\n\n        if (jsonData && jsonData.length > 0) {\n          const fileHeadingFields = Object.keys(jsonData[0]);\n          setImportedFileFields(fileHeadingFields);\n        } else {\n          toast.error(\"Empty or invalid XLSX file\");\n          navigate(\"/opportunityproject\");\n        }\n      }\n    };\n\n    if (extension === \"csv\") {\n      reader.readAsText(file);\n    } else if (extension === \"xlsx\") {\n      const blob = new Blob([file]);\n      reader.readAsArrayBuffer(blob);\n    }\n  };\n\n  useEffect(() => {\n    if (fileData && fileData.length > 0) {\n      const firstFile = fileData[0];\n      parseFileData(firstFile);\n    }\n  }, [fileData]);\n\n  useEffect(() => {\n    const filterContactData = importedFileFields?.filter((field) => {\n      const result = fieldsInCrm?.find(\n        (data) => field === data?.accessor || field === data?.Header,\n      );\n      if (result) {\n        setFieldValue(result?.accessor, field);\n        return true;\n      }\n      return false;\n    });\n    setFilterContact(filterContactData);\n  }, [importedFileFields]);\n\n  return (\n    <>\n      <Card overflowY={\"auto\"} className=\"importTable\">\n        <Text\n          color={\"secondaryGray.900\"}\n          fontSize=\"22px\"\n          fontWeight=\"700\"\n          mb=\"20px\"\n        >\n          Import Opportunity Project\n        </Text>\n        <Grid\n          templateColumns=\"repeat(12, 1fr)\"\n          mb={3}\n          pb={2}\n          gap={1}\n          borderBottom={\"1px solid #e2e8f0\"}\n        >\n          {columns.map((column, index) => (\n            <GridItem\n              key={index}\n              colSpan={{ base: 6 }}\n              fontWeight={\"600\"}\n              fontSize={{ sm: \"14px\", lg: \"14px\" }}\n              color=\"secondaryGray.900\"\n              style={{ textTransform: \"uppercase\" }}\n            >\n              {column.Header}\n            </GridItem>\n          ))}\n        </Grid>\n        <Grid\n          templateColumns=\"repeat(12, 1fr)\"\n          mb={3}\n          gap={1}\n          overflowY={\"auto\"}\n        >\n          {fieldsInCrm?.map((item, index) => (\n            <>\n              <GridItem colSpan={{ base: 6 }} key={item?.id} mt=\"10px\">\n                {item?.Header}\n              </GridItem>\n              <GridItem colSpan={{ base: 4 }}>\n                <Select\n                  variant=\"flushed\"\n                  fontWeight=\"500\"\n                  isSearchable\n                  value={values[item?.accessor]}\n                  name={item?.accessor}\n                  onChange={handleChange}\n                >\n                  <option value=\"\">\n                    {\" \"}\n                    {filterContact\n                      ? filterContact?.find(\n                          (data) =>\n                            (item?.Header === data ||\n                              item?.accessor === data) &&\n                            data,\n                        )\n                        ? filterContact?.find(\n                            (data) =>\n                              (item?.Header === data ||\n                                item?.accessor === data) &&\n                              data,\n                          )\n                        : \"Select Field In File\"\n                      : \"Select Field In File\"}\n                  </option>\n                  {importedFileFields?.map((field) => (\n                    <option value={field} key={field}>\n                      {field}\n                    </option>\n                  ))}\n                </Select>\n              </GridItem>\n            </>\n          ))}\n        </Grid>\n\n        <Flex Flex justifyContent={\"end\"} mt=\"5\">\n          <Button size=\"sm\" onClick={() => handleSubmit()} variant=\"brand\">\n            Save\n          </Button>\n        </Flex>\n      </Card>\n    </>\n  );\n}\n\nexport default OpportunityprojectImport;\n"],"names":["location","useLocation","fileData","customFields","state","importedFileFields","setImportedFileFields","useState","importedFileData","setImportedFileData","isLoding","setIsLoding","navigate","useNavigate","filterContact","setFilterContact","JSON","parse","localStorage","getItem","_id","initialValues","Object","fromEntries","map","field","name","fieldsInCrm","_field$validations","Header","label","accessor","type","formikType","validations","find","obj","hasOwnProperty","formik","useFormik","onSubmit","values","_ref","resetForm","contactsData","item","ind","contact","createdDate","Date","deleted","createBy","forEach","_field$type","_field$type2","_field$formikType","_field$type3","selectedField","fieldValue","toLowerCase","moment","isValid","includes","parseFloat","parseInt","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","postApi","contacts","status","toast","success","e","console","error","useEffect","length","reader","FileReader","extension","file","split","pop","onload","target","_ref2","csv","Papa","result","header","parsedData","data","fileHeadingFields","keys","Uint8Array","workbook","ExcelJS","xlsx","load","worksheet","getWorksheet","jsonData","eachRow","includeEmpty","row","rowNumber","rowData","eachCell","cell","colNumber","getCell","value","push","splice","readAsText","blob","Blob","readAsArrayBuffer","parseFileData","filterContactData","filter","_jsx","_Fragment","children","_jsxs","Card","overflowY","className","Text","color","fontSize","fontWeight","mb","Grid","templateColumns","pb","gap","borderBottom","column","index","GridItem","colSpan","base","sm","lg","style","textTransform","mt","id","Select","variant","isSearchable","onChange","Flex","justifyContent","Button","size","onClick"],"sourceRoot":""}