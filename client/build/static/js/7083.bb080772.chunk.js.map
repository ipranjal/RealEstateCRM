{"version":3,"file":"static/js/7083.bb080772.chunk.js","mappings":"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","sources":["views/admin/role/changeAccess.js","views/admin/role/components/roleUser.js","views/admin/role/components/userModal.js","views/admin/role/components/roleModal.js","views/admin/role/Add.js","views/admin/role/index.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Flex,\n  Text,\n  Td,\n  Checkbox,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport { useFormik } from \"formik\";\nimport { putApi } from \"services/api\";\nimport DataNotFound from \"components/notFoundData\";\n\nfunction ChangeAccess(props) {\n  const {\n    columnsData,\n    name,\n    tableData,\n    fetchData,\n    setAccess,\n    _id,\n    setRoleModal,\n    editModal,\n    setEditModal,\n  } = props;\n\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const [isLoding, setIsLoding] = useState(false);\n\n  const [gopageValue, setGopageValue] = useState();\n  const data = useMemo(() => tableData || [], [tableData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n\n  const {\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageOptions,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  if (pageOptions?.length < gopageValue) {\n    setGopageValue(pageOptions?.length);\n  }\n\n  const initialValues = {\n    roleName: name,\n    access: tableData,\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    enableReinitialize: true,\n    onSubmit: (values, { resetForm }) => {\n      EditData();\n    },\n  });\n\n  const { values, handleSubmit, setFieldValue, resetForm } = formik;\n\n  // const handleCheckboxChange = (index, fieldName, secondFieldName) => (event) => {\n  //   const { checked } = event.target;\n\n  //   let updatedAccess = values.access.map((item, idx) => {\n  //     if (idx === index) {\n  //       const updatedItem = { ...item, [fieldName]: checked };\n  //       if (secondFieldName && checked === false) {\n  //         updatedItem[secondFieldName] = checked;\n  //         updatedItem.update = checked;\n  //         updatedItem.delete = checked;\n  //       } else if (secondFieldName) {\n  //         updatedItem[secondFieldName] = checked;\n  //       }\n\n  //       return updatedItem;\n  //     }\n  //     return item;\n  //   });\n  //   const leadsIndex = values.access.findIndex(accessItem => accessItem.title === \"Leads\");\n  //   const contactsIndex = values.access.findIndex(accessItem => accessItem.title === \"Contacts\");\n\n  //   const lc = ((updatedAccess[index]?.title === \"Leads\" || updatedAccess[index]?.title === \"Contacts\") && (!updatedAccess[contactsIndex]?.view && !updatedAccess[leadsIndex]?.view))\n\n  //   const mm = updatedAccess?.map((i, idx) => {\n  //     let newItem = { ...i };\n  //     if (secondFieldName && checked === false && lc) {\n  //       if (i.title === \"Emails\" || i.title === \"Calls\" || i.title === \"Meetings\") {\n  //         newItem.create = false;\n  //         newItem.delete = false;\n  //         newItem.update = false;\n  //         newItem.view = false;\n  //       }\n  //     }\n  //     return newItem;\n  //   })\n\n  //   // setFieldValue('access', updatedAccess);\n  //   setFieldValue('access', mm);\n  // };\n\n  const handleCheckboxChange =\n    (index, fieldName, secondFieldName) => (event) => {\n      const { checked } = event?.target;\n      const leadsIndex = values?.access?.findIndex(\n        (accessItem) => accessItem?.title === \"Leads\",\n      );\n      const contactsIndex = values?.access?.findIndex(\n        (accessItem) => accessItem?.title === \"Contacts\",\n      );\n\n      const updatedAccess = values?.access?.map((item, idx) => {\n        if (idx === index) {\n          const updatedItem = { ...item, [fieldName]: checked };\n          if (secondFieldName && !checked) {\n            updatedItem[secondFieldName] =\n              updatedItem.update =\n              updatedItem.delete =\n                checked;\n          } else if (secondFieldName) {\n            updatedItem[secondFieldName] = checked;\n          }\n          return updatedItem;\n        }\n        return item;\n      });\n\n      const finalUpdatedAccessWith = updatedAccess.map((item, idx) => {\n        if (\n          secondFieldName &&\n          checked === false &&\n          !updatedAccess[contactsIndex]?.view &&\n          !updatedAccess[leadsIndex]?.view\n        ) {\n          if ([\"Emails\", \"Calls\", \"Meetings\"]?.includes(item?.title)) {\n            return {\n              ...item,\n              create: false,\n              delete: false,\n              update: false,\n              view: false,\n            };\n          }\n        }\n        return item;\n      });\n\n      setFieldValue(\"access\", finalUpdatedAccessWith);\n    };\n\n  const EditData = async () => {\n    try {\n      setIsLoding(true);\n      setAccess(values?.access);\n      let response = await putApi(`api/role-access/edit/${_id}`, values);\n      if (response?.status === 200) {\n        setEditModal(false);\n        fetchData();\n        setRoleModal(true);\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  const disable = (cell) => {\n    if ([\"Emails\", \"Calls\", \"Meetings\"].includes(cell?.title)) {\n      return !values?.access?.some(\n        (i) => (i?.title === \"Contacts\" || i?.title === \"Leads\") && i?.view,\n      );\n    }\n    return false;\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [editModal]);\n\n  useEffect(() => {\n    if (Array.isArray(data) && data?.length > 0) {\n      setPageSize(data?.length); // Ensure the pageSize is set to the length of the data\n    }\n  }, [data, setPageSize]);\n\n  return (\n    <Modal\n      onClose={() => setEditModal(false)}\n      isOpen={editModal}\n      isCentered\n      size={\"xl\"}\n    >\n      <ModalOverlay />\n      <ModalContent height={\"580px\"} maxWidth={\"2xl\"}>\n        <ModalHeader textTransform={\"capitalize\"}>{name} Access</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody overflow={\"auto\"} height={\"400px\"}>\n          <Table>\n            <Thead>\n              {headerGroups?.map((headerGroup, index) => (\n                <Tr {...headerGroup?.getHeaderGroupProps()} key={index}>\n                  {headerGroup?.headers?.map((column, index) => (\n                    <Th\n                      sx={{ width: \"10px\" }}\n                      pe=\"10px\"\n                      key={index}\n                      borderColor={borderColor}\n                      display={column?.display === false && \"none\"}\n                    >\n                      <Flex\n                        justify=\"space-between\"\n                        align=\"center\"\n                        fontSize={{ sm: \"10px\", lg: \"12px\" }}\n                        color=\"gray.400\"\n                      >\n                        {column?.display !== false && column?.render(\"Header\")}\n                      </Flex>\n                    </Th>\n                  ))}\n                </Tr>\n              ))}\n            </Thead>\n            <Tbody {...getTableBodyProps()}>\n              {isLoding ? (\n                <Tr>\n                  <Td colSpan={columns?.length}>\n                    <Flex\n                      justifyContent={\"center\"}\n                      alignItems={\"center\"}\n                      width=\"100%\"\n                      color={textColor}\n                      fontSize=\"sm\"\n                      fontWeight=\"700\"\n                    >\n                      <Spinner />\n                    </Flex>\n                  </Td>\n                </Tr>\n              ) : data?.length === 0 ? (\n                <Tr>\n                  <Td colSpan={columns?.length}>\n                    <Text\n                      textAlign={\"center\"}\n                      width=\"100%\"\n                      color={textColor}\n                      fontSize=\"sm\"\n                      fontWeight=\"700\"\n                    >\n                      <DataNotFound />\n                    </Text>\n                  </Td>\n                </Tr>\n              ) : (\n                page?.map((row, i) => {\n                  prepareRow(row);\n                  return (\n                    <Tr {...row?.getRowProps()} key={i}>\n                      {row?.cells?.map((cell, index) => {\n                        let data = \"\";\n                        if (cell?.column?.Header === \"title\") {\n                          data = (\n                            <Text\n                              me=\"10px\"\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              {cell?.value}\n                            </Text>\n                          );\n                        } else if (cell?.column?.Header === \"create\") {\n                          data = (\n                            <Text\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              <Checkbox\n                                disabled={disable(cell?.row?.original)}\n                                isChecked={values?.access[i]?.create}\n                                defaultChecked={values?.access[i]?.create}\n                                onChange={handleCheckboxChange(\n                                  i,\n                                  \"create\",\n                                  \"view\",\n                                )}\n                              />\n                            </Text>\n                          );\n                        } else if (cell?.column.Header === \"view\") {\n                          data = (\n                            <Text\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              <Checkbox\n                                disabled={disable(cell?.row?.original)}\n                                isChecked={values?.access[i]?.view}\n                                defaultChecked={values?.access[i]?.view}\n                                onChange={handleCheckboxChange(\n                                  i,\n                                  \"view\",\n                                  \"create\",\n                                )}\n                              />\n                            </Text>\n                          );\n                        } else if (cell?.column.Header === \"update\") {\n                          data = (\n                            <Text\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              <Checkbox\n                                disabled={!values?.access[i]?.view}\n                                isChecked={values?.access[i]?.update}\n                                defaultChecked={values?.access[i]?.update}\n                                onChange={handleCheckboxChange(i, \"update\")}\n                              />\n                            </Text>\n                          );\n                        } else if (cell?.column.Header === \"delete\") {\n                          data = (\n                            <Text\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              <Checkbox\n                                disabled={!values?.access[i]?.view}\n                                isChecked={values?.access[i]?.delete}\n                                defaultChecked={values?.access[i]?.delete}\n                                onChange={handleCheckboxChange(i, \"delete\")}\n                              />\n                            </Text>\n                          );\n                        }\n                        return (\n                          <Td\n                            {...cell?.getCellProps()}\n                            key={index}\n                            fontSize={{ sm: \"14px\" }}\n                            minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                            borderColor=\"transparent\"\n                            sx={{\n                              display: cell?.column?.Header === \"#\" && \"none\",\n                            }}\n                          >\n                            {data}\n                          </Td>\n                        );\n                      })}\n                    </Tr>\n                  );\n                })\n              )}\n            </Tbody>\n          </Table>\n        </ModalBody>\n        <ModalFooter>\n          <Button size=\"sm\" variant=\"brand\" onClick={handleSubmit}>\n            Save\n          </Button>\n          <Button\n            size=\"sm\"\n            onClick={() => {\n              resetForm();\n              setEditModal(false);\n              setRoleModal(true);\n            }}\n            variant=\"outline\"\n            colorScheme=\"red\"\n            sx={{\n              marginLeft: 2,\n              textTransform: \"capitalize\",\n            }}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default ChangeAccess;\n","import {\n  Button,\n  Flex,\n  Modal,\n  ModalBody,\n  Text,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useColorModeValue,\n  Tr,\n  Td,\n  Spinner,\n  Thead,\n  Table,\n  Tbody,\n  Th,\n  Checkbox,\n} from \"@chakra-ui/react\";\nimport DataNotFound from \"components/notFoundData\";\nimport Pagination from \"components/pagination/Pagination\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport { putApi } from \"services/api\";\n\nconst RoleUser = (props) => {\n  const {\n    setUserModal,\n    userModal,\n    tableData,\n    columnsData,\n    setOpenUser,\n    _id,\n    userRole,\n    fetchData,\n  } = props;\n\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const [isLoding, setIsLoding] = useState(false);\n  const [selectedValues, setSelectedValues] = useState([]);\n  const data = useMemo(() => tableData, [tableData]);\n  const [gopageValue, setGopageValue] = useState();\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  if (pageOptions?.length < gopageValue) {\n    setGopageValue(pageOptions?.length);\n  }\n\n  const uniqueValues = [...new Set(selectedValues)];\n\n  const handleCheckboxChange = (event, value) => {\n    if (event?.target?.checked) {\n      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\n    } else {\n      setSelectedValues((prevSelectedValues) =>\n        prevSelectedValues?.filter((selectedValue) => selectedValue !== value),\n      );\n    }\n  };\n\n  useEffect(() => {\n    const pre = userRole?.map((item) => item?._id);\n    setSelectedValues(pre);\n  }, [userModal]);\n\n  const addUser = async () => {\n    const response = await putApi(\n      `api/role-access/assignedUsers/${_id}`,\n      uniqueValues,\n    );\n    if (response?.status === 200) {\n      setUserModal(false);\n      fetchData();\n    }\n  };\n\n  return (\n    <Modal\n      onClose={() => setUserModal(false)}\n      isOpen={userModal}\n      isCentered\n      size={\"4xl\"}\n      style={{ height: \"560px\" }}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>\n          <Flex justifyContent={\"space-between\"}>\n            <Text>Users</Text>\n            <ModalCloseButton mt=\"2\" />\n          </Flex>\n        </ModalHeader>\n        <ModalBody overflowY={\"auto\"} height={\"400px\"}>\n          <Table\n            {...getTableProps()}\n            variant=\"simple\"\n            color=\"gray.500\"\n            mb=\"24px\"\n          >\n            <Thead>\n              {headerGroups?.map((headerGroup, index) => (\n                <Tr {...headerGroup?.getHeaderGroupProps()} key={index}>\n                  {headerGroup?.headers?.map((column, index) => (\n                    <Th\n                      {...column?.getHeaderProps(\n                        column?.isSortable !== false &&\n                          column?.getSortByToggleProps(),\n                      )}\n                      pe=\"10px\"\n                      key={index}\n                      borderColor={borderColor}\n                    >\n                      <Flex\n                        align=\"center\"\n                        justifyContent={column?.center ? \"center\" : \"start\"}\n                        fontSize={{ sm: \"14px\", lg: \"16px\" }}\n                        color=\" secondaryGray.900\"\n                      >\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            //  marginRight: \"8px\"\n                          }}\n                        >\n                          {column?.render(\"Header\")}\n                        </span>\n                        {column?.isSortable !== false && (\n                          <span>\n                            {column?.isSorted ? (\n                              column?.isSortedDesc ? (\n                                <FaSortDown />\n                              ) : (\n                                <FaSortUp />\n                              )\n                            ) : (\n                              <FaSort />\n                            )}\n                          </span>\n                        )}\n                      </Flex>\n                    </Th>\n                  ))}\n                </Tr>\n              ))}\n            </Thead>\n            <Tbody {...getTableBodyProps()}>\n              {isLoding ? (\n                <Tr>\n                  <Td colSpan={columns?.length}>\n                    <Flex\n                      justifyContent={\"center\"}\n                      alignItems={\"center\"}\n                      width=\"100%\"\n                      color={textColor}\n                      fontSize=\"sm\"\n                      fontWeight=\"700\"\n                    >\n                      <Spinner />\n                    </Flex>\n                  </Td>\n                </Tr>\n              ) : data?.length === 0 ? (\n                <Tr>\n                  <Td colSpan={columns?.length}>\n                    <Text\n                      textAlign={\"center\"}\n                      width=\"100%\"\n                      color={textColor}\n                      fontSize=\"sm\"\n                      fontWeight=\"700\"\n                    >\n                      <DataNotFound />\n                    </Text>\n                  </Td>\n                </Tr>\n              ) : (\n                page?.map((row, i) => {\n                  prepareRow(row);\n                  return (\n                    <Tr {...row?.getRowProps()} key={i}>\n                      {row?.cells?.map((cell, index) => {\n                        let data = \"\";\n                        if (cell?.column?.Header === \"#\") {\n                          data = (\n                            <Flex align=\"center\">\n                              <Checkbox\n                                colorScheme=\"brandScheme\"\n                                value={selectedValues}\n                                isChecked={selectedValues.includes(cell?.value)}\n                                onChange={(event) =>\n                                  handleCheckboxChange(event, cell?.value)\n                                }\n                                me=\"10px\"\n                              />\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.row?.index + 1}\n                              </Text>\n                            </Flex>\n                          );\n                        } else if (cell?.column?.Header === \"email Id\") {\n                          data = (\n                            <Text\n                              me=\"10px\"\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              {cell?.value}\n                            </Text>\n                          );\n                        } else if (cell?.column?.Header === \"first Name\") {\n                          data = (\n                            <Text\n                              me=\"10px\"\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              {cell?.value ? cell?.value : \" - \"}\n                            </Text>\n                          );\n                        } else if (cell?.column?.Header === \"last Name\") {\n                          data = (\n                            <Text\n                              me=\"10px\"\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              {cell?.value ? cell?.value : \" - \"}\n                            </Text>\n                          );\n                        } else if (cell?.column?.Header === \"role\") {\n                          data = (\n                            <Text\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              {cell?.value}\n                            </Text>\n                          );\n                        }\n                        return (\n                          <Td\n                            {...cell?.getCellProps()}\n                            key={index}\n                            fontSize={{ sm: \"14px\" }}\n                            minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                            borderColor=\"transparent\"\n                          >\n                            {data}\n                          </Td>\n                        );\n                      })}\n                    </Tr>\n                  );\n                })\n              )}\n            </Tbody>\n          </Table>\n          {data?.length > 5 && (\n            <Pagination\n              gotoPage={gotoPage}\n              gopageValue={gopageValue}\n              setGopageValue={setGopageValue}\n              pageCount={pageCount}\n              canPreviousPage={canPreviousPage}\n              previousPage={previousPage}\n              canNextPage={canNextPage}\n              pageOptions={pageOptions}\n              setPageSize={setPageSize}\n              nextPage={nextPage}\n              pageSize={pageSize}\n              pageIndex={pageIndex}\n            />\n          )}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            variant=\"brand\"\n            size=\"sm\"\n            onClick={() => {\n              addUser();\n              setOpenUser(true);\n            }}\n          >\n            Save\n          </Button>\n          <Button\n            size=\"sm\"\n            onClick={() => {\n              setUserModal(false);\n              setSelectedValues([]);\n              setOpenUser(true);\n            }}\n            variant=\"outline\"\n            colorScheme=\"red\"\n            sx={{\n              marginLeft: 2,\n              textTransform: \"capitalize\",\n            }}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default RoleUser;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Flex,\n  Text,\n  Td,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\nimport Pagination from \"components/pagination/Pagination\";\nimport RoleUser from \"./roleUser\";\nimport { getApi } from \"services/api\";\nimport DataNotFound from \"components/notFoundData\";\n\nfunction UserModal(props) {\n  const {\n    tableData,\n    columnsData,\n    isOpen,\n    _id,\n    setRoleModal,\n    setOpenUser,\n    fetchData,\n  } = props;\n\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const [selectedValues, setSelectedValues] = useState([]);\n  const [isLoding, setIsLoding] = useState(false);\n  const data = useMemo(() => tableData, [tableData]);\n  const [userModal, setUserModal] = useState(false);\n  const [userData, setUserData] = useState([]);\n  const [gopageValue, setGopageValue] = useState();\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  if (pageOptions?.length < gopageValue) {\n    setGopageValue(pageOptions?.length);\n  }\n\n  const handleCheckboxChange = (event, value) => {\n    if (event?.target?.checked) {\n      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\n    } else {\n      setSelectedValues((prevSelectedValues) =>\n        prevSelectedValues?.filter((selectedValue) => selectedValue !== value),\n      );\n    }\n  };\n\n  const userFetchData = async () => {\n    let result = await getApi(\"api/user/?role=user\");\n    setUserData(result?.data?.user);\n  };\n\n  useEffect(() => {\n    userFetchData();\n  }, []);\n\n  return (\n    <>\n      <Modal\n        onClose={() => setOpenUser(false)}\n        isOpen={isOpen}\n        isCentered\n        size={\"4xl\"}\n        style={{ height: \"560px\" }}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader height={\"580px\"}>\n            <Flex justifyContent={\"space-between\"}>\n              <Text>Users</Text>\n              <Button\n                variant=\"brand\"\n                size=\"sm\"\n                me={\"2rem\"}\n                onClick={() => {\n                  setOpenUser(false);\n                  setUserModal(true);\n                }}\n              >\n                Manage Users\n              </Button>\n              <ModalCloseButton mt=\"2\" />\n            </Flex>\n          </ModalHeader>\n          <ModalBody overflow={\"auto\"} height={\"400px\"}>\n            <Table\n              {...getTableProps()}\n              variant=\"simple\"\n              color=\"gray.500\"\n              mb=\"24px\"\n            >\n              <Thead>\n                {headerGroups?.map((headerGroup, index) => (\n                  <Tr {...headerGroup?.getHeaderGroupProps()} key={index}>\n                    {headerGroup?.headers?.map((column, index) => (\n                      <Th\n                        {...column?.getHeaderProps(\n                          column?.isSortable !== false &&\n                            column?.getSortByToggleProps(),\n                        )}\n                        pe=\"10px\"\n                        key={index}\n                        borderColor={borderColor}\n                      >\n                        <Flex\n                          align=\"center\"\n                          justifyContent={column?.center ? \"center\" : \"start\"}\n                          fontSize={{ sm: \"14px\", lg: \"16px\" }}\n                          color=\" secondaryGray.900\"\n                        >\n                          <span\n                            style={{\n                              textTransform: \"capitalize\",\n                            }}\n                          >\n                            {column?.render(\"Header\")}\n                          </span>\n                          {column?.isSortable !== false && (\n                            <span>\n                              {column?.isSorted ? (\n                                column?.isSortedDesc ? (\n                                  <FaSortDown />\n                                ) : (\n                                  <FaSortUp />\n                                )\n                              ) : (\n                                <FaSort />\n                              )}\n                            </span>\n                          )}\n                        </Flex>\n                      </Th>\n                    ))}\n                  </Tr>\n                ))}\n              </Thead>\n              <Tbody {...getTableBodyProps()}>\n                {isLoding ? (\n                  <Tr>\n                    <Td colSpan={columns?.length}>\n                      <Flex\n                        justifyContent={\"center\"}\n                        alignItems={\"center\"}\n                        width=\"100%\"\n                        color={textColor}\n                        fontSize=\"sm\"\n                        fontWeight=\"700\"\n                      >\n                        <Spinner />\n                      </Flex>\n                    </Td>\n                  </Tr>\n                ) : data?.length === 0 ? (\n                  <Tr>\n                    <Td colSpan={columns?.length}>\n                      <Text\n                        textAlign={\"center\"}\n                        width=\"100%\"\n                        color={textColor}\n                        fontSize=\"sm\"\n                        fontWeight=\"700\"\n                      >\n                        <DataNotFound />\n                      </Text>\n                    </Td>\n                  </Tr>\n                ) : (\n                  page?.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                      <Tr {...row?.getRowProps()} key={i}>\n                        {row?.cells?.map((cell, index) => {\n                          let data = \"\";\n                          if (cell?.column?.Header === \"#\") {\n                            data = (\n                              <Flex align=\"center\">\n                                <Text\n                                  color={textColor}\n                                  fontSize=\"sm\"\n                                  fontWeight=\"700\"\n                                >\n                                  {cell?.row?.index + 1}\n                                </Text>\n                              </Flex>\n                            );\n                          } else if (cell?.column?.Header === \"email Id\") {\n                            data = (\n                              <Text\n                                me=\"10px\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value}\n                              </Text>\n                            );\n                          } else if (cell?.column?.Header === \"first Name\") {\n                            data = (\n                              <Text\n                                me=\"10px\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? cell?.value : \" - \"}\n                              </Text>\n                            );\n                          } else if (cell?.column?.Header === \"last Name\") {\n                            data = (\n                              <Text\n                                me=\"10px\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? cell?.value : \" - \"}\n                              </Text>\n                            );\n                          } else if (cell?.column?.Header === \"role\") {\n                            data = (\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value}\n                              </Text>\n                            );\n                          }\n                          return (\n                            <Td\n                              {...cell?.getCellProps()}\n                              key={index}\n                              fontSize={{ sm: \"14px\" }}\n                              minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                              borderColor=\"transparent\"\n                            >\n                              {data}\n                            </Td>\n                          );\n                        })}\n                      </Tr>\n                    );\n                  })\n                )}\n              </Tbody>\n            </Table>\n            {data?.length > 5 && (\n              <Pagination\n                gotoPage={gotoPage}\n                gopageValue={gopageValue}\n                setGopageValue={setGopageValue}\n                pageCount={pageCount}\n                canPreviousPage={canPreviousPage}\n                previousPage={previousPage}\n                canNextPage={canNextPage}\n                pageOptions={pageOptions}\n                setPageSize={setPageSize}\n                nextPage={nextPage}\n                pageSize={pageSize}\n                pageIndex={pageIndex}\n              />\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                setOpenUser(false);\n                setRoleModal(true);\n              }}\n              variant=\"outline\"\n              colorScheme=\"red\"\n              sx={{\n                marginLeft: 2,\n                textTransform: \"capitalize\",\n              }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <RoleUser\n        fetchData={fetchData}\n        userModal={userModal}\n        setOpenUser={setOpenUser}\n        _id={_id}\n        setUserModal={setUserModal}\n        userFetchData={userFetchData}\n        userRole={tableData}\n        tableData={userData || []}\n        columnsData={columnsData || []}\n      />\n    </>\n  );\n}\n\nexport default UserModal;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Flex,\n  Text,\n  Td,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport ChangeAccess from \"../changeAccess\";\nimport UserModal from \"./userModal\";\nimport { getApi } from \"services/api\";\nimport DataNotFound from \"components/notFoundData\";\n\nfunction RoleModal(props) {\n  const {\n    name,\n    tableData,\n    fetchData,\n    columnsData,\n    isOpen,\n    setAction,\n    setAccess,\n    _id,\n    onOpen,\n    setRoleModal,\n  } = props;\n\n  const tableColumns = [\n    {\n      Header: \"#\",\n      accessor: \"_id\",\n      isSortable: false,\n      width: 10,\n    },\n    { Header: \"email Id\", accessor: \"username\" },\n    { Header: \"first Name\", accessor: \"firstName\" },\n    { Header: \"last Name\", accessor: \"lastName\" },\n    { Header: \"role\", accessor: \"role\" },\n  ];\n\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const [isLoding, setIsLoding] = useState(false);\n\n  const [editModal, setEditModal] = useState(false);\n  const [openUser, setOpenUser] = useState();\n  const [gopageValue, setGopageValue] = useState();\n  const data = useMemo(() => tableData || [], [tableData]);\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [userdata, setUserData] = useState([]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize: 500 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n\n  const {\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageOptions,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  if (pageOptions?.length < gopageValue) {\n    setGopageValue(pageOptions?.length);\n  }\n\n  const userFetchData = async () => {\n    if (_id) {\n      let result = await getApi(\"api/role-access/assignedUsers/\", _id);\n      setUserData(result?.data);\n    }\n  };\n\n  useEffect(() => {\n    userFetchData();\n  }, [_id]);\n\n  return (\n    <>\n      <Modal\n        onClose={() => setRoleModal(false)}\n        isOpen={isOpen}\n        isCentered\n        size={\"xl\"}\n      >\n        <ModalOverlay />\n        <ModalContent height={\"580px\"} maxWidth={\"2xl\"}>\n          <ModalHeader>\n            <Flex justifyContent={\"space-between\"}>\n              <Text textTransform={\"capitalize\"}>{name} Access</Text>\n              <Text\n                style={{\n                  marginRight: \"25px\",\n                  fontSize: \"15px\",\n                  fontWeight: \"700\",\n                  marginTop: \"5px\",\n                  color: \"blue\",\n                  cursor: \"pointer\",\n                  textDecoration: \"underline\",\n                }}\n                onClick={() => {\n                  setOpenUser(true);\n                  setRoleModal(false);\n                }}\n              >\n                View user's in {name} role\n              </Text>\n              <ModalCloseButton mt=\"2\" />\n            </Flex>\n          </ModalHeader>\n          <ModalBody overflow={\"auto\"} height={\"400px\"}>\n            <Table>\n              <Thead>\n                {headerGroups?.map((headerGroup, index) => (\n                  <Tr {...headerGroup?.getHeaderGroupProps()} key={index}>\n                    {headerGroup.headers?.map((column, index) => (\n                      <Th\n                        sx={{ width: \"10px\" }}\n                        key={index}\n                        borderColor={borderColor}\n                        display={column?.display === false && \"none\"}\n                      >\n                        {column?.display !== false && column?.render(\"Header\")}\n                      </Th>\n                    ))}\n                  </Tr>\n                ))}\n              </Thead>\n              <Tbody {...getTableBodyProps()}>\n                {isLoding ? (\n                  <Tr>\n                    <Td colSpan={columns?.length}>\n                      <Flex\n                        justifyContent={\"center\"}\n                        alignItems={\"center\"}\n                        width=\"100%\"\n                        color={textColor}\n                        fontSize=\"sm\"\n                        fontWeight=\"700\"\n                      >\n                        <Spinner />\n                      </Flex>\n                    </Td>\n                  </Tr>\n                ) : data?.length === 0 ? (\n                  <Tr>\n                    <Td colSpan={columns?.length}>\n                      <Text\n                        textAlign={\"center\"}\n                        width=\"100%\"\n                        color={textColor}\n                        fontSize=\"sm\"\n                        fontWeight=\"700\"\n                      >\n                        <DataNotFound />\n                      </Text>\n                    </Td>\n                  </Tr>\n                ) : (\n                  page?.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                      <Tr {...row?.getRowProps()} key={i}>\n                        {row?.cells?.map((cell, index) => {\n                          let data = \"\";\n                          if (cell?.column?.Header === \"title\") {\n                            data = (\n                              <Text\n                                me=\"10px\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value}\n                              </Text>\n                            );\n                          } else if (cell?.column?.Header === \"create\") {\n                            data = (\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? \"Yes\" : \"No\"}\n                              </Text>\n                            );\n                          } else if (cell?.column?.Header === \"view\") {\n                            data = (\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? \"Yes\" : \"No\"}\n                              </Text>\n                            );\n                          } else if (cell?.column?.Header === \"update\") {\n                            data = (\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? \"Yes\" : \"No\"}\n                              </Text>\n                            );\n                          } else if (cell?.column?.Header === \"delete\") {\n                            data = (\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? \"Yes\" : \"No\"}\n                              </Text>\n                            );\n                          }\n                          return (\n                            <Td\n                              {...cell?.getCellProps()}\n                              key={index}\n                              fontSize={{ sm: \"14px\" }}\n                              minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                              borderColor=\"transparent\"\n                              sx={{\n                                display: cell?.column?.Header === \"#\" && \"none\",\n                              }}\n                            >\n                              {data}\n                            </Td>\n                          );\n                        })}\n                      </Tr>\n                    );\n                  })\n                )}\n              </Tbody>\n            </Table>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              variant=\"brand\"\n              size=\"sm\"\n              onClick={() => {\n                setEditModal(true);\n                setRoleModal(false);\n              }}\n            >\n              Change Access\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={() => setRoleModal(false)}\n              variant=\"outline\"\n              colorScheme=\"red\"\n              sx={{\n                marginLeft: 2,\n                textTransform: \"capitalize\",\n              }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <ChangeAccess\n        tableData={tableData ?? []}\n        accessRole={tableData ?? []}\n        setAccess={setAccess}\n        setRoleModal={setRoleModal}\n        columnsData={columnsData ?? []}\n        _id={_id}\n        fetchData={fetchData}\n        name={name}\n        setEditModal={setEditModal}\n        setAction={setAction}\n        editModal={editModal}\n      />\n      <UserModal\n        isOpen={openUser}\n        setRoleModal={setRoleModal}\n        setOpenUser={setOpenUser}\n        onOpen={onOpen}\n        columnsData={tableColumns ?? []}\n        tableData={userdata ?? []}\n        setAction={setAction}\n        _id={_id}\n        fetchData={userFetchData}\n        userdata={userdata}\n      />\n    </>\n  );\n}\n\nexport default RoleModal;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport {\n  Button,\n  FormLabel,\n  Grid,\n  GridItem,\n  IconButton,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport { useFormik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { postApi } from \"services/api\";\nimport * as yup from \"yup\";\n\nconst AddRole = (props) => {\n  const { onClose, isOpen, setAction } = props;\n  const [isLoding, setIsLoding] = useState(false);\n\n  const initialValues = {\n    roleName: \"\",\n    description: \"\",\n  };\n\n  const validationSchema = yup.object({\n    roleName: yup.string().required(\"Role Name is required\"),\n    description: yup.string().required(\"Description is required\"),\n  });\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: (values, { resetForm }) => {\n      AddData();\n      resetForm();\n    },\n  });\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n    resetForm,\n  } = formik;\n\n  const AddData = async () => {\n    try {\n      setIsLoding(true);\n      let response = await postApi(\"api/role-access/add\", values);\n      if (response && response?.status === 200) {\n        onClose(false);\n        setAction((pre) => !pre);\n      } else {\n        toast.error(response?.response?.data?.message);\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} isCentered>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader justifyContent=\"space-between\" display=\"flex\">\n          Add Role\n          <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />\n        </ModalHeader>\n        <ModalBody>\n          <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Role Name<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values?.roleName}\n                name=\"roleName\"\n                placeholder=\"Enter Role Name\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.roleName && touched?.roleName ? \"red.300\" : null\n                }\n              />\n              <Text mb=\"10px\" fontSize={\"sm\"} color={\"red\"}>\n                {\" \"}\n                {errors?.roleName && touched?.roleName && errors?.roleName}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Description<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values?.description}\n                name=\"description\"\n                placeholder=\"Enter Description\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.description && touched?.description ? \"red.300\" : null\n                }\n              />\n              <Text mb=\"10px\" fontSize={\"sm\"} color={\"red\"}>\n                {\" \"}\n                {errors?.description &&\n                  touched?.description &&\n                  errors?.description}\n              </Text>\n            </GridItem>\n          </Grid>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            size=\"sm\"\n            variant=\"brand\"\n            mr={1}\n            disabled={isLoding ? true : false}\n            onClick={handleSubmit}\n          >\n            {isLoding ? <Spinner /> : \"Save\"}\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            color={\"red\"}\n            colorScheme=\"red\"\n            onClick={() => {\n              formik.resetForm();\n              onClose(false);\n            }}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default AddRole;\n","import { Button, Text, useDisclosure } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport { getApi } from \"services/api\";\nimport CommonCheckTable from \"components/reactTable/checktable\";\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { useNavigate } from \"react-router-dom\";\nimport RoleModal from \"./components/roleModal\";\nimport AddRole from \"./Add\";\n\nconst Index = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [roleModal, setRoleModal] = useState(false);\n  const [access, setAccess] = useState([]);\n  const [roleId, setRoleId] = useState(\"\");\n  const [searchboxOutside, setSearchboxOutside] = useState(\"\");\n  const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);\n  const [displaySearchData, setDisplaySearchData] = useState(false);\n  const [roleName, setRoleName] = useState(\"\");\n  const [searchedData, setSearchedData] = useState([]);\n\n  const columns = [\n    {\n      Header: \"#\",\n      accessor: \"_id\",\n      isSortable: false,\n      width: 10,\n      display: false,\n    },\n    {\n      Header: \"Role Name\",\n      accessor: \"roleName\",\n      cell: (cell) => (\n        <Text\n          me=\"10px\"\n          onClick={() => {\n            setRoleModal(true);\n            setRoleName(cell?.value);\n            setRoleId(cell?.row?.original?._id);\n            setAccess(cell?.row?.original?.access);\n          }}\n          color=\"brand.600\"\n          sx={{\n            \"&:hover\": {\n              color: \"blue.500\",\n              textDecoration: \"underline\",\n              cursor: \"pointer\",\n            },\n          }}\n          fontSize=\"sm\"\n          fontWeight=\"700\"\n        >\n          {cell?.value}\n        </Text>\n      ),\n    },\n    { Header: \"Description\", accessor: \"description\" },\n  ];\n  const rowColumns = [\n    {\n      Header: \"#\",\n      accessor: \"_id\",\n      isSortable: false,\n      width: 10,\n      display: false,\n    },\n\n    { Header: \"title\", accessor: \"title\" },\n    { Header: \"create\", accessor: \"create\", width: \"20px\" },\n    { Header: \"view\", accessor: \"view\", width: \"20px\" },\n    { Header: \"update\", accessor: \"update\", width: \"20px\" },\n    { Header: \"delete\", accessor: \"delete\", width: \"20px\" },\n  ];\n  const [action, setAction] = useState(false);\n  const [isLoding, setIsLoding] = useState(false);\n  const [data, setData] = useState([]);\n  const size = \"lg\";\n  const navigate = useNavigate();\n\n  const fetchData = async () => {\n    setIsLoding(true);\n    let result = await getApi(\"api/role-access\");\n    setData(result?.data);\n    setIsLoding(false);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [action]);\n\n  return (\n    <div>\n      <CommonCheckTable\n        title={\"Roles\"}\n        isLoding={isLoding}\n        columnData={columns ?? []}\n        // dataColumn={columns ?? []}\n        allData={data || []}\n        tableData={data}\n        // AdvanceSearch={() => \"\"}\n        AdvanceSearch={false}\n        tableCustomFields={[]}\n        searchedDataOut={searchedData}\n        searchDisplay={displaySearchData}\n        setSearchDisplay={setDisplaySearchData}\n        setSearchedDataOut={setSearchedData}\n        searchboxOutside={searchboxOutside}\n        // setSearchboxOutside={setSearchboxOutside}\n        BackButton={\n          <Button\n            onClick={() => navigate(\"/admin-setting\")}\n            variant=\"brand\"\n            size=\"sm\"\n            leftIcon={<IoIosArrowBack />}\n            ml={2}\n          >\n            Back\n          </Button>\n        }\n        deleteMany={true}\n        access={true}\n        checkBox={false}\n        getTagValuesOutSide={getTagValuesOutSide}\n        setGetTagValuesOutside={setGetTagValuesOutside}\n        ManageGrid={false}\n        onOpen={onOpen}\n        customSearch={true}\n      />\n      <AddRole\n        isOpen={isOpen}\n        size={\"sm\"}\n        setAction={setAction}\n        onClose={onClose}\n      />\n      {access && (\n        <RoleModal\n          isOpen={roleModal}\n          setRoleModal={setRoleModal}\n          onOpen={onOpen}\n          isLoding={isLoding}\n          columnsData={rowColumns ?? []}\n          name={roleName}\n          _id={roleId}\n          tableData={access ?? []}\n          setAccess={setAccess}\n          fetchData={fetchData}\n          setAction={setAction}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Index;\n"],"names":["props","columnsData","name","tableData","fetchData","setAccess","_id","setRoleModal","editModal","setEditModal","textColor","useColorModeValue","borderColor","columns","useMemo","isLoding","setIsLoding","useState","gopageValue","setGopageValue","data","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableBodyProps","headerGroups","prepareRow","page","pageOptions","setPageSize","state","pageSize","length","initialValues","roleName","access","formik","useFormik","enableReinitialize","onSubmit","values","_ref","resetForm","EditData","handleSubmit","setFieldValue","handleCheckboxChange","index","fieldName","secondFieldName","event","_values$access","_values$access2","_values$access3","checked","target","leadsIndex","findIndex","accessItem","title","contactsIndex","updatedAccess","map","item","idx","updatedItem","update","delete","finalUpdatedAccessWith","_updatedAccess$contac","_updatedAccess$leadsI","_ref2","view","includes","create","async","response","putApi","status","e","console","log","disable","cell","_values$access4","some","i","useEffect","Array","isArray","_jsxs","Modal","onClose","isOpen","isCentered","size","children","_jsx","ModalOverlay","ModalContent","height","maxWidth","ModalHeader","textTransform","ModalCloseButton","ModalBody","overflow","Table","Thead","headerGroup","_headerGroup$headers","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","sx","width","pe","display","Flex","justify","align","fontSize","sm","lg","color","render","Tbody","Td","colSpan","justifyContent","alignItems","fontWeight","Spinner","Text","textAlign","DataNotFound","row","_row$cells","getRowProps","cells","_cell$column","_cell$column2","_cell$column3","Header","me","value","_cell$row","_values$access$i","_values$access$i2","Checkbox","disabled","original","isChecked","defaultChecked","onChange","_cell$row2","_values$access$i3","_values$access$i4","_values$access$i5","_values$access$i6","_values$access$i7","_values$access$i8","_values$access$i9","_values$access$i10","getCellProps","minW","md","ModalFooter","Button","variant","onClick","colorScheme","marginLeft","setUserModal","userModal","setOpenUser","userRole","selectedValues","setSelectedValues","getTableProps","canPreviousPage","canNextPage","pageCount","gotoPage","nextPage","previousPage","uniqueValues","Set","pre","style","mt","overflowY","mb","getHeaderProps","isSortable","getSortByToggleProps","center","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","_cell$column4","_cell$column5","_event$target","prevSelectedValues","filter","selectedValue","Pagination","addUser","userData","setUserData","userFetchData","_result$data","result","getApi","user","_Fragment","RoleUser","setAction","onOpen","tableColumns","accessor","openUser","userdata","JSON","parse","localStorage","getItem","marginRight","marginTop","cursor","textDecoration","_cell$column6","ChangeAccess","accessRole","UserModal","validationSchema","yup","required","description","AddData","errors","touched","handleBlur","handleChange","postApi","_response$response","_response$response$da","toast","error","message","IconButton","icon","CloseIcon","Grid","templateColumns","gap","GridItem","base","FormLabel","ms","Input","onBlur","placeholder","mr","Index","useDisclosure","roleModal","roleId","setRoleId","searchboxOutside","setSearchboxOutside","getTagValuesOutSide","setGetTagValuesOutside","displaySearchData","setDisplaySearchData","setRoleName","searchedData","setSearchedData","_cell$row$original","_cell$row2$original","rowColumns","action","setData","navigate","useNavigate","CommonCheckTable","columnData","allData","AdvanceSearch","tableCustomFields","searchedDataOut","searchDisplay","setSearchDisplay","setSearchedDataOut","BackButton","leftIcon","IoIosArrowBack","ml","deleteMany","checkBox","ManageGrid","customSearch","AddRole","RoleModal"],"sourceRoot":""}