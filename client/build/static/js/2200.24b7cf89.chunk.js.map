{"version":3,"file":"static/js/2200.24b7cf89.chunk.js","mappings":"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","sources":["views/admin/property/components/Upload.js","views/admin/property/components/propertyPhoto.js","components/commonTableModel/EmailModel.js","components/commonTableModel/PhoneModel.js","views/admin/property/View.js","views/admin/property/Edit.js","views/admin/property/Add.js"],"sourcesContent":["// Chakra imports\nimport {\n  Box,\n  Flex,\n  Grid,\n  GridItem,\n  Icon,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n// Custom components\n// Assets\nimport Dropzone from \"components/Dropzone\";\nimport { MdUpload } from \"react-icons/md\";\n\nexport default function Upload(props) {\n  const { used, total, count, ...rest } = props;\n  // Chakra Color Mode\n  const textColorPrimary = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const brandColor = useColorModeValue(\"brand.500\", \"white\");\n  const textColorSecondary = \"gray.400\";\n  return (\n    <Grid templateColumns=\"repeat(12, 1fr)\" gap={2}>\n      <GridItem colSpan={{ base: 12 }}>\n        <Dropzone\n          w={{ base: \"100%\" }}\n          me=\"36px\"\n          minH={200}\n          img={props?.text === \"Property Photos\" ? \"img\" : \"\"}\n          height={\"100%\"}\n          onFileSelect={props?.onFileSelect}\n          content={\n            <Box>\n              <Icon as={MdUpload} w=\"80px\" h=\"80px\" color={brandColor} />\n              <Flex justify=\"center\" mx=\"auto\" mb=\"12px\">\n                <Text fontSize=\"xl\" fontWeight=\"700\" color={brandColor}>\n                  Upload Files\n                </Text>\n              </Flex>\n              {count > 0 && (\n                <Text fontSize=\"sm\" fontWeight=\"500\" color=\"secondaryGray.500\">\n                  Selected Files : {count}\n                </Text>\n              )}\n            </Box>\n          }\n        />\n      </GridItem>\n      <GridItem colSpan={{ base: 12 }}>\n        <Flex direction=\"column\">\n          <Text\n            color={textColorPrimary}\n            fontWeight=\"bold\"\n            textAlign=\"start\"\n            fontSize=\"2xl\"\n            mt={{ base: \"20px\" }}\n          >\n            Upload {props?.text}\n          </Text>\n          <Text\n            color={textColorSecondary}\n            fontSize=\"md\"\n            my={{ base: \"auto\" }}\n            mx=\"auto\"\n            textAlign=\"start\"\n          >\n            Accepted File Types (Images files - 15MB max) only 10 files\n          </Text>\n        </Flex>\n      </GridItem>\n    </Grid>\n  );\n}\n","import {\n  Button,\n  Grid,\n  GridItem,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport { useFormik } from \"formik\";\nimport { useState } from \"react\";\nimport { postApi } from \"services/api\";\nimport Upload from \"./Upload\";\n\nconst PropertyPhoto = (props) => {\n  const { onClose, isOpen, fetchData, text } = props;\n  const [isLoding, setIsLoding] = useState(false);\n\n  const initialValues = {\n    property: \"\",\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: (values, { resetForm }) => {\n      AddData();\n      resetForm();\n    },\n  });\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n  } = formik;\n\n  const AddData = async () => {\n    try {\n      setIsLoding(true);\n      const formData = new FormData();\n      // Append property to the formData\n      values?.property?.forEach((file) => {\n        formData?.append(\"property\", file);\n      });\n      let response;\n      if (text === \"Property Photos\") {\n        response = await postApi(\n          `api/property/add-property-photos/${props?.id}`,\n          formData,\n        );\n      } else if (text === \"Virtual Tours or Videos\") {\n        response = await postApi(\n          `api/property/add-virtual-tours-or-videos/${props?.id}`,\n          formData,\n        );\n      } else if (text === \"Floor Plans\") {\n        response = await postApi(\n          `api/property/add-floor-plans/${props?.id}`,\n          formData,\n        );\n      } else if (text === \"Property Documents\") {\n        response = await postApi(\n          `api/property/add-property-documents/${props?.id}`,\n          formData,\n        );\n      }\n\n      if (response?.status === 200) {\n        fetchData(1);\n        formik.resetForm();\n        onClose();\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  return (\n    <Modal onClose={onClose} isOpen={isOpen} isCentered>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Select {text} </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n            <GridItem colSpan={{ base: 12 }}>\n              <Upload\n                count={values?.property?.length}\n                onFileSelect={(file) => setFieldValue(\"property\", file)}\n                text={text}\n              />\n              <Text mb=\"10px\" color={\"red\"}>\n                {\" \"}\n                {errors?.property && touched?.property && (\n                  <>Please Select {text}</>\n                )}\n              </Text>\n            </GridItem>\n          </Grid>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            size=\"sm\"\n            variant=\"brand\"\n            onClick={handleSubmit}\n            mr={1}\n            disabled={isLoding ? true : false}\n          >\n            {isLoding ? <Spinner /> : \"Save\"}\n          </Button>\n          <Button\n            size=\"sm\"\n            colorScheme=\"red\"\n            variant=\"outline\"\n            onClick={() => {\n              onClose();\n              formik.resetForm();\n            }}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default PropertyPhoto;\n","import {\n  Button,\n  FormLabel,\n  Grid,\n  GridItem,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Radio,\n  RadioGroup,\n  Select,\n  Stack,\n  Text,\n  Textarea,\n  Flex,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport { LiaMousePointerSolid } from \"react-icons/lia\";\nimport Spinner from \"components/spinner/Spinner\";\nimport dayjs from \"dayjs\";\nimport { useFormik } from \"formik\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { emailSchema } from \"schema\";\nimport { postApi, getApi } from \"services/api\";\nimport { fetchEmailTempData } from \"../../redux/slices/emailTempSlice\";\nimport UserModel from \"components/commonTableModel/UserModel\";\nimport { CUIAutoComplete } from \"chakra-ui-autocomplete\";\nimport ContactModel from \"./ContactModel\";\nimport LeadModel from \"components/commonTableModel/LeadModel\";\nimport MultiPropertyModel from \"components/commonTableModel/MultiPropertyModel\";\nimport * as yup from \"yup\";\nimport { useParams } from \"react-router-dom\";\n\nconst EmailModel = (props) => {\n  const { onClose, isOpen, fetchData } = props;\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [isLoding, setIsLoding] = useState(false);\n  const [assignToLeadData, setAssignToLeadData] = useState([]);\n  const [assignToContactData, setAssignToContactData] = useState([]);\n  const [contactModelOpen, setContactModel] = useState(false);\n  const [leadModelOpen, setLeadModel] = useState(false);\n  const [propertyModelOpen, setPropertyModelOpen] = useState(false);\n  const [assignToProperyData, setAssignToPropertyData] = useState([]);\n  const todayTime = new Date()?.toISOString()?.split(\".\")[0];\n  const [data, setData] = useState([]);\n  const [assignToSalesData, setAssignToSalesData] = useState([]);\n  const [salesPersonsModelOpen, setSalesPersonsModelOpen] = useState(false);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  const initialValues = {\n    sender: user?._id,\n    recipient: props.lead !== true ? props?.contactEmail : props?.leadEmail,\n    subject: \"\",\n    message: \"\",\n    createByContact: props?.id && props?.lead !== true ? props?.id : \"\",\n    createByLead: props?.id && props?.lead === true ? props?.id : \"\",\n    startDate: \"\",\n    property: [id],\n    type: \"message\",\n    html: \"\",\n    createBy: user?._id,\n    salesAgent: \"\", // sales person user id\n  };\n  const validationSchema = yup.object({\n    sender: yup.string().required(\"Sender Is required\"),\n    recipient: yup.string().email().required(\"Recipient Is required\"),\n    cc: yup.string().email(),\n    bcc: yup.string().email(),\n    relatedToContact: yup.string(),\n    property: yup.array().required(\"property is required\"),\n    relatedToLead: yup.string(),\n    subject: yup.string().required(\"Subject Is required\"),\n    message: yup.string(),\n    startDate: yup.date().required(\"Start Date Is required\"),\n    createBy: yup.string(),\n    createByLead: yup.string(),\n    salesAgent: yup.string().required(\"Assign To Sales Agent Is required\"),\n  });\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: (values, { resetForm }) => {\n      AddData();\n      resetForm();\n    },\n  });\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n  } = formik;\n\n  const AddData = async () => {\n    try {\n      setIsLoding(true);\n      let response = await postApi(\"api/email/add\", values);\n      if (response.status === 200) {\n        props.onClose();\n        fetchData(1);\n        // setAction((pre) => !pre)\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n  const fetchRecipientData = async () => {\n    if (values?.createByContact) {\n      let findEmail = assignToContactData.find(\n        (item) => item?._id === values?.createByContact,\n      );\n      if (findEmail) {\n        setFieldValue(\"recipient\", findEmail?.email);\n      }\n    } else if (values?.createByLead) {\n      let findEmail = assignToLeadData?.find(\n        (item) => item?._id === values?.createByLead,\n      );\n      if (findEmail) {\n        setFieldValue(\"recipient\", findEmail?.leadEmail);\n      }\n    } else {\n      setFieldValue(\"recipient\", \"\");\n    }\n  };\n  useEffect(() => {\n    fetchRecipientData();\n  }, [values?.createByContact, values?.createByLead]);\n\n  const fetchEmailTemp = async () => {\n    setIsLoding(true);\n    const result = await dispatch(fetchEmailTempData());\n    if (result?.payload?.status === 200) {\n      setData(result?.payload?.data);\n    } else {\n      toast.error(\"Failed to fetch data\", \"error\");\n    }\n    setIsLoding(false);\n  };\n  const getAllApi = async () => {\n    values.start = props?.date;\n    try {\n      let result;\n      if (values?.category === \"Contact\" && assignToContactData?.length <= 0) {\n        result = await getApi(\n          user?.role === \"superAdmin\"\n            ? \"api/contact/\"\n            : `api/contact/?createBy=${user?._id}`,\n        );\n        setAssignToContactData(result?.data);\n      } else if (values?.category === \"Lead\" && assignToLeadData <= 0) {\n        result = await getApi(\n          user?.role === \"superAdmin\"\n            ? \"api/lead/\"\n            : `api/lead/?createBy=${user?._id}`,\n        );\n        setAssignToLeadData(result?.data);\n      }\n      const propertyOptionData = await getApi(\n        user?.role === \"superAdmin\"\n          ? \"api/property\"\n          : `api/property/?createBy=${user?._id}`,\n      );\n      setAssignToPropertyData(propertyOptionData?.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  useEffect(() => {\n    getAllApi();\n  }, [props, values?.category]);\n  const fetchUsersData = async () => {\n    setIsLoding(true);\n    try {\n      let result = await getApi(\"api/user/\");\n\n      let salesPersons =\n        result?.data?.user?.filter((userData) =>\n          userData?.roles?.some((role) => role?.roleName === \"Sales\"),\n        ) || [];\n      setAssignToSalesData(salesPersons);\n    } catch (error) {\n      console.error(\"Failed to fetch users data:\", error);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  useEffect(() => {\n    if (values?.type === \"template\") fetchEmailTemp();\n  }, [values?.type]);\n\n  useEffect(() => {\n    fetchUsersData();\n  }, []);\n  const getPropertyOptions = assignToProperyData?.map((item) => ({\n    ...item,\n    value: item?._id,\n    label: item?.name,\n  }));\n\n  const extractLabels = (selectedItems) => {\n    return selectedItems?.map((item) => item?._id);\n  };\n\n  return (\n    <Modal onClose={onClose} isOpen={isOpen} isCentered>\n      <ModalOverlay />\n      <ModalContent height={\"580px\"}>\n        <ModalHeader>Add Email</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody overflowY={\"auto\"} height={\"400px\"}>\n          {/* Contact Model  */}\n          <ContactModel\n            isOpen={contactModelOpen}\n            data={assignToContactData}\n            onClose={setContactModel}\n            fieldName=\"createByContact\"\n            setFieldValue={setFieldValue}\n          />\n          {/* Lead Model  */}\n          <LeadModel\n            isOpen={leadModelOpen}\n            data={assignToLeadData}\n            onClose={setLeadModel}\n            fieldName=\"createByLead\"\n            setFieldValue={setFieldValue}\n          />\n          {/* User Model for sales person */}\n          <UserModel\n            onClose={() => setSalesPersonsModelOpen(false)}\n            isOpen={salesPersonsModelOpen}\n            fieldName={\"salesAgent\"}\n            setFieldValue={setFieldValue}\n            data={assignToSalesData}\n            isLoding={isLoding}\n            setIsLoding={setIsLoding}\n          />\n          {/* Property Model */}\n          <MultiPropertyModel\n            onClose={() => setPropertyModelOpen(false)}\n            isOpen={propertyModelOpen}\n            data={assignToProperyData}\n            isLoding={isLoding}\n            setIsLoding={setIsLoding}\n            fieldName=\"property\"\n            setFieldValue={setFieldValue}\n            selectedItems={getPropertyOptions?.filter((item) =>\n              values?.property?.includes(item?._id),\n            )}\n          />\n          <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n            <GridItem colSpan={{ base: 12, md: 6 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Related\n              </FormLabel>\n              <RadioGroup\n                onChange={(e) => {\n                  setFieldValue(\"category\", e);\n                  setFieldValue(\"createByContact\", \"\");\n                  setFieldValue(\"createByLead\", \"\");\n                }}\n                value={values.category}\n              >\n                <Stack direction=\"row\">\n                  <Radio value=\"Contact\">Contact</Radio>\n                  <Radio value=\"Lead\">Lead</Radio>\n                </Stack>\n              </RadioGroup>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              {values.category === \"Contact\" ? (\n                <>\n                  <GridItem colSpan={{ base: 12, md: 6 }}>\n                    <FormLabel\n                      display=\"flex\"\n                      ms=\"4px\"\n                      fontSize=\"sm\"\n                      fontWeight=\"500\"\n                      mb=\"8px\"\n                    >\n                      Recipient (Contact)\n                    </FormLabel>\n                    <Flex justifyContent={\"space-between\"}>\n                      <Select\n                        value={values.createByContact}\n                        name=\"createByContact\"\n                        onChange={handleChange}\n                        mb={\n                          errors.createByContact && touched.createByContact\n                            ? undefined\n                            : \"10px\"\n                        }\n                        fontWeight=\"500\"\n                        placeholder={\"Assign To\"}\n                        borderColor={\n                          errors.createByContact && touched.createByContact\n                            ? \"red.300\"\n                            : null\n                        }\n                      >\n                        {assignToContactData?.map((item) => {\n                          return (\n                            <option value={item?._id} key={item?._id}>\n                              {values.category === \"Contact\"\n                                ? `${item?.fullName}`\n                                : item?.leadName}\n                            </option>\n                          );\n                        })}\n                      </Select>\n                      <IconButton\n                        onClick={() => setContactModel(true)}\n                        ml={2}\n                        fontSize=\"25px\"\n                        icon={<LiaMousePointerSolid />}\n                      />\n                    </Flex>\n                  </GridItem>\n                </>\n              ) : values?.category === \"Lead\" ? (\n                <>\n                  <GridItem colSpan={{ base: 12, md: 6 }}>\n                    <FormLabel\n                      display=\"flex\"\n                      ms=\"4px\"\n                      fontSize=\"sm\"\n                      fontWeight=\"500\"\n                      mb=\"8px\"\n                    >\n                      Recipient (Lead)\n                    </FormLabel>\n                    <Flex justifyContent={\"space-between\"}>\n                      <Select\n                        value={values?.createByLead}\n                        name=\"createByLead\"\n                        onChange={handleChange}\n                        mb={\n                          errors?.createByLead && touched?.createByLead\n                            ? undefined\n                            : \"10px\"\n                        }\n                        fontWeight=\"500\"\n                        placeholder={\"Assign To\"}\n                        borderColor={\n                          errors?.createByLead && touched?.createByLead\n                            ? \"red.300\"\n                            : null\n                        }\n                      >\n                        {assignToLeadData?.map((item) => {\n                          return (\n                            <option value={item?._id} key={item?._id}>\n                              {values.category === \"Contact\"\n                                ? `${item?.firstName} ${item?.lastName}`\n                                : item?.leadName}\n                            </option>\n                          );\n                        })}\n                      </Select>\n                      <IconButton\n                        onClick={() => setLeadModel(true)}\n                        ml={2}\n                        fontSize=\"25px\"\n                        icon={<LiaMousePointerSolid />}\n                      />\n                    </Flex>\n                  </GridItem>\n                </>\n              ) : (\n                \"\"\n              )}\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Recipient<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                disabled\n                value={values.recipient}\n                name=\"recipient\"\n                placeholder=\"Recipient\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.recipient && touched?.recipient ? \"red.300\" : null\n                }\n              />\n              <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                {\" \"}\n                {errors?.recipient && touched?.recipient && errors?.recipient}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <Flex alignItems={\"end\"} justifyContent={\"space-between\"}>\n                <Text w={\"100%\"}>\n                  <CUIAutoComplete\n                    label={`Property`}\n                    items={getPropertyOptions}\n                    selectedItems={getPropertyOptions?.filter((item) =>\n                      values?.property?.includes(item._id),\n                    )}\n                    onSelectedItemsChange={(changes) => {\n                      const selectProperty = extractLabels(\n                        changes.selectedItems,\n                      );\n                      setFieldValue(\"property\", selectProperty);\n                    }}\n                    value={assignToProperyData?.name || values.property}\n                    name=\"property\"\n                    onChange={handleChange}\n                    mb={\n                      errors?.property && touched?.property ? undefined : \"10px\"\n                    }\n                    fontWeight=\"500\"\n                    placeholder={\"Assign To Property\"}\n                    borderColor={\n                      errors?.property && touched?.property ? \"red.300\" : null\n                    }\n                  />\n                </Text>\n                <IconButton\n                  mb={6}\n                  onClick={() => setPropertyModelOpen(true)}\n                  fontSize=\"25px\"\n                  icon={<LiaMousePointerSolid />}\n                />\n              </Flex>\n              <Text color={\"red\"}>\n                {\" \"}\n                {errors?.attendes && touched?.attendes && errors?.attendes}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Start Date<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                type=\"datetime-local\"\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                min={dayjs(todayTime).format(\"YYYY-MM-DD HH:mm\")}\n                value={values.startDate}\n                name=\"startDate\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.startDate && touched?.startDate ? \"red.300\" : null\n                }\n              />\n              <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                {\" \"}\n                {errors?.startDate && touched?.startDate && errors?.startDate}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Assign To Sales Agent <Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Flex justifyContent={\"space-between\"}>\n                <Select\n                  value={values?.salesAgent}\n                  name=\"salesAgent\"\n                  onChange={handleChange}\n                  mb={\n                    errors?.salesAgent && touched?.salesAgent\n                      ? undefined\n                      : \"10px\"\n                  }\n                  fontWeight=\"500\"\n                  placeholder={\"Assign To Sales Agent\"}\n                  borderColor={\n                    errors?.salesAgent && touched?.salesAgent ? \"red.300\" : null\n                  }\n                >\n                  {assignToSalesData?.map((item) => {\n                    return (\n                      <option\n                        value={item?._id}\n                        key={item?._id}\n                      >{`${item?.firstName} ${item?.lastName}`}</option>\n                    );\n                  })}\n                </Select>\n                <IconButton\n                  onClick={() => setSalesPersonsModelOpen(true)}\n                  ml={2}\n                  fontSize=\"25px\"\n                  icon={<LiaMousePointerSolid />}\n                />\n              </Flex>\n              <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                {\" \"}\n                {errors?.salesAgent &&\n                  touched?.salesAgent &&\n                  errors?.salesAgent}\n              </Text>\n            </GridItem>\n\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Subject<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values?.subject}\n                name=\"subject\"\n                placeholder=\"subject\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.subject && touched?.subject ? \"red.300\" : null\n                }\n              />\n              <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                {\" \"}\n                {errors?.subject && touched?.subject && errors?.subject}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Message\n              </FormLabel>\n              <RadioGroup\n                onChange={(e) => {\n                  setFieldValue(\"type\", e);\n                }}\n                value={values?.type}\n              >\n                <Stack direction=\"row\">\n                  <Radio value=\"message\">Message</Radio>\n                  <Radio value=\"template\">Template</Radio>\n                </Stack>\n              </RadioGroup>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              {values?.type === \"message\" ? (\n                <>\n                  <Textarea\n                    resize={\"none\"}\n                    fontSize=\"sm\"\n                    placeholder=\"Enter Message\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.message}\n                    name=\"message\"\n                    fontWeight=\"500\"\n                    borderColor={\n                      errors?.message && touched?.message ? \"red.300\" : null\n                    }\n                  />\n                  <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                    {\" \"}\n                    {errors?.message && touched?.message && errors?.message}\n                  </Text>\n                </>\n              ) : (\n                <Select\n                  name=\"html\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values?.html}\n                  fontWeight=\"500\"\n                  placeholder={\"Select Template\"}\n                >\n                  {data?.map((item) => {\n                    return (\n                      <option value={item?.html} key={item._id}>\n                        {item?.templateName}\n                      </option>\n                    );\n                  })}\n                </Select>\n              )}\n            </GridItem>\n          </Grid>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            variant=\"brand\"\n            size=\"sm\"\n            disabled={isLoding ? true : false}\n            onClick={handleSubmit}\n          >\n            {isLoding ? <Spinner /> : \"Save\"}\n          </Button>\n          <Button\n            sx={{\n              marginLeft: 2,\n              textTransform: \"capitalize\",\n            }}\n            variant=\"outline\"\n            colorScheme=\"red\"\n            onClick={() => {\n              formik.resetForm();\n              onClose();\n            }}\n            size=\"sm\"\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default EmailModel;\n","import {\n  Button,\n  Flex,\n  FormLabel,\n  Grid,\n  GridItem,\n  IconButton,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Radio,\n  RadioGroup,\n  Select,\n  Stack,\n  Text,\n  Textarea,\n} from \"@chakra-ui/react\";\nimport ContactModel from \"components/commonTableModel/ContactModel\";\nimport LeadModel from \"components/commonTableModel/LeadModel\";\nimport UserModel from \"components/commonTableModel/UserModel\";\nimport PropertyModel from \"components/commonTableModel/PropertyModel\";\nimport Spinner from \"components/spinner/Spinner\";\nimport dayjs from \"dayjs\";\nimport { useFormik } from \"formik\";\nimport { useEffect, useState } from \"react\";\nimport { LiaMousePointerSolid } from \"react-icons/lia\";\nimport { phoneCallSchema } from \"schema\";\nimport { getApi, postApi } from \"services/api\";\nimport MultiPropertyModel from \"components/commonTableModel/MultiPropertyModel\";\nimport { CUIAutoComplete } from \"chakra-ui-autocomplete\";\nimport { useParams } from \"react-router-dom\";\nimport * as yup from \"yup\";\n\nconst PhoneModel = (props) => {\n  const { onClose, isOpen, setAction, fetchData } = props;\n  const [isLoding, setIsLoding] = useState(false);\n  const [assignToLeadData, setAssignToLeadData] = useState([]);\n  const [assignToContactData, setAssignToContactData] = useState([]);\n  const [contactModelOpen, setContactModel] = useState(false);\n  const [leadModelOpen, setLeadModel] = useState(false);\n  const [propertyModelOpen, setPropertyModelOpen] = useState(false);\n  const [assignToProperyData, setAssignToPropertyData] = useState([]);\n  const [assignToSalesData, setAssignToSalesData] = useState([]);\n  const [salesPersonsModelOpen, setSalesPersonsModelOpen] = useState(false);\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const todayTime = new Date().toISOString().split(\".\")[0];\n  const { id } = useParams();\n\n  const initialValues = {\n    sender: user?._id,\n    recipient: \"\",\n    callDuration: \"\",\n    callNotes: \"\",\n    createByContact: \"\",\n    createByLead: \"\",\n    property: [id],\n    startDate: \"\",\n    category: \"contact\",\n    // assignTo: '',\n    // assignToLead: '',\n    createBy: user?._id,\n    salesAgent: \"\", // sales person user id\n  };\n\n  const validationSchema = yup.object({\n    sender: yup.string().required(\"Sender Is required\"),\n    recipient: yup.string().required(\"Recipient Is required\"),\n    callDuration: yup.string().required(\"Call Duration is required\"),\n    property: yup.array().required(\"property is required\"),\n    callNotes: yup.string(),\n    createBy: yup.string(),\n    createByLead: yup.string(),\n    category: yup.string(),\n    startDate: yup.date().required(\"Start Date Is required\"),\n    salesAgent: yup.string().required(\"Assign To Sales Agent Is required\"),\n  });\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: (values, { resetForm }) => {\n      AddData();\n      resetForm();\n    },\n  });\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n  } = formik;\n\n  const AddData = async () => {\n    try {\n      setIsLoding(true);\n      let response = await postApi(\"api/phoneCall/add\", values);\n      if (response?.status === 200) {\n        props.onClose();\n        fetchData(1);\n        setAction((pre) => !pre);\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  const getAllApi = async () => {\n    values.start = props?.date;\n    try {\n      let result;\n      if (values?.category === \"Contact\" && assignToContactData?.length <= 0) {\n        result = await getApi(\n          user?.role === \"superAdmin\"\n            ? \"api/contact/\"\n            : `api/contact/?createBy=${user?._id}`,\n        );\n        setAssignToContactData(result?.data);\n      } else if (values?.category === \"Lead\" && assignToLeadData?.length <= 0) {\n        result = await getApi(\n          user?.role === \"superAdmin\"\n            ? \"api/lead/\"\n            : `api/lead/?createBy=${user?._id}`,\n        );\n        setAssignToLeadData(result?.data);\n      }\n      const propertyOptionData = await getApi(\n        user?.role === \"superAdmin\"\n          ? \"api/property\"\n          : `api/property/?createBy=${user?._id}`,\n      );\n      setAssignToPropertyData(propertyOptionData?.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  useEffect(() => {\n    getAllApi();\n  }, [props?.date, values?.category]);\n\n  const fetchRecipientData = async () => {\n    if (values?.createByContact) {\n      let findEmail = assignToContactData?.find(\n        (item) => item?._id === values?.createByContact,\n      );\n      if (findEmail) {\n        setFieldValue(\"recipient\", findEmail?.phoneNumber);\n      }\n    } else if (values?.createByLead) {\n      let findEmail = assignToLeadData.find(\n        (item) => item?._id === values?.createByLead,\n      );\n      if (findEmail) {\n        setFieldValue(\"recipient\", findEmail?.leadPhoneNumber);\n      }\n    } else {\n      setFieldValue(\"recipient\", \"\");\n    }\n  };\n\n  const fetchUsersData = async () => {\n    setIsLoding(true);\n    try {\n      let result = await getApi(\"api/user/\");\n\n      let salesPersons =\n        result?.data?.user?.filter((userData) =>\n          userData?.roles?.some((role) => role?.roleName === \"Sales\"),\n        ) || [];\n      setAssignToSalesData(salesPersons);\n    } catch (error) {\n      console.error(\"Failed to fetch users data:\", error);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchRecipientData();\n  }, [values?.createByContact, values?.createByLead]);\n\n  useEffect(() => {\n    fetchUsersData();\n  }, []);\n\n  const setValueProperty = assignToProperyData?.map((item) => ({\n    ...item,\n    value: item?._id,\n    label: item?.name,\n  }));\n\n  const extractLabels = (selectedItems) => {\n    return selectedItems?.map((item) => item?._id);\n  };\n\n  return (\n    <Modal onClose={onClose} isOpen={isOpen} isCentered>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Add Call</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          {/* Contact Model  */}\n          <ContactModel\n            isOpen={contactModelOpen}\n            data={assignToContactData}\n            onClose={setContactModel}\n            fieldName=\"createByContact\"\n            setFieldValue={setFieldValue}\n          />\n          {/* Lead Model  */}\n          <LeadModel\n            isOpen={leadModelOpen}\n            data={assignToLeadData}\n            onClose={setLeadModel}\n            fieldName=\"createByLead\"\n            setFieldValue={setFieldValue}\n          />\n          {/* User Model for sales person */}\n          <UserModel\n            onClose={() => setSalesPersonsModelOpen(false)}\n            isOpen={salesPersonsModelOpen}\n            fieldName={\"salesAgent\"}\n            setFieldValue={setFieldValue}\n            data={assignToSalesData}\n            isLoding={isLoding}\n            setIsLoding={setIsLoding}\n          />\n          {/*Property Model*/}\n          <MultiPropertyModel\n            onClose={() => setPropertyModelOpen(false)}\n            isOpen={propertyModelOpen}\n            data={assignToProperyData}\n            isLoding={isLoding}\n            setIsLoding={setIsLoding}\n            fieldName=\"property\"\n            setFieldValue={setFieldValue}\n            selectedItems={setValueProperty?.filter((item) =>\n              values?.property?.includes(item?._id),\n            )}\n          />\n          <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n            <GridItem colSpan={{ base: 12, md: 6 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Related\n              </FormLabel>\n              <RadioGroup\n                onChange={(e) => {\n                  setFieldValue(\"category\", e);\n                  setFieldValue(\"createByContact\", \"\");\n                  setFieldValue(\"createByLead\", \"\");\n                }}\n                value={values?.category}\n              >\n                <Stack direction=\"row\">\n                  <Radio value=\"Contact\">Contact</Radio>\n                  <Radio value=\"Lead\">Lead</Radio>\n                </Stack>\n              </RadioGroup>\n              <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                {\" \"}\n                {errors?.category && touched?.category && errors?.category}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              {values?.category === \"Contact\" ? (\n                <>\n                  <GridItem colSpan={{ base: 12, md: 6 }}>\n                    <FormLabel\n                      display=\"flex\"\n                      ms=\"4px\"\n                      fontSize=\"sm\"\n                      fontWeight=\"500\"\n                      mb=\"8px\"\n                    >\n                      Recipient (Contact)\n                    </FormLabel>\n                    <Flex justifyContent={\"space-between\"}>\n                      <Select\n                        value={values?.createByContact}\n                        name=\"createByContact\"\n                        onChange={handleChange}\n                        mb={\n                          errors?.createByContact && touched?.createByContact\n                            ? undefined\n                            : \"10px\"\n                        }\n                        fontWeight=\"500\"\n                        placeholder={\"Assign To\"}\n                        borderColor={\n                          errors?.createByContact && touched?.createByContact\n                            ? \"red.300\"\n                            : null\n                        }\n                      >\n                        {assignToContactData?.map((item) => {\n                          return (\n                            <option value={item?._id} key={item?._id}>\n                              {values?.category === \"Contact\"\n                                ? `${item?.fullName}`\n                                : item?.leadName}\n                            </option>\n                          );\n                        })}\n                      </Select>\n                      <IconButton\n                        onClick={() => setContactModel(true)}\n                        ml={2}\n                        fontSize=\"25px\"\n                        icon={<LiaMousePointerSolid />}\n                      />\n                    </Flex>\n                    <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                      {\" \"}\n                      {errors?.createByContact &&\n                        touched?.createByContact &&\n                        errors?.createByContact}\n                    </Text>\n                  </GridItem>\n                </>\n              ) : values?.category === \"Lead\" ? (\n                <>\n                  <GridItem colSpan={{ base: 12, md: 6 }}>\n                    <FormLabel\n                      display=\"flex\"\n                      ms=\"4px\"\n                      fontSize=\"sm\"\n                      fontWeight=\"500\"\n                      mb=\"8px\"\n                    >\n                      Recipient (Lead)\n                    </FormLabel>\n                    <Flex justifyContent={\"space-between\"}>\n                      <Select\n                        value={values?.createByLead}\n                        name=\"createByLead\"\n                        onChange={handleChange}\n                        mb={\n                          errors?.createByLead && touched?.createByLead\n                            ? undefined\n                            : \"10px\"\n                        }\n                        fontWeight=\"500\"\n                        placeholder={\"Assign To\"}\n                        borderColor={\n                          errors?.createByLead && touched?.createByLead\n                            ? \"red.300\"\n                            : null\n                        }\n                      >\n                        {assignToLeadData?.map((item) => {\n                          return (\n                            <option value={item?._id} key={item?._id}>\n                              {values?.category === \"Contact\"\n                                ? `${item?.firstName} ${item?.lastName}`\n                                : item?.leadName}\n                            </option>\n                          );\n                        })}\n                      </Select>\n                      <IconButton\n                        onClick={() => setLeadModel(true)}\n                        ml={2}\n                        fontSize=\"25px\"\n                        icon={<LiaMousePointerSolid />}\n                      />\n                    </Flex>\n                    <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                      {\" \"}\n                      {errors?.createByLead &&\n                        touched?.createByLead &&\n                        errors?.createByLead}\n                    </Text>\n                  </GridItem>\n                </>\n              ) : (\n                \"\"\n              )}\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Recipient<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                disabled\n                value={values?.recipient ? values?.recipient : \"\"}\n                name=\"recipient\"\n                placeholder=\"Recipient\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.recipient && touched?.recipient ? \"red.300\" : null\n                }\n              />\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <Flex alignItems={\"end\"} justifyContent={\"space-between\"}>\n                <Text w={\"100%\"}>\n                  <CUIAutoComplete\n                    label={`Property`}\n                    items={setValueProperty}\n                    selectedItems={setValueProperty?.filter((item) =>\n                      values?.property?.includes(item?._id),\n                    )}\n                    onSelectedItemsChange={(changes) => {\n                      const selectProperty = extractLabels(\n                        changes?.selectedItems,\n                      );\n                      setFieldValue(\"property\", selectProperty);\n                    }}\n                    name=\"property\"\n                    onChange={handleChange}\n                    mb={\n                      errors?.property && touched?.property ? undefined : \"10px\"\n                    }\n                    fontWeight=\"500\"\n                    placeholder={\"Assign To Property\"}\n                    borderColor={\n                      errors?.property && touched?.property ? \"red.300\" : null\n                    }\n                  />\n                </Text>\n                <IconButton\n                  mb={6}\n                  onClick={() => setPropertyModelOpen(true)}\n                  fontSize=\"25px\"\n                  icon={<LiaMousePointerSolid />}\n                />\n              </Flex>\n              <Text color={\"red\"}>\n                {\" \"}\n                {errors?.attendes && touched?.attendes && errors?.attendes}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12, md: 6 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Start Date<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                type=\"datetime-local\"\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                min={dayjs(todayTime).format(\"YYYY-MM-DD HH:mm\")}\n                value={values?.startDate}\n                name=\"startDate\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.startDate && touched?.startDate ? \"red.300\" : null\n                }\n              />\n              <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                {\" \"}\n                {errors?.startDate && touched?.startDate && errors?.startDate}\n              </Text>\n            </GridItem>\n\n            <GridItem colSpan={{ base: 12, md: 6 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Call Duration<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values?.callDuration}\n                name=\"callDuration\"\n                placeholder=\"call Duration\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.callDuration && touched?.callDuration\n                    ? \"red.300\"\n                    : null\n                }\n              />\n              <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                {\" \"}\n                {errors?.callDuration &&\n                  touched?.callDuration &&\n                  errors?.callDuration}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Assign To Sales Agent <Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Flex justifyContent={\"space-between\"}>\n                <Select\n                  value={values?.salesAgent}\n                  name=\"salesAgent\"\n                  onChange={handleChange}\n                  mb={\n                    errors?.salesAgent && touched?.salesAgent\n                      ? undefined\n                      : \"10px\"\n                  }\n                  fontWeight=\"500\"\n                  placeholder={\"Assign To Sales Agent\"}\n                  borderColor={\n                    errors?.salesAgent && touched?.salesAgent ? \"red.300\" : null\n                  }\n                >\n                  {assignToSalesData?.map((item) => {\n                    return (\n                      <option\n                        value={item?._id}\n                        key={item?._id}\n                      >{`${item?.firstName} ${item?.lastName}`}</option>\n                    );\n                  })}\n                </Select>\n                <IconButton\n                  onClick={() => setSalesPersonsModelOpen(true)}\n                  ml={2}\n                  fontSize=\"25px\"\n                  icon={<LiaMousePointerSolid />}\n                />\n              </Flex>\n              <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                {\" \"}\n                {errors?.salesAgent &&\n                  touched?.salesAgent &&\n                  errors?.salesAgent}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Call Notes\n              </FormLabel>\n              <Textarea\n                resize={\"none\"}\n                fontSize=\"sm\"\n                placeholder=\"Enter Call Notes\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values?.callNotes}\n                name=\"callNotes\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.callNotes && touched?.callNotes ? \"red.300\" : null\n                }\n              />\n              <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                {\" \"}\n                {errors?.callNotes && touched?.callNotes && errors?.callNotes}\n              </Text>\n            </GridItem>\n          </Grid>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            variant=\"brand\"\n            size=\"sm\"\n            disabled={isLoding ? true : false}\n            onClick={handleSubmit}\n          >\n            {isLoding ? <Spinner /> : \"Save\"}\n          </Button>\n          <Button\n            size=\"sm\"\n            sx={{\n              marginLeft: 2,\n              textTransform: \"capitalize\",\n            }}\n            variant=\"outline\"\n            colorScheme=\"red\"\n            onClick={() => {\n              formik.resetForm();\n              onClose();\n            }}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default PhoneModel;\n","import {\n  AddIcon,\n  ChevronDownIcon,\n  DeleteIcon,\n  EditIcon,\n} from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  GridItem,\n  Heading,\n  Image,\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport Card from \"components/card/Card\";\nimport { HSeparator } from \"components/separator/Separator\";\nimport Spinner from \"components/spinner/Spinner\";\nimport { useEffect, useState } from \"react\";\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { getApi } from \"services/api\";\nimport Add from \"./Add\";\nimport Edit from \"./Edit\";\nimport PropertyPhoto from \"./components/propertyPhoto\";\nimport { HasAccess } from \"../../../redux/accessUtils\";\nimport DataNotFound from \"components/notFoundData\";\nimport xlsx from \"../../../assets/img/fileImage/xlsx.png\";\nimport jpg from \"../../../assets/img/fileImage/jpg.png\";\nimport png from \"../../../assets/img/fileImage/png.png\";\nimport pdf from \"../../../assets/img/fileImage/pdf.png\";\nimport xls from \"../../../assets/img/fileImage/xls.png\";\nimport csv from \"../../../assets/img/fileImage/csv.png\";\nimport file from \"../../../assets/img/fileImage/file.png\";\nimport CustomView from \"utils/customView\";\nimport CommonCheckTable from \"components/reactTable/checktable\";\nimport CommonDeleteModel from \"components/commonDeleteModel\";\nimport { deleteApi } from \"services/api\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchPropertyCustomFiled } from \"../../../redux/slices/propertyCustomFiledSlice\";\nimport { fetchContactCustomFiled } from \"../../../redux/slices/contactCustomFiledSlice\";\nimport { fetchPropertyData } from \"../../../redux/slices/propertySlice\";\nimport { FaFilePdf } from \"react-icons/fa\";\nimport html2pdf from \"html2pdf.js\";\nimport moment from \"moment\";\nimport AddEmailHistory from \"../emailHistory/components/AddEmail\";\nimport AddPhoneCall from \"../phoneCall/components/AddPhoneCall\";\nimport EmailModel from \"components/commonTableModel/EmailModel\";\nimport PhoneModel from \"components/commonTableModel/PhoneModel\";\n\nconst View = () => {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const param = useParams();\n  const buttonbg = useColorModeValue(\"gray.200\", \"white\");\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\n\n  const [data, setData] = useState();\n  const [filteredContacts, setFilteredContacts] = useState([]);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [edit, setEdit] = useState(false);\n  const [deleteModel, setDelete] = useState(false);\n  const [action, setAction] = useState(false);\n  const [propertyPhoto, setPropertyPhoto] = useState(false);\n  const [showProperty, setShowProperty] = useState(false);\n  const [virtualToursorVideos, setVirtualToursorVideos] = useState(false);\n  const [floorPlans, setFloorPlans] = useState(false);\n  const [propertyDocuments, setPropertyDocuments] = useState(false);\n  const [selectedValues, setSelectedValues] = useState();\n  const [showEmail, setShowEmail] = useState(false);\n  const [allData, setAllData] = useState([]);\n  const [showCall, setShowCall] = useState(false);\n  const [isLoding, setIsLoding] = useState(false);\n  const [displayPropertyPhoto, setDisplayPropertyPhoto] = useState(false);\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [addEmailHistory, setAddEmailHistory] = useState(false);\n  const [addPhoneCall, setAddPhoneCall] = useState(false);\n  const [phoneCall, setPhoneCall] = useState([]);\n  const [setEmail, setEmailData] = useState([]);\n  const dispatch = useDispatch();\n  const propertyData = useSelector(\n    (state) => state?.propertyCustomFiled?.data?.data,\n  );\n\n  const [contactData, setContactData] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [type, setType] = useState(false);\n  const navigate = useNavigate();\n  const size = \"lg\";\n  const [\n    taskPermission,\n    PropertiesAccess,\n    meetingPermission,\n    taskAccess,\n    meetingAccess,\n  ] = HasAccess([\n    \"Leads\",\n    \"Tasks\",\n    \"Meetings\",\n    \"Properties\",\n    \"Calls\",\n    \"Emails\",\n    \"Tasks\",\n    \"Meetings\",\n  ]);\n\n  const emailColumn = [\n    { Header: \"sender\", accessor: \"senderName\" },\n    {\n      Header: \"recipient\",\n      accessor: \"recipient\",\n      cell: (cell) => (\n        <Link to={`/Email/${cell?.row?.original?._id}`}>\n          <Text\n            me=\"10px\"\n            sx={{\n              \"&:hover\": { color: \"blue.500\", textDecoration: \"underline\" },\n            }}\n            color=\"brand.600\"\n            fontSize=\"sm\"\n            fontWeight=\"700\"\n          >\n            {cell?.value || \" - \"}\n          </Text>\n        </Link>\n      ),\n    },\n    {\n      Header: \"time stamp\",\n      accessor: \"timestamp\",\n      cell: (cell) => (\n        <div className=\"selectOpt\">\n          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n            {moment(cell?.value).fromNow()}\n          </Text>\n        </div>\n      ),\n    },\n    {\n      Header: \"Created\",\n      accessor: \"createBy\",\n      cell: (cell) => (\n        <div className=\"selectOpt\">\n          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n            {moment(cell?.row?.values?.timestamp)?.format(\"h:mma (DD/MM)\")}\n          </Text>\n        </div>\n      ),\n    },\n  ];\n  const contactColumns = [\n    { Header: \"Title\", accessor: \"title\" },\n    { Header: \"First Name\", accessor: \"firstName\" },\n    { Header: \"Last Name\", accessor: \"lastName\" },\n    { Header: \"Phone Number\", accessor: \"phoneNumber\" },\n    { Header: \"Email Address\", accessor: \"email\" },\n    { Header: \"Contact Method\", accessor: \"preferredContactMethod\" },\n  ];\n\n  const fetchCustomDataFields = async () => {\n    setIsLoding(true);\n    const result = await dispatch(fetchContactCustomFiled());\n    setContactData(result?.payload?.data);\n\n    const tempTableColumns = [\n      { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\n      ...result?.payload?.data?.[0]?.fields\n        ?.filter((field) => field?.isTableField === true)\n        ?.map((field) => ({ Header: field?.label, accessor: field?.name })),\n    ];\n    setColumns(tempTableColumns);\n    setIsLoding(false);\n  };\n\n  const callColumns = [\n    { Header: \"sender\", accessor: \"senderName\" },\n    {\n      Header: \"recipient\",\n      accessor: \"recipient\",\n      cell: (cell) => (\n        <Link to={`/phone-call/${cell?.row?.original?._id}`}>\n          <Text\n            me=\"10px\"\n            sx={{\n              \"&:hover\": { color: \"blue.500\", textDecoration: \"underline\" },\n            }}\n            color=\"brand.600\"\n            fontSize=\"sm\"\n            fontWeight=\"700\"\n          >\n            {cell?.value || \" - \"}\n          </Text>\n        </Link>\n      ),\n    },\n    {\n      Header: \"time stamp\",\n      accessor: \"timestamp\",\n      cell: (cell) => (\n        <div className=\"selectOpt\">\n          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n            {moment(cell?.value).fromNow()}\n          </Text>\n        </div>\n      ),\n    },\n    {\n      Header: \"Created\",\n      accessor: \"createBy\",\n      cell: (cell) => (\n        <div className=\"selectOpt\">\n          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n            {moment(cell?.row?.values?.timestamp)?.format(\"h:mma (DD/MM)\")}\n          </Text>\n        </div>\n      ),\n    },\n  ];\n\n  const [selectedColumns, setSelectedColumns] = useState([...columns]);\n\n  const handleTabChange = (index) => {\n    setSelectedTab(index);\n  };\n\n  const fetchData = async (i) => {\n    setIsLoding(true);\n    let response = await getApi(\"api/property/view/\", param?.id);\n    setData(response?.data?.property);\n    setPhoneCall(response?.data?.phoneCall);\n    setEmailData(response?.data?.Emails);\n    setFilteredContacts(response?.data?.filteredContacts);\n    setIsLoding(false);\n    setSelectedTab(i);\n  };\n  const generatePDF = () => {\n    const element = document.getElementById(\"reports\");\n    if (element) {\n      element.style.display = \"block\";\n      element.style.width = \"100%\"; // Adjust width for mobile\n      element.style.height = \"auto\";\n      html2pdf()\n        .from(element)\n        .set({\n          margin: [0, 0, 0, 0],\n          filename: `Property_Details_${moment().format(\"DD-MM-YYYY\")}.pdf`,\n          image: { type: \"jpeg\", quality: 0.98 },\n          html2canvas: { scale: 2, useCORS: true, allowTaint: true },\n          jsPDF: { unit: \"in\", format: \"letter\", orientation: \"portrait\" },\n        })\n        .save()\n        .then(() => {\n          element.style.display = \"\";\n        });\n    } else {\n      console.error(\"Element with ID 'reports' not found.\");\n    }\n  };\n  const handleDeleteProperties = async (id) => {\n    try {\n      setIsLoding(true);\n      let response = await deleteApi(\"api/property/delete/\", id);\n      if (response?.status === 200) {\n        setDelete(false);\n        setAction((pre) => !pre);\n        navigate(\"/properties\");\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(fetchPropertyCustomFiled());\n    fetchData();\n    fetchCustomDataFields();\n  }, []);\n\n  const [permission, emailAccess, callAccess] = HasAccess([\n    \"Properties\",\n    \"Contacts\",\n    \"Emails\",\n    \"Calls\",\n  ]);\n\n  return (\n    <>\n      <Add\n        isOpen={isOpen}\n        size={size}\n        onClose={onClose}\n        propertyData={propertyData?.[0]}\n      />\n      <Edit\n        isOpen={edit}\n        size={size}\n        onClose={setEdit}\n        setAction={setAction}\n        propertyData={propertyData?.[0]}\n        data={data}\n      />\n      <CommonDeleteModel\n        isOpen={deleteModel}\n        onClose={() => setDelete(false)}\n        type=\"Property\"\n        handleDeleteData={handleDeleteProperties}\n        ids={param?.id}\n      />\n      <EmailModel\n        lead={true}\n        leadEmail={allData?.lead?.leadEmail}\n        fetchData={fetchData}\n        isOpen={addEmailHistory}\n        onClose={setAddEmailHistory}\n        id={param?.id}\n      />\n      <PhoneModel\n        viewData={allData}\n        fetchData={fetchData}\n        isOpen={addPhoneCall}\n        onClose={setAddPhoneCall}\n        setAction={setAction}\n        data={data?.contact}\n        id={param?.id}\n        lead={true}\n        LData={data}\n      />\n      {isLoding ? (\n        <Flex justifyContent={\"center\"} alignItems={\"center\"} width=\"100%\">\n          <Spinner />\n        </Flex>\n      ) : (\n        <>\n          <Heading size=\"lg\" mt={0} m={3}>\n            {data?.name || \"\"}\n          </Heading>\n          <Tabs onChange={handleTabChange} index={selectedTab}>\n            <Grid templateColumns={\"repeat(12, 1fr)\"} mb={3} gap={1}>\n              <GridItem colSpan={{ base: 12, md: 6 }}>\n                <TabList\n                  sx={{\n                    border: \"none\",\n                    \"& button:focus\": { boxShadow: \"none\" },\n                    \"& button\": {\n                      margin: { sm: \"0 3px\", md: \"0 5px\" },\n                      padding: { sm: \"5px\", md: \"8px\" },\n                      border: \"2px solid #8080803d\",\n                      borderTopLeftRadius: \"10px\",\n                      borderTopRightRadius: \"10px\",\n                      borderBottom: 0,\n                      fontSize: { sm: \"12px\", md: \"16px\" },\n                    },\n                    '& button[aria-selected=\"true\"]': {\n                      border: \"2px solid brand.200\",\n                      borderBottom: 0,\n                      zIndex: \"0\",\n                    },\n                  }}\n                >\n                  <Tab>Information</Tab>\n                  {(emailAccess?.view || callAccess?.view) && (\n                    <Tab>Communication</Tab>\n                  )}\n                  <Tab>Gallery</Tab>\n                </TabList>\n              </GridItem>\n              <GridItem\n                colSpan={{ base: 12, md: 6 }}\n                mt={{ sm: \"3px\", md: \"5px\" }}\n              >\n                <Flex justifyContent={\"right\"}>\n                  <Menu>\n                    {(user?.role === \"superAdmin\" ||\n                      permission?.create ||\n                      permission?.update ||\n                      permission?.delete) && (\n                      <MenuButton\n                        variant=\"outline\"\n                        size=\"sm\"\n                        colorScheme=\"blackAlpha\"\n                        va\n                        mr={2.5}\n                        as={Button}\n                        rightIcon={<ChevronDownIcon />}\n                      >\n                        Actions\n                      </MenuButton>\n                    )}\n                    <MenuDivider />\n                    <MenuList minWidth={2}>\n                      {(user?.role === \"superAdmin\" || permission?.create) && (\n                        <MenuItem\n                          alignItems={\"start\"}\n                          color={\"blue\"}\n                          onClick={() => onOpen()}\n                          icon={<AddIcon />}\n                        >\n                          Add\n                        </MenuItem>\n                      )}\n                      {(user?.role === \"superAdmin\" || permission?.update) && (\n                        <MenuItem\n                          alignItems={\"start\"}\n                          onClick={() => setEdit(true)}\n                          icon={<EditIcon />}\n                        >\n                          Edit\n                        </MenuItem>\n                      )}\n                      <MenuItem\n                        onClick={generatePDF}\n                        alignItems={\"start\"}\n                        icon={<FaFilePdf />}\n                        display={\"flex\"}\n                        style={{ alignItems: \"center\" }}\n                      >\n                        Print as PDF\n                      </MenuItem>\n                      {(user?.role === \"superAdmin\" || permission?.delete) && (\n                        <>\n                          <MenuDivider />\n                          <MenuItem\n                            alignItems={\"start\"}\n                            color={\"red\"}\n                            onClick={() => setDelete(true)}\n                            icon={<DeleteIcon />}\n                          >\n                            Delete\n                          </MenuItem>\n                        </>\n                      )}\n                    </MenuList>\n                  </Menu>\n                  <Link to=\"/properties\">\n                    <Button\n                      size=\"sm\"\n                      leftIcon={<IoIosArrowBack />}\n                      variant=\"brand\"\n                    >\n                      Back\n                    </Button>\n                  </Link>\n                </Flex>\n              </GridItem>\n            </Grid>\n\n            <TabPanels>\n              <TabPanel pt={4} p={0}>\n                <CustomView\n                  data={propertyData?.[0]}\n                  fieldData={data}\n                  fetchData={fetchData}\n                  editUrl={`api/property/edit/${param.id}`}\n                  moduleId={propertyData?.[0]?._id}\n                  id=\"reports\"\n                />\n                {filteredContacts?.length > 0 && (\n                  <GridItem colSpan={{ base: 12 }} mt={4}>\n                    <Grid templateColumns={{ base: \"1fr\" }}>\n                      <GridItem colSpan={2}>\n                        <Grid templateColumns={\"repeat(2, 1fr)\"}>\n                          <GridItem colSpan={{ base: 2 }}>\n                            <CommonCheckTable\n                              AdvanceSearch={false}\n                              ManageGrid={false}\n                              access={false}\n                              columnData={columns ?? []}\n                              // dataColumn={columns ?? []}\n                              title={\"Interested Contact\"}\n                              allData={filteredContacts ?? []}\n                              tableData={filteredContacts}\n                              // selectedColumns={selectedColumns}\n                              // setSelectedColumns={setSelectedColumns}\n                              size={\"md\"}\n                              tableCustomFields={\n                                contactData?.[0]?.fields?.filter(\n                                  (field) => field?.isTableField === true,\n                                ) || []\n                              }\n                              customSearch={true}\n                              checkBox={false}\n                            />\n                          </GridItem>\n                        </Grid>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                )}\n              </TabPanel>\n              {/* communication */}\n              <TabPanel pt={4} p={0}>\n                <GridItem colSpan={{ base: 4 }}>\n                  <Grid\n                    overflow={\"hidden\"}\n                    templateColumns={{ base: \"1fr\" }}\n                    gap={4}\n                  >\n                    <Grid templateColumns={\"repeat(12, 1fr)\"} gap={4}>\n                      {emailAccess?.view && (\n                        <GridItem colSpan={{ base: 12, md: 6 }}>\n                          <Card>\n                            <CommonCheckTable\n                              title={\"Email\"}\n                              isLoding={isLoding}\n                              columnData={emailColumn ?? []}\n                              allData={setEmail}\n                              tableData={setEmail}\n                              AdvanceSearch={false}\n                              dataLength={allData?.Email?.length}\n                              tableCustomFields={[]}\n                              checkBox={false}\n                              deleteMany={true}\n                              ManageGrid={false}\n                              // onOpen={() => setAddEmailHistory(true)}\n                              onOpen={() => setAddEmailHistory(true)}\n                              access={emailAccess}\n                            />\n                          </Card>\n                        </GridItem>\n                      )}\n                      {callAccess?.view && (\n                        <GridItem colSpan={{ base: 12, md: 6 }}>\n                          <Card>\n                            <CommonCheckTable\n                              title={\"Call\"}\n                              isLoding={isLoding}\n                              columnData={callColumns ?? []}\n                              allData={phoneCall}\n                              tableData={phoneCall}\n                              AdvanceSearch={false}\n                              dataLength={allData?.phoneCall?.length}\n                              tableCustomFields={[]}\n                              checkBox={false}\n                              deleteMany={true}\n                              ManageGrid={false}\n                              onOpen={() => setAddPhoneCall(true)}\n                              access={callAccess}\n                            />\n                          </Card>\n                        </GridItem>\n                      )}\n                    </Grid>\n                  </Grid>\n                </GridItem>\n              </TabPanel>\n              <TabPanel pt={4} p={0}>\n                <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n                  <GridItem colSpan={{ base: 12, md: 6 }}>\n                    <Card>\n                      <Grid templateColumns=\"repeat(12, 1fr)\" gap={4}>\n                        <GridItem colSpan={12}>\n                          <Box>\n                            <Flex\n                              flexWrap={\"wrap\"}\n                              mb={3}\n                              justifyContent={\"space-between\"}\n                              alingItem={\"center\"}\n                            >\n                              <Heading size=\"md\">Property Photos</Heading>\n                              <Button\n                                size=\"sm\"\n                                leftIcon={<AddIcon />}\n                                onClick={() => setPropertyPhoto(true)}\n                                variant=\"brand\"\n                              >\n                                Add New\n                              </Button>\n                              <PropertyPhoto\n                                text=\"Property Photos\"\n                                fetchData={fetchData}\n                                isOpen={propertyPhoto}\n                                onClose={setPropertyPhoto}\n                                id={param?.id}\n                              />\n                            </Flex>\n                            <HSeparator />\n                          </Box>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }}>\n                          <Flex\n                            overflowY={\"scroll\"}\n                            height={\"150px\"}\n                            alingItem={\"center\"}\n                          >\n                            {data?.propertyPhotos?.length > 0 ? (\n                              data &&\n                              data?.propertyPhotos?.length > 0 &&\n                              data?.propertyPhotos?.map((item) => (\n                                <Image\n                                  width={\"150px\"}\n                                  m={1}\n                                  src={item?.img}\n                                  alt=\"Your Image\"\n                                />\n                              ))\n                            ) : (\n                              <Text\n                                textAlign={\"center\"}\n                                width=\"100%\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                <DataNotFound />\n                              </Text>\n                            )}\n                          </Flex>\n                          {data?.propertyPhotos?.length > 0 ? (\n                            <Flex justifyContent={\"end\"} mt={1}>\n                              <Button\n                                size=\"sm\"\n                                colorScheme=\"brand\"\n                                variant=\"outline\"\n                                onClick={() => {\n                                  setDisplayPropertyPhoto(true);\n                                  setType(\"photo\");\n                                }}\n                              >\n                                Show more\n                              </Button>\n                            </Flex>\n                          ) : (\n                            \"\"\n                          )}\n                        </GridItem>\n                      </Grid>\n                    </Card>\n                  </GridItem>\n                  <GridItem colSpan={{ base: 12, md: 6 }}>\n                    <Card>\n                      <Grid templateColumns=\"repeat(12, 1fr)\" gap={4}>\n                        <GridItem colSpan={12}>\n                          <Box>\n                            <Flex\n                              flexWrap={\"wrap\"}\n                              mb={3}\n                              justifyContent={\"space-between\"}\n                              alingItem={\"center\"}\n                            >\n                              <Heading size=\"md\">\n                                Virtual Tours or Videos\n                              </Heading>\n                              <Button\n                                size=\"sm\"\n                                leftIcon={<AddIcon />}\n                                onClick={() => setVirtualToursorVideos(true)}\n                                variant=\"brand\"\n                              >\n                                Add New\n                              </Button>\n                              <PropertyPhoto\n                                text=\"Virtual Tours or Videos\"\n                                fetchData={fetchData}\n                                isOpen={virtualToursorVideos}\n                                onClose={setVirtualToursorVideos}\n                                id={param?.id}\n                              />\n                            </Flex>\n                            <HSeparator />\n                          </Box>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }}>\n                          <Flex\n                            overflowY={\"scroll\"}\n                            height={\"150px\"}\n                            alingItem={\"center\"}\n                          >\n                            {data?.virtualToursOrVideos?.length > 0 ? (\n                              data &&\n                              data?.virtualToursOrVideos?.length > 0 &&\n                              data?.virtualToursOrVideos?.map((item) => (\n                                <video\n                                  width=\"200\"\n                                  controls\n                                  autoplay\n                                  loop\n                                  style={{ margin: \"0 5px\" }}\n                                >\n                                  <source src={item?.img} type=\"video/mp4\" />\n                                  <source src={item?.img} type=\"video/ogg\" />\n                                </video>\n                              ))\n                            ) : (\n                              <Text\n                                textAlign={\"center\"}\n                                width=\"100%\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                <DataNotFound />\n                              </Text>\n                            )}\n                          </Flex>\n                        </GridItem>\n                      </Grid>\n                    </Card>\n                  </GridItem>\n                  <GridItem colSpan={{ base: 12, md: 6 }}>\n                    <Card>\n                      <Grid templateColumns=\"repeat(12, 1fr)\" gap={4}>\n                        <GridItem colSpan={12}>\n                          <Box>\n                            <Flex\n                              flexWrap={\"wrap\"}\n                              mb={3}\n                              justifyContent={\"space-between\"}\n                              alingItem={\"center\"}\n                            >\n                              <Heading size=\"md\">Floor Plans</Heading>\n                              <Button\n                                size=\"sm\"\n                                leftIcon={<AddIcon />}\n                                onClick={() => setFloorPlans(true)}\n                                variant=\"brand\"\n                              >\n                                Add New\n                              </Button>\n                              <PropertyPhoto\n                                text=\"Floor Plans\"\n                                fetchData={fetchData}\n                                isOpen={floorPlans}\n                                onClose={setFloorPlans}\n                                id={param.id}\n                              />\n                            </Flex>\n                            <HSeparator />\n                          </Box>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }}>\n                          <Flex\n                            overflowY={\"scroll\"}\n                            height={\"150px\"}\n                            alingItem={\"center\"}\n                          >\n                            {data?.floorPlans?.length > 0 ? (\n                              data &&\n                              data?.floorPlans?.length > 0 &&\n                              data?.floorPlans?.map((item) => (\n                                <Image\n                                  key={item?.createOn}\n                                  width={\"30%\"}\n                                  m={1}\n                                  src={item?.img}\n                                  alt=\"Your Image\"\n                                />\n                              ))\n                            ) : (\n                              <Text\n                                textAlign={\"center\"}\n                                width=\"100%\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                <DataNotFound />\n                              </Text>\n                            )}\n                          </Flex>\n                          {data?.floorPlans?.length > 0 ? (\n                            <Flex justifyContent={\"end\"} mt={1}>\n                              <Button\n                                size=\"sm\"\n                                colorScheme=\"brand\"\n                                variant=\"outline\"\n                                onClick={() => {\n                                  setDisplayPropertyPhoto(true);\n                                  setType(\"floor\");\n                                }}\n                              >\n                                Show more\n                              </Button>\n                            </Flex>\n                          ) : (\n                            \"\"\n                          )}\n                        </GridItem>\n                      </Grid>\n                    </Card>\n                  </GridItem>\n                  <GridItem colSpan={{ base: 12, md: 6 }}>\n                    <Card>\n                      <Grid templateColumns=\"repeat(12, 1fr)\" gap={4}>\n                        <GridItem colSpan={12}>\n                          <Box>\n                            <Flex\n                              flexWrap={\"wrap\"}\n                              mb={3}\n                              justifyContent={\"space-between\"}\n                              alingItem={\"center\"}\n                            >\n                              <Heading size=\"md\">Property Documents</Heading>\n                              <Button\n                                size=\"sm\"\n                                variant=\"brand\"\n                                leftIcon={<AddIcon />}\n                                onClick={() => setPropertyDocuments(true)}\n                              >\n                                Add New\n                              </Button>\n                              <PropertyPhoto\n                                text=\"Property Documents\"\n                                fetchData={fetchData}\n                                isOpen={propertyDocuments}\n                                onClose={setPropertyDocuments}\n                                id={param?.id}\n                              />\n                            </Flex>\n                            <HSeparator />\n                          </Box>\n                        </GridItem>\n                        <GridItem\n                          colSpan={12}\n                          sx={{ maxHeight: \"200px\", overflowX: \"auto\" }}\n                        >\n                          {data?.propertyDocuments?.length > 0 ? (\n                            data &&\n                            data?.propertyDocuments?.length > 0 &&\n                            data?.propertyDocuments?.map((item) => {\n                              const parts = item?.filename?.split(\".\");\n                              const lastIndex = parts[parts?.length - 1];\n                              return (\n                                <Flex alignItems={\"center\"} mt=\"3\">\n                                  {lastIndex === \"xlsx\" && (\n                                    <Image src={xlsx} boxSize=\"50px\" />\n                                  )}\n                                  {lastIndex === \"jpg\" && (\n                                    <Image src={jpg} boxSize=\"50px\" />\n                                  )}\n                                  {lastIndex === \"png\" && (\n                                    <Image src={png} boxSize=\"50px\" />\n                                  )}\n                                  {lastIndex === \"pdf\" && (\n                                    <Image src={pdf} boxSize=\"50px\" />\n                                  )}\n                                  {lastIndex === \"xls\" && (\n                                    <Image src={xls} boxSize=\"50px\" />\n                                  )}\n                                  {lastIndex === \"csv\" && (\n                                    <Image src={csv} boxSize=\"50px\" />\n                                  )}\n                                  {!(\n                                    lastIndex === \"xls\" ||\n                                    lastIndex === \"csv\" ||\n                                    lastIndex === \"png\" ||\n                                    lastIndex === \"pdf\" ||\n                                    lastIndex === \"xlsx\" ||\n                                    lastIndex === \"jpg\"\n                                  ) && <Image src={file} boxSize=\"50px\" />}\n                                  <Text\n                                    ml={2}\n                                    color=\"green.400\"\n                                    onClick={() => window?.open(item?.img)}\n                                    cursor={\"pointer\"}\n                                    sx={{\n                                      \"&:hover\": {\n                                        color: \"blue.500\",\n                                        textDecoration: \"underline\",\n                                      },\n                                    }}\n                                  >\n                                    {item.filename}\n                                  </Text>\n                                </Flex>\n                              );\n                            })\n                          ) : (\n                            <Text\n                              textAlign={\"center\"}\n                              width=\"100%\"\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              <DataNotFound />\n                            </Text>\n                          )}\n                        </GridItem>\n                      </Grid>\n                      {data?.propertyDocuments?.length > 0 ? (\n                        <Flex justifyContent={\"end\"} mt={1}>\n                          <Button\n                            size=\"sm\"\n                            colorScheme=\"brand\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              setShowProperty(true);\n                              setType(\"Doucument\");\n                            }}\n                          >\n                            Show more\n                          </Button>\n                        </Flex>\n                      ) : (\n                        \"\"\n                      )}\n                    </Card>\n                  </GridItem>\n                </Grid>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n\n          {(permission?.delete ||\n            permission?.update ||\n            user?.role === \"superAdmin\") && (\n            <Card mt={3}>\n              <Grid templateColumns=\"repeat(6, 1fr)\" gap={1}>\n                <GridItem colStart={6}>\n                  <Flex justifyContent={\"right\"}>\n                    {permission?.update && (\n                      <Button\n                        onClick={() => setEdit(true)}\n                        size=\"sm\"\n                        leftIcon={<EditIcon />}\n                        mr={2.5}\n                        variant=\"outline\"\n                        colorScheme=\"green\"\n                      >\n                        Edit\n                      </Button>\n                    )}\n                    {permission?.delete && (\n                      <Button\n                        style={{ background: \"red.800\" }}\n                        size=\"sm\"\n                        onClick={() => setDelete(true)}\n                        leftIcon={<DeleteIcon />}\n                        colorScheme=\"red\"\n                      >\n                        Delete\n                      </Button>\n                    )}\n                  </Flex>\n                </GridItem>\n              </Grid>\n            </Card>\n          )}\n        </>\n      )}\n\n      {/* property photo modal */}\n      <Modal\n        onClose={() => setDisplayPropertyPhoto(false)}\n        isOpen={displayPropertyPhoto}\n      >\n        <ModalOverlay />\n        <ModalContent maxWidth={\"6xl\"} height={\"750px\"}>\n          <ModalHeader>\n            {type === \"photo\"\n              ? \"Property All Photos\"\n              : type === \"video\"\n                ? \"Virtual Tours or Videos\"\n                : type === \"floor\"\n                  ? \"Floors plans\"\n                  : \"\"}\n          </ModalHeader>\n          <ModalCloseButton onClick={() => setDisplayPropertyPhoto(false)} />\n          <ModalBody overflowY={\"auto\"} height={\"700px\"}>\n            <div style={{ columns: 3 }}>\n              {type === \"photo\"\n                ? data &&\n                  data?.propertyPhotos?.length > 0 &&\n                  data?.propertyPhotos?.map((item) => (\n                    <a href={item?.img} target=\"_blank\">\n                      {\" \"}\n                      <Image\n                        width={\"100%\"}\n                        m={1}\n                        mb={4}\n                        src={item?.img}\n                        alt=\"Your Image\"\n                      />\n                    </a>\n                  ))\n                : type === \"video\"\n                  ? data &&\n                    data?.virtualToursOrVideos?.length > 0 &&\n                    data?.virtualToursOrVideos?.map((item) => (\n                      <a href={item?.img} target=\"_blank\">\n                        <video\n                          width=\"380\"\n                          controls\n                          autoplay\n                          loop\n                          style={{ margin: \" 5px\" }}\n                        >\n                          <source src={item?.img} type=\"video/mp4\" />\n                          <source src={item?.img} type=\"video/ogg\" />\n                        </video>\n                      </a>\n                    ))\n                  : type === \"floor\"\n                    ? data &&\n                      data?.floorPlans?.length > 0 &&\n                      data?.floorPlans?.map((item) => (\n                        <a href={item.img} target=\"_blank\">\n                          <Image\n                            width={\"100%\"}\n                            m={1}\n                            mb={4}\n                            src={item.img}\n                            alt=\"Your Image\"\n                          />\n                        </a>\n                      ))\n                    : \"\"}\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              colorScheme=\"red\"\n              mr={2}\n              onClick={() => setDisplayPropertyPhoto(false)}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      {/* <AddEmailHistory lead={true} leadEmail={allData?.lead?.leadEmail} fetchData={fetchData} isOpen={addEmailHistory} onClose={setAddEmailHistory} id={param.id} /> */}\n      {/* property document modal */}\n      <Modal onClose={() => setShowProperty(false)} isOpen={showProperty}>\n        <ModalOverlay />\n        <ModalContent maxWidth={\"xl\"} height={\"750px\"}>\n          <ModalHeader>Property All Document</ModalHeader>\n          <ModalCloseButton onClick={() => setShowProperty(false)} />\n          <ModalBody overflowY={\"auto\"} height={\"700px\"}>\n            {data?.propertyDocuments?.length > 0 ? (\n              data &&\n              data?.propertyDocuments?.length > 0 &&\n              data?.propertyDocuments?.map((item) => {\n                const parts = item?.filename?.split(\".\");\n                const lastIndex = parts[parts?.length - 1];\n                return (\n                  <Flex alignItems={\"center\"} mt=\"3\">\n                    {lastIndex === \"xlsx\" && (\n                      <Image src={xlsx} boxSize=\"50px\" />\n                    )}\n                    {lastIndex === \"jpg\" && <Image src={jpg} boxSize=\"50px\" />}\n                    {lastIndex === \"png\" && <Image src={png} boxSize=\"50px\" />}\n                    {lastIndex === \"pdf\" && <Image src={pdf} boxSize=\"50px\" />}\n                    {lastIndex === \"xls\" && <Image src={xls} boxSize=\"50px\" />}\n                    {lastIndex === \"csv\" && <Image src={csv} boxSize=\"50px\" />}\n                    {!(\n                      lastIndex === \"xls\" ||\n                      lastIndex === \"csv\" ||\n                      lastIndex === \"png\" ||\n                      lastIndex === \"pdf\" ||\n                      lastIndex === \"xlsx\" ||\n                      lastIndex === \"jpg\"\n                    ) && <Image src={file} boxSize=\"50px\" />}\n                    <Text\n                      ml={2}\n                      color=\"green.400\"\n                      onClick={() => window.open(item?.img)}\n                      cursor={\"pointer\"}\n                      sx={{\n                        \"&:hover\": {\n                          color: \"blue.500\",\n                          textDecoration: \"underline\",\n                        },\n                      }}\n                    >\n                      {item?.filename}\n                    </Text>\n                  </Flex>\n                );\n              })\n            ) : (\n              <Text\n                textAlign={\"center\"}\n                width=\"100%\"\n                color={textColor}\n                fontSize=\"sm\"\n                fontWeight=\"700\"\n              >\n                <DataNotFound />\n              </Text>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              colorScheme=\"red\"\n              mr={2}\n              onClick={() => setShowProperty(false)}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default View;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport { useFormik } from \"formik\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getApi, putApi } from \"services/api\";\nimport { generateValidationSchema } from \"utils\";\nimport CustomForm from \"utils/customForm\";\nimport * as yup from \"yup\";\n\nconst Edit = (props) => {\n  const { data } = props;\n  const initialFieldValues = Object?.fromEntries(\n    (props?.leadData?.fields || [])?.map((field) => [field?.name, \"\"]),\n  );\n  const [initialValues, setInitialValues] = useState({\n    ...initialFieldValues,\n    createBy: JSON.parse(localStorage.getItem(\"user\"))?._id,\n  });\n\n  const param = useParams();\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: yup\n      .object()\n      ?.shape(generateValidationSchema(props?.propertyData?.fields)),\n    enableReinitialize: true,\n    onSubmit: (values, { resetForm }) => {\n      EditData();\n    },\n  });\n\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n  } = formik;\n\n  const [isLoding, setIsLoding] = useState(false);\n\n  const EditData = async () => {\n    try {\n      setIsLoding(true);\n      let response = await putApi(\n        `api/property/edit/${props?.selectedId || param?.id}`,\n        values,\n      );\n      if (response?.status === 200) {\n        props.onClose();\n        props.setAction((pre) => !pre);\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  const handleClose = () => {\n    props.onClose(false);\n    props.setSelectedId && props?.setSelectedId();\n  };\n\n  let response;\n\n  const fetchData = async () => {\n    if (data) {\n      setInitialValues((prev) => ({ ...prev, ...data }));\n    } else if (props?.selectedId) {\n      try {\n        setIsLoding(true);\n        response = await getApi(\"api/property/view/\", props?.selectedId);\n        setInitialValues((prev) => ({ ...prev, ...response?.data?.property }));\n      } catch (e) {\n        console.error(e);\n      } finally {\n        setIsLoding(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [props?.selectedId, data]);\n\n  return (\n    <div>\n      <Drawer isOpen={props?.isOpen} size={props?.size}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader\n            alignItems={\"center\"}\n            justifyContent=\"space-between\"\n            display=\"flex\"\n          >\n            Edit {values?.name || \"Property\"}\n            <IconButton onClick={handleClose} icon={<CloseIcon />} />\n          </DrawerHeader>\n          <DrawerBody>\n            {isLoding ? (\n              <Flex\n                justifyContent={\"center\"}\n                alignItems={\"center\"}\n                width=\"100%\"\n              >\n                <Spinner />\n              </Flex>\n            ) : (\n              <CustomForm\n                moduleData={props?.propertyData}\n                values={values}\n                setFieldValue={setFieldValue}\n                handleChange={handleChange}\n                handleBlur={handleBlur}\n                errors={errors}\n                touched={touched}\n              />\n            )}\n          </DrawerBody>\n          <DrawerFooter>\n            <Button\n              size=\"sm\"\n              sx={{ textTransform: \"capitalize\" }}\n              variant=\"brand\"\n              disabled={isLoding ? true : false}\n              type=\"submit\"\n              onClick={handleSubmit}\n            >\n              {isLoding ? <Spinner /> : \"Update\"}\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              colorScheme=\"red\"\n              sx={{\n                marginLeft: 2,\n                textTransform: \"capitalize\",\n              }}\n              onClick={() => {\n                props?.onClose(false);\n              }}\n            >\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default Edit;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport { useFormik } from \"formik\";\nimport { useState } from \"react\";\nimport { postApi } from \"services/api\";\nimport { generateValidationSchema } from \"utils\";\nimport CustomForm from \"utils/customForm\";\nimport * as yup from \"yup\";\n\nconst Add = (props) => {\n  const [isLoding, setIsLoding] = useState(false);\n\n  const initialFieldValues = Object?.fromEntries(\n    (props?.propertyData?.fields || [])?.map((field) => [field?.name, \"\"]),\n  );\n\n  const initialValues = {\n    ...initialFieldValues,\n    createBy: JSON.parse(localStorage.getItem(\"user\"))._id,\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    enableReinitialize: true,\n    validationSchema: yup\n      .object()\n      ?.shape(generateValidationSchema(props?.propertyData?.fields)),\n\n    onSubmit: (values, { resetForm }) => {\n      AddData();\n    },\n  });\n\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n  } = formik;\n\n  const AddData = async () => {\n    try {\n      setIsLoding(true);\n      let response = await postApi(\"api/form/add\", {\n        ...values,\n        moduleId: props?.propertyData?._id,\n      });\n      if (response?.status === 200) {\n        props.onClose();\n        formik.resetForm();\n        props.setAction((pre) => !pre);\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  return (\n    <div>\n      <Drawer isOpen={props?.isOpen} size={props?.size}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader\n            alignItems={\"center\"}\n            justifyContent=\"space-between\"\n            display=\"flex\"\n          >\n            Add Property\n            <IconButton onClick={props?.onClose} icon={<CloseIcon />} />\n          </DrawerHeader>\n          <DrawerBody>\n            <CustomForm\n              moduleData={props?.propertyData}\n              values={values}\n              setFieldValue={setFieldValue}\n              handleChange={handleChange}\n              handleBlur={handleBlur}\n              errors={errors}\n              touched={touched}\n            />\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button\n              size=\"sm\"\n              sx={{ textTransform: \"capitalize\" }}\n              disabled={isLoding ? true : false}\n              variant=\"brand\"\n              type=\"submit\"\n              onClick={handleSubmit}\n            >\n              {isLoding ? <Spinner /> : \"Save\"}\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              colorScheme=\"red\"\n              sx={{\n                marginLeft: 2,\n                textTransform: \"capitalize\",\n              }}\n              onClick={props?.onClose}\n            >\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default Add;\n"],"names":["Upload","props","used","total","count","rest","textColorPrimary","useColorModeValue","brandColor","_jsxs","Grid","templateColumns","gap","children","_jsx","GridItem","colSpan","base","Dropzone","w","me","minH","img","text","height","onFileSelect","content","Box","Icon","as","MdUpload","h","color","Flex","justify","mx","mb","Text","fontSize","fontWeight","direction","textAlign","mt","my","_values$property2","onClose","isOpen","fetchData","isLoding","setIsLoding","useState","formik","useFormik","initialValues","property","onSubmit","values","_ref","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","_values$property","_response","formData","FormData","response","forEach","file","append","postApi","id","status","e","console","log","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","length","_Fragment","ModalFooter","Button","size","variant","onClick","mr","disabled","Spinner","colorScheme","_Date","_Date$toISOString","user","JSON","parse","localStorage","getItem","assignToLeadData","setAssignToLeadData","assignToContactData","setAssignToContactData","contactModelOpen","setContactModel","leadModelOpen","setLeadModel","propertyModelOpen","setPropertyModelOpen","assignToProperyData","setAssignToPropertyData","todayTime","Date","toISOString","split","data","setData","assignToSalesData","setAssignToSalesData","salesPersonsModelOpen","setSalesPersonsModelOpen","dispatch","useDispatch","useParams","sender","_id","recipient","lead","contactEmail","leadEmail","subject","message","createByContact","createByLead","startDate","type","html","createBy","salesAgent","validationSchema","yup","required","email","cc","bcc","relatedToContact","relatedToLead","enableReinitialize","useEffect","findEmail","find","item","fetchRecipientData","start","date","result","_result","category","getApi","role","_result2","propertyOptionData","getAllApi","_result$payload","fetchEmailTempData","_result$payload2","payload","toast","error","fetchEmailTemp","_result$data","_result$data$user","salesPersons","filter","userData","_userData$roles","roles","some","roleName","fetchUsersData","getPropertyOptions","map","value","label","name","overflowY","ContactModel","fieldName","LeadModel","UserModel","MultiPropertyModel","selectedItems","includes","md","FormLabel","display","ms","RadioGroup","onChange","Stack","Radio","justifyContent","Select","undefined","placeholder","borderColor","fullName","leadName","IconButton","ml","icon","LiaMousePointerSolid","firstName","lastName","Input","alignItems","CUIAutoComplete","items","onSelectedItemsChange","changes","selectProperty","attendes","onBlur","min","dayjs","format","Textarea","resize","templateName","sx","marginLeft","textTransform","setAction","callDuration","callNotes","pre","phoneNumber","leadPhoneNumber","setValueProperty","View","_allData$lead","_propertyData$","_contactData$","_contactData$$fields","_allData$Email","_allData$phoneCall","_data$propertyPhotos","_data$propertyPhotos2","_data$propertyPhotos3","_data$propertyPhotos4","_data$virtualToursOrV","_data$virtualToursOrV2","_data$virtualToursOrV3","_data$floorPlans","_data$floorPlans2","_data$floorPlans3","_data$floorPlans4","_data$propertyDocumen","_data$propertyDocumen2","_data$propertyDocumen3","_data$propertyDocumen4","_data$propertyPhotos5","_data$propertyPhotos6","_data$virtualToursOrV4","_data$virtualToursOrV5","_data$floorPlans5","_data$floorPlans6","_data$propertyDocumen5","_data$propertyDocumen6","_data$propertyDocumen7","param","textColor","filteredContacts","setFilteredContacts","onOpen","useDisclosure","edit","setEdit","deleteModel","setDelete","action","propertyPhoto","setPropertyPhoto","showProperty","setShowProperty","virtualToursorVideos","setVirtualToursorVideos","floorPlans","setFloorPlans","propertyDocuments","setPropertyDocuments","selectedValues","setSelectedValues","showEmail","setShowEmail","allData","setAllData","showCall","setShowCall","displayPropertyPhoto","setDisplayPropertyPhoto","selectedTab","setSelectedTab","addEmailHistory","setAddEmailHistory","addPhoneCall","setAddPhoneCall","phoneCall","setPhoneCall","setEmail","setEmailData","propertyData","useSelector","state","_state$propertyCustom","_state$propertyCustom2","propertyCustomFiled","contactData","setContactData","columns","setColumns","setType","navigate","useNavigate","taskPermission","PropertiesAccess","meetingPermission","taskAccess","meetingAccess","HasAccess","emailColumn","Header","accessor","cell","_cell$row","_cell$row$original","Link","to","row","original","textDecoration","className","moment","fromNow","_moment","_cell$row2","_cell$row2$values","timestamp","callColumns","_cell$row3","_cell$row3$original","_moment2","_cell$row4","_cell$row4$values","selectedColumns","setSelectedColumns","_response$data","_response$data2","_response$data3","_response$data4","Emails","i","fetchPropertyCustomFiled","_result$payload2$data","_result$payload2$data2","_result$payload2$data3","_result$payload2$data4","fetchContactCustomFiled","tempTableColumns","isSortable","width","fields","field","isTableField","fetchCustomDataFields","permission","emailAccess","callAccess","Add","Edit","CommonDeleteModel","handleDeleteData","deleteApi","ids","EmailModel","PhoneModel","viewData","contact","LData","Heading","m","Tabs","index","TabList","border","boxShadow","margin","sm","padding","borderTopLeftRadius","borderTopRightRadius","borderBottom","zIndex","Tab","view","Menu","create","update","delete","MenuButton","va","rightIcon","ChevronDownIcon","MenuDivider","MenuList","minWidth","MenuItem","AddIcon","EditIcon","generatePDF","element","document","getElementById","style","html2pdf","from","set","filename","image","quality","html2canvas","scale","useCORS","allowTaint","jsPDF","unit","orientation","save","then","FaFilePdf","DeleteIcon","leftIcon","IoIosArrowBack","TabPanels","TabPanel","pt","p","CustomView","fieldData","editUrl","moduleId","CommonCheckTable","AdvanceSearch","ManageGrid","access","columnData","title","tableData","tableCustomFields","customSearch","checkBox","overflow","Card","dataLength","Email","deleteMany","flexWrap","alingItem","PropertyPhoto","HSeparator","propertyPhotos","Image","src","alt","DataNotFound","virtualToursOrVideos","controls","autoplay","loop","createOn","maxHeight","overflowX","_item$filename","parts","lastIndex","xlsx","boxSize","jpg","png","pdf","xls","csv","_window","window","open","cursor","colStart","background","maxWidth","href","target","_item$filename2","_props$leadData","_JSON$parse","_yup$object","_props$propertyData","initialFieldValues","Object","fromEntries","leadData","setInitialValues","shape","generateValidationSchema","_ref2","EditData","putApi","selectedId","prev","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","handleClose","setSelectedId","CloseIcon","DrawerBody","CustomForm","moduleData","DrawerFooter","_props$propertyData2","_props$propertyData3"],"sourceRoot":""}