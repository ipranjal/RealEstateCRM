{"version":3,"file":"static/js/4891.d482023a.chunk.js","mappings":"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","sources":["views/admin/emailHistory/components/AddEmail.js","components/commonTableModel/UserModel.js","views/admin/phoneCall/components/AddPhoneCall.js"],"sourcesContent":["import {\n  Button,\n  FormLabel,\n  Grid,\n  GridItem,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Radio,\n  RadioGroup,\n  Select,\n  Stack,\n  Text,\n  Textarea,\n  Flex,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport { LiaMousePointerSolid } from \"react-icons/lia\";\nimport Spinner from \"components/spinner/Spinner\";\nimport dayjs from \"dayjs\";\nimport { useFormik } from \"formik\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { emailSchema } from \"schema\";\nimport { postApi, getApi } from \"services/api\";\nimport { fetchEmailTempData } from \"../../../../redux/slices/emailTempSlice\";\nimport UserModel from \"components/commonTableModel/UserModel\";\n\nconst AddEmailHistory = (props) => {\n  const { onClose, isOpen, fetchData, setAction } = props;\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [isLoding, setIsLoding] = useState(false);\n  const todayTime = new Date()?.toISOString()?.split(\".\")[0];\n  const [data, setData] = useState([]);\n  const [assignToSalesData, setAssignToSalesData] = useState([]);\n  const [salesPersonsModelOpen, setSalesPersonsModelOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    sender: user?._id,\n    recipient: props?.lead !== true ? props?.contactEmail : props?.leadEmail,\n    subject: \"\",\n    message: \"\",\n    createByContact: props?.id && props?.lead !== true ? props?.id : \"\",\n    createByLead: props?.id && props?.lead === true ? props?.id : \"\",\n    startDate: \"\",\n    type: \"message\",\n    html: \"\",\n    createBy: user?._id,\n    salesAgent: \"\", // sales person user id\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: emailSchema,\n    enableReinitialize: true,\n    onSubmit: (values, { resetForm }) => {\n      AddData();\n      resetForm();\n    },\n  });\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n  } = formik;\n\n  const AddData = async () => {\n    try {\n      setIsLoding(true);\n      let response = await postApi(\"api/email/add\", values);\n      if (response?.status === 200) {\n        props?.onClose();\n        fetchData(1);\n        // setAction((pre) => !pre)\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  const fetchEmailTemp = async () => {\n    setIsLoding(true);\n    const result = await dispatch(fetchEmailTempData());\n    if (result?.payload?.status === 200) {\n      setData(result?.payload?.data);\n    } else {\n      toast.error(\"Failed to fetch data\", \"error\");\n    }\n    setIsLoding(false);\n  };\n\n  const fetchUsersData = async () => {\n    setIsLoding(true);\n    try {\n      let result = await getApi(\"api/user/\");\n\n      let salesPersons =\n        result?.data?.user?.filter((userData) =>\n          userData?.roles?.some((role) => role?.roleName === \"Sales\"),\n        ) || [];\n      setAssignToSalesData(salesPersons);\n    } catch (error) {\n      console.error(\"Failed to fetch users data:\", error);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  useEffect(() => {\n    if (values?.type === \"template\") fetchEmailTemp();\n  }, [values?.type]);\n\n  useEffect(() => {\n    fetchUsersData();\n  }, []);\n\n  // useEffect(() => {\n  //    if (props.id && props.lead !== true) {\n  //         setFieldValue('createByContact', props.id);\n  //     } else if (props.id && props.lead === true) {\n  //         setFieldValue('createByLead', props.id);\n  //     }\n  // }, [props.id, props.lead])\n\n  return (\n    <Modal onClose={onClose} isOpen={isOpen} isCentered>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Send Email </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          {/* User Model for sales person */}\n          <UserModel\n            onClose={() => setSalesPersonsModelOpen(false)}\n            isOpen={salesPersonsModelOpen}\n            fieldName={\"salesAgent\"}\n            setFieldValue={setFieldValue}\n            data={assignToSalesData}\n            isLoding={isLoding}\n            setIsLoding={setIsLoding}\n          />\n\n          <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Recipient<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values?.recipient}\n                name=\"recipient\"\n                disabled\n                placeholder=\"Recipient\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.recipient && touched?.recipient ? \"red.300\" : null\n                }\n              />\n              <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                {\" \"}\n                {errors?.recipient && touched?.recipient && errors?.recipient}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Subject<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                placeholder=\"Enter subject\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values?.subject}\n                name=\"subject\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.subject && touched?.subject ? \"red.300\" : null\n                }\n              />\n              <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                {\" \"}\n                {errors?.subject && touched?.subject && errors?.subject}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Start Date<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                type=\"datetime-local\"\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                min={dayjs(todayTime).format(\"YYYY-MM-DD HH:mm\")}\n                value={values?.startDate}\n                name=\"startDate\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.startDate && touched?.startDate ? \"red.300\" : null\n                }\n              />\n              <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                {\" \"}\n                {errors?.startDate && touched?.startDate && errors?.startDate}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Assign To Sales Agent<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Flex justifyContent={\"space-between\"}>\n                <Select\n                  value={values?.salesAgent}\n                  name=\"salesAgent\"\n                  onChange={handleChange}\n                  mb={\n                    errors?.salesAgent && touched?.salesAgent\n                      ? undefined\n                      : \"10px\"\n                  }\n                  fontWeight=\"500\"\n                  placeholder={\"Assign To Sales Agent\"}\n                  borderColor={\n                    errors?.salesAgent && touched?.salesAgent ? \"red.300\" : null\n                  }\n                >\n                  {assignToSalesData?.map((item) => {\n                    return (\n                      <option\n                        value={item?._id}\n                        key={item?._id}\n                      >{`${item?.firstName} ${item?.lastName}`}</option>\n                    );\n                  })}\n                </Select>\n                <IconButton\n                  onClick={() => setSalesPersonsModelOpen(true)}\n                  ml={2}\n                  fontSize=\"25px\"\n                  icon={<LiaMousePointerSolid />}\n                />\n              </Flex>\n              <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                {\" \"}\n                {errors?.salesAgent &&\n                  touched?.salesAgent &&\n                  errors?.salesAgent}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Message\n              </FormLabel>\n              <RadioGroup\n                onChange={(e) => {\n                  setFieldValue(\"type\", e);\n                }}\n                value={values?.type}\n              >\n                <Stack direction=\"row\">\n                  <Radio value=\"message\">Message</Radio>\n                  <Radio value=\"template\">Template</Radio>\n                </Stack>\n              </RadioGroup>\n            </GridItem>\n            <GridItem colSpan={{ base: 12 }}>\n              {values?.type === \"message\" ? (\n                <>\n                  <Textarea\n                    resize={\"none\"}\n                    fontSize=\"sm\"\n                    placeholder=\"Enter Message\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values?.message}\n                    name=\"message\"\n                    fontWeight=\"500\"\n                    borderColor={\n                      errors?.message && touched?.message ? \"red.300\" : null\n                    }\n                  />\n                  <Text fontSize=\"sm\" mb=\"10px\" color={\"red\"}>\n                    {\" \"}\n                    {errors?.message && touched?.message && errors?.message}\n                  </Text>\n                </>\n              ) : (\n                <Select\n                  // value={values.assignTo}\n                  name=\"html\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values?.html}\n                  fontWeight=\"500\"\n                  placeholder={\"Select Template\"}\n                  // borderColor={errors.assignTo && touched.assignTo ? \"red.300\" : null}\n                >\n                  {data?.map((item) => {\n                    return (\n                      <option value={item?.html} key={item._id}>\n                        {item?.templateName}\n                      </option>\n                    );\n                  })}\n                </Select>\n              )}\n            </GridItem>\n          </Grid>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            size=\"sm\"\n            variant=\"brand\"\n            onClick={handleSubmit}\n            disabled={isLoding ? true : false}\n          >\n            {isLoding ? <Spinner /> : \"Save\"}\n          </Button>\n          <Button\n            sx={{\n              marginLeft: 2,\n              textTransform: \"capitalize\",\n            }}\n            variant=\"outline\"\n            colorScheme=\"red\"\n            size=\"sm\"\n            onClick={() => {\n              formik.resetForm();\n              onClose();\n            }}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default AddEmailHistory;\n","import {\n  Button,\n  Flex,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n} from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport { GiClick } from \"react-icons/gi\";\nimport CommonCheckTable from \"components/reactTable/checktable\";\nimport { fetchLeadCustomFiled } from \"../../redux/slices/leadCustomFiledSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { getApi } from \"services/api\";\n\nconst UserModel = (props) => {\n  const {\n    onClose,\n    isOpen,\n    fieldName,\n    setFieldValue,\n    data,\n    isLoding,\n    setIsLoding,\n  } = props;\n  const title = \"Users\";\n  const dispatch = useDispatch();\n  // const [data, setData] = useState([]);\n\n  // const [isLoding, setIsLoding] = useState(false);\n  const [leadData, setLeadData] = useState([]);\n  const [selectedValues, setSelectedValues] = useState([]);\n  const roleHeader = { Header: \"role\", accessor: \"role\" };\n\n  const handleSubmit = async () => {\n    try {\n      setIsLoding(true);\n      setFieldValue(fieldName, selectedValues);\n      onClose();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n  const tableColumns = [\n    { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\n    {\n      Header: \"email Id\",\n      accessor: \"username\",\n    },\n    { Header: \"first Name\", accessor: \"firstName\" },\n    { Header: \"last Name\", accessor: \"lastName\" },\n    ...(fieldName !== \"salesAgent\" ? [roleHeader] : []),\n  ];\n\n  // const [columns, setColumns] = useState([...tableColumns]);\n  // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);\n  // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))\n\n  // const fetchData = async () => {\n  //     setIsLoding(true)\n  //     let result = await getApi('api/user/');\n  //     setData(result?.data?.user);\n  //     setIsLoding(false)\n  // }\n  // useEffect(() => {\n  //     fetchData()\n  // }, [])\n\n  return (\n    <Modal onClose={onClose} size=\"full\" isOpen={isOpen}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Select User</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          {isLoding ? (\n            <Flex justifyContent={\"center\"} alignItems={\"center\"} width=\"100%\">\n              <Spinner />\n            </Flex>\n          ) : (\n            <CommonCheckTable\n              title={title}\n              isLoding={isLoding}\n              columnData={tableColumns ?? []}\n              // dataColumn={columns ?? []}\n              allData={data ?? []}\n              tableData={data}\n              AdvanceSearch={() => \"\"}\n              ManageGrid={false}\n              deleteMany={false}\n              selectedValues={selectedValues}\n              setSelectedValues={setSelectedValues}\n              selectType=\"single\"\n              customSearch={false}\n            />\n          )}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            variant=\"brand\"\n            size=\"sm\"\n            me={2}\n            disabled={isLoding ? true : false}\n            leftIcon={<GiClick />}\n            onClick={handleSubmit}\n          >\n            {\" \"}\n            {isLoding ? <Spinner /> : \"Select\"}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            colorScheme=\"red\"\n            onClick={() => onClose()}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default UserModel;\n","import {\n  Button,\n  FormLabel,\n  Grid,\n  GridItem,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  Textarea,\n  Flex,\n  Select,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport { LiaMousePointerSolid } from \"react-icons/lia\";\nimport Spinner from \"components/spinner/Spinner\";\nimport dayjs from \"dayjs\";\nimport { useFormik } from \"formik\";\nimport { useEffect, useState } from \"react\";\nimport { phoneCallSchema } from \"schema\";\nimport { getApi, postApi } from \"services/api\";\nimport UserModel from \"components/commonTableModel/UserModel\";\n\nconst AddPhoneCall = (props) => {\n  const { onClose, isOpen, viewData, fetchData, setAction, cData, LData } =\n    props;\n\n  const [isLoding, setIsLoding] = useState(false);\n  const todayTime = new Date().toISOString().split(\".\")[0];\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [assignToSalesData, setAssignToSalesData] = useState([]);\n  const [salesPersonsModelOpen, setSalesPersonsModelOpen] = useState(false);\n\n  const initialValues = {\n    sender: user?._id,\n    recipient: \"\",\n    callDuration: \"\",\n    callNotes: \"\",\n    createByContact: \"\",\n    createByLead: \"\",\n    startDate: \"\",\n    createBy: user?._id,\n    salesAgent: \"\", // sales person user id\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: phoneCallSchema,\n    onSubmit: (values, { resetForm }) => {\n      AddData();\n      resetForm();\n    },\n  });\n\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n  } = formik;\n\n  const AddData = async () => {\n    try {\n      setIsLoding(true);\n      let response = await postApi(\"api/phoneCall/add\", values);\n      if (response?.status === 200) {\n        props?.onClose();\n        fetchData(1);\n        // setAction((pre) => !pre)\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  // const fetchDataR = async () => {\n  //     if (props?.viewData?.lead?.leadPhoneNumber) {\n  //         if (props.id && props.lead !== true) {\n  //             setFieldValue('recipient', props?.viewData?.contact?.phoneNumber);\n  //             setFieldValue('createByContact', props?.id);\n  //             values.recipient = props?.viewData?.contact?.phoneNumber\n  //         } else if (props.id && props.lead === true) {\n  //             let response = await getApi('api/lead/view/', props.id)\n  //             if (response?.status === 200) {\n  //                 setFieldValue('recipient', response?.data?.lead?.leadPhoneNumber);\n  //                 setFieldValue('createByLead', props.id);\n  //                 values.recipient = response?.data?.lead?.leadPhoneNumber\n  //             }\n  //         }\n  //     } else {\n  //         if (props.id && props.lead !== true) {\n  //             if (cData) {\n  //                 setFieldValue('recipient', cData?.phoneNumber);\n  //                 setFieldValue('createByContact', props?.id);\n  //                 values.recipient = cData?.phoneNumber\n  //             }\n  //             // let response = await getApi('api/contact/view/', props.id)\n  //             // if (response?.status === 200) {\n  //             //     setFieldValue('recipient', response?.data?.contact?.phoneNumber);\n  //             //     setFieldValue('createByContact', props?.id);\n  //             //     values.recipient = response?.data?.contact?.phoneNumber\n  //             // }\n  //         } else if (props.id && props.lead === true) {\n  //             let response = await getApi('api/lead/view/', props.id)\n  //             if (response?.status === 200) {\n  //                 setFieldValue('recipient', response?.data?.lead?.leadPhoneNumber);\n  //                 setFieldValue('createByLead', props.id);\n  //                 values.recipient = response?.data?.lead?.leadPhoneNumber\n  //             }\n  //         }\n  //     }\n  // }\n\n  const fetchUsersData = async () => {\n    setIsLoding(true);\n    try {\n      let result = await getApi(\"api/user/\");\n\n      let salesPersons =\n        result?.data?.user?.filter((userData) =>\n          userData?.roles?.some((role) => role?.roleName === \"Sales\")\n        ) || [];\n      setAssignToSalesData(salesPersons);\n    } catch (error) {\n      console.error(\"Failed to fetch users data:\", error);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  const fetchDataR = async () => {\n    if (LData && LData?._id && props?.lead === true) {\n      setFieldValue(\n        \"recipient\",\n        LData?.leadPhoneNumber || viewData?.lead?.leadMobile\n      );\n      setFieldValue(\"createByLead\", props?.id);\n      values.recipient = LData?.leadPhoneNumber || viewData?.lead?.leadMobile;\n    } else if (cData && cData?._id && props?.lead !== true) {\n      setFieldValue(\"recipient\", cData?.phoneNumber);\n      setFieldValue(\"createByContact\", props?.id);\n      values.recipient = cData?.phoneNumber;\n    }\n  };\n\n  useEffect(() => {\n    fetchDataR();\n    fetchUsersData();\n  }, [props?.id, cData, LData, viewData]);\n\n  return (\n    <Modal onClose={onClose} isOpen={isOpen} isCentered>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Add Call </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          {/* User Model for sales person */}\n          <UserModel\n            onClose={() => setSalesPersonsModelOpen(false)}\n            isOpen={salesPersonsModelOpen}\n            fieldName={\"salesAgent\"}\n            setFieldValue={setFieldValue}\n            data={assignToSalesData}\n            isLoding={isLoding}\n            setIsLoding={setIsLoding}\n          />\n\n          <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Recipient<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                type=\"number\"\n                disabled\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values?.recipient}\n                name=\"recipient\"\n                placeholder=\"Recipient\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.recipient && touched?.recipient ? \"red.300\" : null\n                }\n              />\n              <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                {\" \"}\n                {errors?.recipient && touched?.recipient && errors?.recipient}\n              </Text>\n            </GridItem>\n            <GridItem colSpan={{ base: 12, md: 6 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Start Date<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                type=\"datetime-local\"\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                min={dayjs(todayTime).format(\"YYYY-MM-DD HH:mm\")}\n                value={values?.startDate}\n                name=\"startDate\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.startDate && touched?.startDate ? \"red.300\" : null\n                }\n              />\n              <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                {\" \"}\n                {errors.startDate && touched.startDate && errors.startDate}\n              </Text>\n            </GridItem>\n\n            <GridItem colSpan={{ base: 12, md: 6 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Call Duration<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Input\n                fontSize=\"sm\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values?.callDuration}\n                name=\"callDuration\"\n                placeholder=\"call Duration\"\n                fontWeight=\"500\"\n                borderColor={\n                  errors?.callDuration && touched?.callDuration\n                    ? \"red.300\"\n                    : null\n                }\n              />\n              <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                {\" \"}\n                {errors?.callDuration &&\n                  touched?.callDuration &&\n                  errors?.callDuration}\n              </Text>\n            </GridItem>\n\n            <GridItem colSpan={{ base: 12 }}>\n              <FormLabel\n                display=\"flex\"\n                ms=\"4px\"\n                fontSize=\"sm\"\n                fontWeight=\"500\"\n                mb=\"8px\"\n              >\n                Assign To Sales Agent<Text color={\"red\"}>*</Text>\n              </FormLabel>\n              <Flex justifyContent={\"space-between\"}>\n                <Select\n                  value={values?.salesAgent}\n                  name=\"salesAgent\"\n                  onChange={handleChange}\n                  mb={\n                    errors?.salesAgent && touched?.salesAgent\n                      ? undefined\n                      : \"10px\"\n                  }\n                  fontWeight=\"500\"\n                  placeholder={\"Assign To Sales Agent\"}\n                  borderColor={\n                    errors?.salesAgent && touched?.salesAgent ? \"red.300\" : null\n                  }\n                >\n                  {assignToSalesData?.map((item) => {\n                    return (\n                      <option\n                        value={item._id}\n                        key={item?._id}\n                      >{`${item?.firstName} ${item?.lastName}`}</option>\n                    );\n                  })}\n                </Select>\n                <IconButton\n                  onClick={() => setSalesPersonsModelOpen(true)}\n                  ml={2}\n                  fontSize=\"25px\"\n                  icon={<LiaMousePointerSolid />}\n                />\n              </Flex>\n              <Text mb=\"10px\" fontSize=\"sm\" color={\"red\"}>\n                {\" \"}\n                {errors?.salesAgent &&\n                  touched?.salesAgent &&\n                  errors?.salesAgent}\n              </Text>\n            </GridItem>\n          </Grid>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            size=\"sm\"\n            variant=\"brand\"\n            disabled={isLoding ? true : false}\n            onClick={handleSubmit}\n          >\n            {isLoding ? <Spinner /> : \"Save\"}\n          </Button>\n          <Button\n            size=\"sm\"\n            sx={{\n              marginLeft: 2,\n              textTransform: \"capitalize\",\n            }}\n            variant=\"outline\"\n            colorScheme=\"red\"\n            onClick={() => {\n              formik.resetForm();\n              onClose();\n            }}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default AddPhoneCall;\n"],"names":["props","_Date","_Date$toISOString","onClose","isOpen","fetchData","setAction","user","JSON","parse","localStorage","getItem","isLoding","setIsLoding","useState","todayTime","Date","toISOString","split","data","setData","assignToSalesData","setAssignToSalesData","salesPersonsModelOpen","setSalesPersonsModelOpen","dispatch","useDispatch","initialValues","sender","_id","recipient","lead","contactEmail","leadEmail","subject","message","createByContact","id","createByLead","startDate","type","html","createBy","salesAgent","formik","useFormik","validationSchema","emailSchema","enableReinitialize","onSubmit","values","_ref","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","response","postApi","status","e","console","log","useEffect","_result$payload","result","fetchEmailTempData","_result$payload2","payload","toast","error","fetchEmailTemp","_result$data","_result$data$user","getApi","salesPersons","filter","userData","_userData$roles","roles","some","role","roleName","fetchUsersData","_jsxs","Modal","isCentered","children","_jsx","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","UserModel","fieldName","Grid","templateColumns","gap","GridItem","colSpan","base","FormLabel","display","ms","fontSize","fontWeight","mb","Text","color","Input","onChange","onBlur","value","name","disabled","placeholder","borderColor","min","dayjs","format","Flex","justifyContent","Select","undefined","map","item","firstName","lastName","IconButton","onClick","ml","icon","LiaMousePointerSolid","RadioGroup","Stack","direction","Radio","_Fragment","Textarea","resize","templateName","ModalFooter","Button","size","variant","Spinner","sx","marginLeft","textTransform","colorScheme","leadData","setLeadData","selectedValues","setSelectedValues","tableColumns","Header","accessor","isSortable","width","alignItems","CommonCheckTable","title","columnData","allData","tableData","AdvanceSearch","ManageGrid","deleteMany","selectType","customSearch","me","leftIcon","GiClick","viewData","cData","LData","callDuration","callNotes","phoneCallSchema","_viewData$lead","_viewData$lead2","leadPhoneNumber","leadMobile","phoneNumber","fetchDataR","md"],"sourceRoot":""}