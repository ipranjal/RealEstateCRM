{"version":3,"file":"static/js/4986.e7c39765.chunk.js","mappings":"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","sources":["views/admin/contact/components/ContactImport.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport Papa from \"papaparse\";\nimport {\n  Flex,\n  useColorModeValue,\n  Select,\n  Button,\n  Grid,\n  GridItem,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useFormik } from \"formik\";\nimport { postApi } from \"services/api\";\nimport { toast } from \"react-toastify\";\nimport moment from \"moment\";\nimport ExcelJS from \"exceljs\";\nimport Card from \"components/card/Card\";\n\nfunction ContactImport() {\n  const location = useLocation();\n  const { fileData, customFields } = location?.state || {};\n  const [importedFileFields, setImportedFileFields] = useState([]);\n  const [importedFileData, setImportedFileData] = useState([]);\n  const [isLoding, setIsLoding] = useState(false);\n  const navigate = useNavigate();\n  const userId = JSON.parse(localStorage.getItem(\"user\"))?._id;\n  const [filterContact, setFilterContact] = useState([]);\n\n  const columns = [\n    { Header: \"Fields In Crm\", accessor: \"crmFields\" },\n    { Header: \"Fields In File\", accessor: \"fileFields\" },\n  ];\n\n  const initialFieldValues = Object?.fromEntries(\n    (customFields || []).map((field) => [field?.name, \"\"]),\n  );\n  const initialValues = {\n    ...initialFieldValues,\n  };\n\n  const fieldsInCrm = [\n    ...customFields?.map((field) => ({\n      Header: field?.label,\n      accessor: field?.name,\n      type: field?.type,\n      formikType: field?.validations?.find((obj) =>\n        obj?.hasOwnProperty(\"formikType\"),\n      ),\n    })),\n  ];\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: (values, { resetForm }) => {\n      const contactsData = importedFileData?.map((item, ind) => {\n        const contact = {\n          createdDate: new Date(),\n          deleted: item[values.deleted || \"deleted\"] || false,\n          createBy: JSON.parse(localStorage.getItem(\"user\"))?._id,\n        };\n\n        fieldsInCrm?.forEach((field) => {\n          const selectedField = values[field?.accessor];\n          const fieldValue = item[selectedField] || \"\";\n\n          if (field?.type?.toLowerCase() === \"date\") {\n            contact[field?.accessor] = moment(fieldValue).isValid()\n              ? fieldValue\n              : \"\";\n          } else if (\n            field?.type?.toLowerCase() === \"number\" &&\n            [\"positive\", \"negative\"].includes(field?.formikType?.toLowerCase())\n          ) {\n            contact[field?.accessor] = parseFloat(fieldValue) || \"\";\n          } else if (field?.type?.toLowerCase() === \"number\") {\n            contact[field?.accessor] = parseInt(fieldValue, 10) || \"\";\n          } else {\n            contact[field?.accessor] = fieldValue;\n          }\n        });\n\n        return contact;\n      });\n\n      AddData(contactsData);\n    },\n  });\n\n  const {\n    errors,\n    touched,\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n    resetForm,\n  } = formik;\n\n  const AddData = async (contacts) => {\n    try {\n      setIsLoding(true);\n      let response = await postApi(\"api/contact/addMany\", contacts);\n      if (response?.status === 200) {\n        toast.success(`Contacts imported successfully`);\n        resetForm();\n        navigate(\"/contacts\");\n      }\n    } catch (e) {\n      console.error(e);\n      toast.error(`Contacts import failed`);\n      resetForm();\n      navigate(\"/contacts\");\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  const parseFileData = async (file) => {\n    const reader = new FileReader();\n    const extension = file?.name?.split(\".\")?.pop()?.toLowerCase();\n\n    reader.onload = async ({ target }) => {\n      if (extension === \"csv\") {\n        const csv = Papa?.parse(target?.result, {\n          header: true,\n        });\n        const parsedData = csv?.data;\n\n        if (parsedData && parsedData?.length > 0) {\n          setImportedFileData(parsedData);\n          const fileHeadingFields = Object.keys(parsedData[0]);\n          setImportedFileFields(fileHeadingFields);\n        } else {\n          toast.error(\"Empty or invalid CSV file\");\n          navigate(\"/contacts\");\n        }\n      } else if (extension === \"xlsx\") {\n        const data = new Uint8Array(target.result);\n        const workbook = new ExcelJS.Workbook();\n\n        await workbook.xlsx.load(data);\n\n        const worksheet = workbook.getWorksheet(1);\n        const jsonData = [];\n\n        // Iterate over rows and cells\n        worksheet?.eachRow({ includeEmpty: true }, (row, rowNumber) => {\n          const rowData = {};\n          row?.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n            rowData[worksheet?.getCell(1, colNumber)?.value] = cell?.value;\n          });\n          jsonData?.push(rowData);\n        });\n        jsonData?.splice(0, 1);\n        setImportedFileData(jsonData);\n\n        if (jsonData && jsonData?.length > 0) {\n          const fileHeadingFields = Object?.keys(jsonData[0]);\n          setImportedFileFields(fileHeadingFields);\n        } else {\n          toast.error(\"Empty or invalid XLSX file\");\n          navigate(\"/contacts\");\n        }\n      }\n    };\n\n    if (extension === \"csv\") {\n      reader?.readAsText(file);\n    } else if (extension === \"xlsx\") {\n      const blob = new Blob([file]);\n      reader?.readAsArrayBuffer(blob);\n    }\n  };\n\n  useEffect(() => {\n    if (fileData && fileData?.length > 0) {\n      const firstFile = fileData[0];\n      parseFileData(firstFile);\n    }\n  }, [fileData]);\n\n  useEffect(() => {\n    const filterContactData = importedFileFields?.filter((field) => {\n      const result = fieldsInCrm?.find(\n        (data) => field === data?.accessor || field === data?.Header,\n      );\n      if (result) {\n        setFieldValue(result?.accessor, field);\n        return true;\n      }\n      return false;\n    });\n    setFilterContact(filterContactData);\n  }, [importedFileFields]);\n\n  return (\n    <>\n      <Card overflowY={\"auto\"} className=\"importTable\">\n        <Text\n          color={\"secondaryGray.900\"}\n          fontSize=\"22px\"\n          fontWeight=\"700\"\n          mb=\"20px\"\n        >\n          Import Contacts\n        </Text>\n        <Grid\n          templateColumns=\"repeat(12, 1fr)\"\n          mb={3}\n          pb={2}\n          gap={1}\n          borderBottom={\"1px solid #e2e8f0\"}\n        >\n          {columns?.map((column, index) => (\n            <GridItem\n              key={index}\n              colSpan={{ base: 6 }}\n              fontWeight={\"600\"}\n              fontSize={{ sm: \"14px\", lg: \"14px\" }}\n              color=\"secondaryGray.900\"\n              style={{ textTransform: \"uppercase\" }}\n            >\n              {column?.Header}\n            </GridItem>\n          ))}\n        </Grid>\n        <Grid\n          templateColumns=\"repeat(12, 1fr)\"\n          mb={3}\n          gap={1}\n          overflowY={\"auto\"}\n        >\n          {fieldsInCrm?.map((item, index) => (\n            <>\n              <GridItem colSpan={{ base: 6 }} key={item?.id} mt=\"10px\">\n                {item?.Header}\n              </GridItem>\n              <GridItem colSpan={{ base: 4 }}>\n                <Select\n                  variant=\"flushed\"\n                  fontWeight=\"500\"\n                  isSearchable\n                  value={values[item?.accessor]}\n                  name={item?.accessor}\n                  onChange={handleChange}\n                >\n                  <option value=\"\">\n                    {\" \"}\n                    {filterContact\n                      ? filterContact?.find(\n                          (data) =>\n                            (item?.Header === data ||\n                              item?.accessor === data) &&\n                            data,\n                        )\n                        ? filterContact?.find(\n                            (data) =>\n                              (item?.Header === data ||\n                                item?.accessor === data) &&\n                              data,\n                          )\n                        : \"Select Field In File\"\n                      : \"Select Field In File\"}\n                  </option>\n                  {importedFileFields?.map((field) => (\n                    <option value={field} key={field}>\n                      {field}\n                    </option>\n                  ))}\n                </Select>\n              </GridItem>\n            </>\n          ))}\n        </Grid>\n\n        <Flex Flex justifyContent={\"end\"} mt=\"5\">\n          <Button size=\"sm\" onClick={() => handleSubmit()} variant=\"brand\">\n            Save\n          </Button>\n        </Flex>\n      </Card>\n    </>\n  );\n}\n\nexport default ContactImport;\n"],"names":["_JSON$parse","location","useLocation","fileData","customFields","state","importedFileFields","setImportedFileFields","useState","importedFileData","setImportedFileData","isLoding","setIsLoding","navigate","useNavigate","filterContact","setFilterContact","JSON","parse","localStorage","getItem","_id","columns","Header","accessor","initialValues","Object","fromEntries","map","field","name","fieldsInCrm","_field$validations","label","type","formikType","validations","find","obj","hasOwnProperty","formik","useFormik","onSubmit","values","_ref","resetForm","contactsData","item","ind","_JSON$parse2","contact","createdDate","Date","deleted","createBy","forEach","_field$type","_field$type2","_field$formikType","_field$type3","selectedField","fieldValue","toLowerCase","moment","isValid","includes","parseFloat","parseInt","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","response","postApi","contacts","status","toast","success","e","console","error","useEffect","length","_file$name","_file$name$split","_file$name$split$pop","reader","FileReader","extension","file","split","pop","onload","target","_ref2","csv","Papa","result","header","parsedData","data","fileHeadingFields","keys","Uint8Array","workbook","ExcelJS","xlsx","load","worksheet","getWorksheet","jsonData","eachRow","includeEmpty","row","rowNumber","rowData","eachCell","cell","colNumber","_worksheet$getCell","getCell","value","push","splice","readAsText","blob","Blob","readAsArrayBuffer","parseFileData","filterContactData","filter","_jsx","_Fragment","children","_jsxs","Card","overflowY","className","Text","color","fontSize","fontWeight","mb","Grid","templateColumns","pb","gap","borderBottom","column","index","GridItem","colSpan","base","sm","lg","style","textTransform","mt","id","Select","variant","isSearchable","onChange","Flex","justifyContent","Button","size","onClick"],"sourceRoot":""}