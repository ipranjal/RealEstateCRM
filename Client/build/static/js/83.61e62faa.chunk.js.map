{"version":3,"file":"static/js/83.61e62faa.chunk.js","mappings":"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","sources":["views/admin/role/changeAccess.js","views/admin/role/components/roleUser.js","views/admin/role/components/userModal.js","views/admin/role/components/roleModal.js","views/admin/role/Add.js","views/admin/role/index.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Flex,\r\n  Text,\r\n  Td,\r\n  Checkbox,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport { useFormik } from \"formik\";\r\nimport { putApi } from \"services/api\";\r\nimport DataNotFound from \"components/notFoundData\";\r\n\r\nfunction ChangeAccess(props) {\r\n  const {\r\n    columnsData,\r\n    name,\r\n    tableData,\r\n    fetchData,\r\n    setAccess,\r\n    _id,\r\n    setAccessRole,\r\n    setRoleModal,\r\n    editModal, setEditModal,\r\n  } = props;\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const [isLoding, setIsLoding] = useState(false);\r\n\r\n  const [gopageValue, setGopageValue] = useState();\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0 },\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    pageOptions,\r\n    state: { pageIndex, pageSize },\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length);\r\n  }\r\n\r\n  const initialValues = {\r\n    roleName: name,\r\n    access: tableData,\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: initialValues,\r\n    enableReinitialize: true,\r\n    onSubmit: (values, { resetForm }) => {\r\n      EditData();\r\n    },\r\n  });\r\n\r\n  const {\r\n    values,\r\n    handleSubmit,\r\n    setFieldValue,\r\n  } = formik;\r\n\r\n  const handleCheckboxChange = (index, fieldName) => (event) => {\r\n    const { checked } = event.target;\r\n    const updatedAccess = values.access.map((item, idx) => {\r\n      if (idx === index) {\r\n        return {\r\n          ...item,\r\n          [fieldName]: checked,\r\n        };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setFieldValue('access', updatedAccess);\r\n    setAccess(updatedAccess)\r\n  };\r\n\r\n  const EditData = async () => {\r\n    try {\r\n      setIsLoding(true);\r\n      let response = await putApi(`api/role-access/edit/${_id}`, values);\r\n      if (response.status === 200) {\r\n        setEditModal(false)\r\n        fetchData()\r\n        setAccessRole(tableData)\r\n        setRoleModal(true)\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      setIsLoding(false);\r\n    }\r\n  };\r\n\r\n  \r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [editModal])\r\n\r\n  return (\r\n    <Modal onClose={() => setEditModal(false)} isOpen={editModal} isCentered size={\"xl\"}>\r\n      <ModalOverlay />\r\n      <ModalContent height={\"580px\"} maxWidth={\"2xl\"}>\r\n        <ModalHeader textTransform={\"capitalize\"}>{name} Access</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody overflow={\"auto\"} height={\"400px\"}>\r\n          <Table>\r\n            <Thead>\r\n              {headerGroups?.map((headerGroup, index) => (\r\n                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                  {headerGroup.headers?.map((column, index) => (\r\n                    <Th\r\n                      sx={{ width: \"10px\" }}\r\n                      pe=\"10px\"\r\n                      key={index}\r\n                      borderColor={borderColor}\r\n                      display={column.display === false && \"none\"}\r\n                    >\r\n                      <Flex\r\n                        justify=\"space-between\"\r\n                        align=\"center\"\r\n                        fontSize={{ sm: \"10px\", lg: \"12px\" }}\r\n                        color=\"gray.400\"\r\n                      >\r\n                        {column.display !== false && column.render(\"Header\")}\r\n                      </Flex>\r\n                    </Th>\r\n                  ))}\r\n                </Tr>\r\n              ))}\r\n            </Thead>\r\n            <Tbody {...getTableBodyProps()}>\r\n              {isLoding ? (\r\n                <Tr>\r\n                  <Td colSpan={columns?.length}>\r\n                    <Flex\r\n                      justifyContent={\"center\"}\r\n                      alignItems={\"center\"}\r\n                      width=\"100%\"\r\n                      color={textColor}\r\n                      fontSize=\"sm\"\r\n                      fontWeight=\"700\"\r\n                    >\r\n                      <Spinner />\r\n                    </Flex>\r\n                  </Td>\r\n                </Tr>\r\n              ) : data?.length === 0 ? (\r\n                <Tr>\r\n                  <Td colSpan={columns.length}>\r\n                    <Text\r\n                      textAlign={\"center\"}\r\n                      width=\"100%\"\r\n                      color={textColor}\r\n                      fontSize=\"sm\"\r\n                      fontWeight=\"700\"\r\n                    >\r\n                      <DataNotFound />\r\n                    </Text>\r\n                  </Td>\r\n                </Tr>\r\n              ) : (\r\n                page?.map((row, i) => {\r\n                  prepareRow(row);\r\n                  return (\r\n                    <Tr {...row?.getRowProps()} key={i}>\r\n                      {row?.cells?.map((cell, index) => {\r\n                        let data = \"\";\r\n                        if (cell?.column.Header === \"title\") {\r\n                          data = (\r\n                            <Text\r\n                              me=\"10px\"\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              {cell?.value}\r\n                            </Text>\r\n                          );\r\n                        } else if (cell?.column.Header === \"create\") {\r\n                          data = (\r\n                            <Text\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              <Checkbox\r\n                                value={cell.value ? cell.value : values?.access[i]?.create}\r\n                                defaultChecked={cell.value}\r\n                                onChange={handleCheckboxChange(i, 'create')}\r\n                              />\r\n                            </Text>\r\n                          );\r\n                        } else if (cell?.column.Header === \"view\") {\r\n                          data = (\r\n                            <Text\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              <Checkbox\r\n                                checked={values?.access[i]?.view}\r\n                                defaultChecked={cell.value}\r\n                                onChange={handleCheckboxChange(i, 'view')}\r\n                              />\r\n                            </Text>\r\n                          );\r\n                        } else if (cell?.column.Header === \"update\") {\r\n                          data = (\r\n                            <Text\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              <Checkbox\r\n                                checked={values?.access[i]?.update}\r\n                                defaultChecked={cell.value}\r\n                                onChange={handleCheckboxChange(i, 'update')}\r\n                              />\r\n                            </Text>\r\n                          );\r\n                        } else if (cell?.column.Header === \"delete\") {\r\n                          data = (\r\n                            <Text\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              <Checkbox\r\n                                checked={values?.access[i]?.delete}\r\n                                defaultChecked={cell.value}\r\n                                onChange={handleCheckboxChange(i, 'delete')}\r\n                              />\r\n                            </Text>\r\n                          );\r\n                        }\r\n                        return (\r\n                          <Td\r\n                            {...cell?.getCellProps()}\r\n                            key={index}\r\n                            fontSize={{ sm: \"14px\" }}\r\n                            minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                            borderColor=\"transparent\"\r\n                            sx={{\r\n                              display: cell?.column.Header === \"#\" && \"none\",\r\n                            }}\r\n                          >\r\n                            {data}\r\n                          </Td>\r\n                        );\r\n                      })}\r\n                    </Tr>\r\n                  );\r\n                })\r\n              )}\r\n            </Tbody>\r\n          </Table>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button size=\"sm\" variant=\"brand\" onClick={handleSubmit}>\r\n            Save\r\n          </Button>\r\n          <Button size=\"sm\"\r\n            onClick={() => { setEditModal(false); setRoleModal(true); }}\r\n            variant=\"outline\"\r\n            colorScheme=\"red\"\r\n            sx={{\r\n              marginLeft: 2,\r\n              textTransform: \"capitalize\",\r\n            }}\r\n          >\r\n            Close\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ChangeAccess;\r\n","import { Button, Flex, Modal, ModalBody, Text, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useColorModeValue, Tr, Td, Spinner, Thead, Table, Tbody, Th, Checkbox } from '@chakra-ui/react';\r\nimport DataNotFound from 'components/notFoundData';\r\nimport Pagination from 'components/pagination/Pagination';\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { useGlobalFilter, usePagination, useSortBy, useTable } from 'react-table';\r\nimport { putApi } from 'services/api';\r\n\r\nconst RoleUser = (props) => {\r\n\r\n    const { setUserModal, userModal, tableData, columnsData, setOpenUser, _id, userRole, fetchData } = props;\r\n\r\n    const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n    const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n    const columns = useMemo(() => columnsData, [columnsData]);\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n    const data = useMemo(() => tableData, [tableData]);\r\n    const [gopageValue, setGopageValue] = useState();\r\n\r\n    const tableInstance = useTable(\r\n        {\r\n            columns, data,\r\n            initialState: { pageIndex: 0 }\r\n        },\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        usePagination\r\n    );\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        state: { pageIndex, pageSize }\r\n    } = tableInstance;\r\n\r\n    if (pageOptions.length < gopageValue) {\r\n        setGopageValue(pageOptions.length)\r\n    }\r\n\r\n    const uniqueValues = [...new Set(selectedValues)];\r\n\r\n\r\n    const handleCheckboxChange = (event, value) => {\r\n        if (event.target.checked) {\r\n            setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n        } else {\r\n            setSelectedValues((prevSelectedValues) =>\r\n                prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pre = userRole?.map((item) => item._id)\r\n        setSelectedValues(pre)\r\n    }, [userModal])\r\n\r\n\r\n    const addUser = async () => {\r\n        const response = await putApi(`api/role-access/assignedUsers/${_id}`, uniqueValues)\r\n        if (response.status === 200) {\r\n            setUserModal(false)\r\n            fetchData()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal onClose={() => setUserModal(false)} isOpen={userModal} isCentered size={\"4xl\"} style={{ height: \"560px\" }}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>\r\n                    <Flex justifyContent={'space-between'}>\r\n                        <Text>Users</Text>\r\n                        <ModalCloseButton mt='2' />\r\n                    </Flex>\r\n                </ModalHeader>\r\n                <ModalBody overflowY={\"auto\"} height={\"400px\"}>\r\n                    <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\r\n                        <Thead>\r\n                            {headerGroups?.map((headerGroup, index) => (\r\n                                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                                    {headerGroup.headers?.map((column, index) => (\r\n                                        <Th\r\n                                            {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                                            pe=\"10px\"\r\n                                            key={index}\r\n                                            borderColor={borderColor}\r\n                                        >\r\n\r\n                                            <Flex\r\n                                                align=\"center\"\r\n                                                justifyContent={column.center ? \"center\" : \"start\"}\r\n                                                fontSize={{ sm: \"14px\", lg: \"16px\" }}\r\n                                                color=\" secondaryGray.900\"\r\n                                            >\r\n                                                <span style={{\r\n                                                    textTransform: \"capitalize\",\r\n                                                    //  marginRight: \"8px\"\r\n                                                }}>\r\n                                                    {column.render(\"Header\")}\r\n                                                </span>\r\n                                                {column.isSortable !== false && (\r\n                                                    <span>\r\n                                                        {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                                                    </span>\r\n                                                )}\r\n                                            </Flex>\r\n                                        </Th>\r\n                                    ))}\r\n                                </Tr>\r\n                            ))}\r\n                        </Thead>\r\n                        <Tbody {...getTableBodyProps()}>\r\n                            {isLoding ?\r\n                                <Tr>\r\n                                    <Td colSpan={columns?.length}>\r\n                                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                            <Spinner />\r\n                                        </Flex>\r\n                                    </Td>\r\n                                </Tr>\r\n                                : data?.length === 0 ? (\r\n                                    <Tr>\r\n                                        <Td colSpan={columns.length}>\r\n                                            <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                <DataNotFound />\r\n                                            </Text>\r\n                                        </Td>\r\n                                    </Tr>\r\n                                ) : page?.map((row, i) => {\r\n                                    prepareRow(row);\r\n                                    return (\r\n                                        <Tr {...row?.getRowProps()} key={i}>\r\n                                            {row?.cells?.map((cell, index) => {\r\n                                                let data = \"\";\r\n                                                if (cell?.column.Header === \"#\") {\r\n                                                    data = (\r\n                                                        <Flex align=\"center\" >\r\n                                                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />\r\n                                                            <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                                {cell?.row?.index + 1}\r\n                                                            </Text>\r\n                                                        </Flex>\r\n                                                    );\r\n                                                } else if (cell?.column.Header === \"email Id\") {\r\n                                                    data = (\r\n                                                        <Text\r\n                                                            me=\"10px\"\r\n                                                            color={textColor}\r\n                                                            fontSize=\"sm\"\r\n                                                            fontWeight=\"700\"\r\n                                                        >\r\n                                                            {cell?.value}\r\n                                                        </Text>\r\n                                                    );\r\n                                                } else if (cell?.column.Header === \"first Name\") {\r\n                                                    data = (\r\n                                                        <Text\r\n                                                            me=\"10px\"\r\n                                                            color={textColor}\r\n                                                            fontSize=\"sm\"\r\n                                                            fontWeight=\"700\"\r\n                                                        >\r\n                                                            {cell?.value ? cell?.value : ' - '}\r\n                                                        </Text>\r\n                                                    );\r\n                                                } else if (cell?.column.Header === \"last Name\") {\r\n                                                    data = (\r\n                                                        <Text\r\n                                                            me=\"10px\"\r\n                                                            color={textColor}\r\n                                                            fontSize=\"sm\"\r\n                                                            fontWeight=\"700\"\r\n                                                        >\r\n                                                            {cell?.value ? cell?.value : ' - '}\r\n                                                        </Text>\r\n                                                    );\r\n                                                } else if (cell?.column.Header === \"role\") {\r\n                                                    data = (\r\n                                                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                            {cell?.value}\r\n                                                        </Text>\r\n                                                    );\r\n                                                }\r\n                                                return (\r\n                                                    <Td\r\n                                                        {...cell?.getCellProps()}\r\n                                                        key={index}\r\n                                                        fontSize={{ sm: \"14px\" }}\r\n                                                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                                                        borderColor=\"transparent\"\r\n                                                    >\r\n                                                        {data}\r\n                                                    </Td>\r\n                                                );\r\n                                            })}\r\n                                        </Tr>\r\n                                    );\r\n                                })}\r\n                        </Tbody>\r\n                    </Table>\r\n                    {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant=\"brand\" size=\"sm\" onClick={() => { addUser(); setOpenUser(true) }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button size=\"sm\"\r\n                        onClick={() => { setUserModal(false); setSelectedValues([]); setOpenUser(true) }}\r\n                        variant=\"outline\"\r\n                        colorScheme=\"red\"\r\n                        sx={{\r\n                            marginLeft: 2,\r\n                            textTransform: \"capitalize\",\r\n                        }}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default RoleUser","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Flex,\r\n  Text,\r\n  Td,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport RoleUser from \"./roleUser\";\r\nimport { getApi } from \"services/api\";\r\nimport DataNotFound from \"components/notFoundData\";\r\n\r\nfunction UserModal(props) {\r\n  const {\r\n    tableData,\r\n    columnsData,\r\n    isOpen,\r\n    _id,\r\n    setRoleModal,\r\n    setOpenUser,\r\n    fetchData,\r\n  } = props;\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const [selectedValues, setSelectedValues] = useState([]);\r\n  const [isLoding, setIsLoding] = useState(false);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const [userModal, setUserModal] = useState(false);\r\n  const [userData, setUserData] = useState([]);\r\n  const [gopageValue, setGopageValue] = useState();\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (event.target.checked) {\r\n      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n    } else {\r\n      setSelectedValues((prevSelectedValues) =>\r\n        prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n      );\r\n    }\r\n  };\r\n\r\n  const userFetchData = async () => {\r\n    let result = await getApi('api/user/?role=user');\r\n    setUserData(result?.data?.user);\r\n  }\r\n\r\n  useEffect(() => {\r\n    userFetchData()\r\n  }, [])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Modal onClose={() => setOpenUser(false)} isOpen={isOpen} isCentered size={\"4xl\"} style={{ height: \"560px\" }}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader height={\"580px\"} >\r\n            <Flex justifyContent={'space-between'}>\r\n              <Text>Users</Text>\r\n              <Button variant=\"brand\" size=\"sm\" me={'2rem'} onClick={() => { setOpenUser(false); setUserModal(true) }}>Manage Users</Button>\r\n              <ModalCloseButton mt='2' />\r\n            </Flex>\r\n          </ModalHeader>\r\n          <ModalBody overflow={\"auto\"} height={\"400px\"}>\r\n            <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\r\n              <Thead>\r\n                {headerGroups?.map((headerGroup, index) => (\r\n                  <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                    {headerGroup.headers?.map((column, index) => (\r\n                      <Th\r\n                        {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                        pe=\"10px\"\r\n                        key={index}\r\n                        borderColor={borderColor}\r\n                      >\r\n\r\n                        <Flex\r\n                          align=\"center\"\r\n                          justifyContent={column.center ? \"center\" : \"start\"}\r\n                          fontSize={{ sm: \"14px\", lg: \"16px\" }}\r\n                          color=\" secondaryGray.900\"\r\n                        >\r\n                          <span style={{\r\n                            textTransform: \"capitalize\",\r\n                          }}>\r\n                            {column.render(\"Header\")}\r\n                          </span>\r\n                          {column.isSortable !== false && (\r\n                            <span>\r\n                              {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                            </span>\r\n                          )}\r\n                        </Flex>\r\n                      </Th>\r\n                    ))}\r\n                  </Tr>\r\n                ))}\r\n              </Thead>\r\n              <Tbody {...getTableBodyProps()}>\r\n                {isLoding ?\r\n                  <Tr>\r\n                    <Td colSpan={columns?.length}>\r\n                      <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                        <Spinner />\r\n                      </Flex>\r\n                    </Td>\r\n                  </Tr>\r\n                  : data?.length === 0 ? (\r\n                    <Tr>\r\n                      <Td colSpan={columns.length}>\r\n                        <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          <DataNotFound />\r\n                        </Text>\r\n                      </Td>\r\n                    </Tr>\r\n                  ) : page?.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                      <Tr {...row?.getRowProps()} key={i}>\r\n                        {row?.cells?.map((cell, index) => {\r\n                          let data = \"\";\r\n                          if (cell?.column.Header === \"#\") {\r\n                            data = (\r\n                              <Flex align=\"center\" >\r\n                                <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                  {cell?.row?.index + 1}\r\n                                </Text>\r\n                              </Flex>\r\n                            );\r\n                          } else if (cell?.column.Header === \"email Id\") {\r\n                            data = (\r\n                              <Text\r\n                                me=\"10px\"\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"first Name\") {\r\n                            data = (\r\n                              <Text\r\n                                me=\"10px\"\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? cell?.value : ' - '}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"last Name\") {\r\n                            data = (\r\n                              <Text\r\n                                me=\"10px\"\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? cell?.value : ' - '}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"role\") {\r\n                            data = (\r\n                              <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                {cell?.value}\r\n                              </Text>\r\n                            );\r\n                          }\r\n                          return (\r\n                            <Td\r\n                              {...cell?.getCellProps()}\r\n                              key={index}\r\n                              fontSize={{ sm: \"14px\" }}\r\n                              minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                              borderColor=\"transparent\"\r\n                            >\r\n                              {data}\r\n                            </Td>\r\n                          );\r\n                        })}\r\n                      </Tr>\r\n                    );\r\n                  })}\r\n              </Tbody>\r\n            </Table>\r\n            {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button size=\"sm\"\r\n              onClick={() => { setOpenUser(false); setRoleModal(true) }}\r\n              variant=\"outline\"\r\n              colorScheme=\"red\"\r\n              sx={{\r\n                marginLeft: 2,\r\n                textTransform: \"capitalize\",\r\n              }}\r\n            >\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <RoleUser fetchData={fetchData} userModal={userModal} setOpenUser={setOpenUser} _id={_id} setUserModal={setUserModal} userFetchData={userFetchData} userRole={tableData} tableData={userData} columnsData={columnsData} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserModal;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Flex,\r\n  Text,\r\n  Td,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport ChangeAccess from \"../changeAccess\";\r\nimport UserModal from \"./userModal\";\r\nimport { getApi } from \"services/api\";\r\nimport DataNotFound from \"components/notFoundData\";\r\n\r\nfunction RoleModal(props) {\r\n  const {\r\n    name,\r\n    tableData,\r\n    fetchData,\r\n    columnsData,\r\n    isOpen,\r\n    accessRole,\r\n    setAction,\r\n    setAccess,\r\n    _id,\r\n    setAccessRole,\r\n    onOpen,\r\n    setRoleModal,\r\n  } = props;\r\n\r\n  const tableColumns = [\r\n    {\r\n      Header: \"#\",\r\n      accessor: \"_id\",\r\n      isSortable: false,\r\n      width: 10\r\n    },\r\n    { Header: 'email Id', accessor: 'username' },\r\n    { Header: \"first Name\", accessor: \"firstName\", },\r\n    { Header: \"last Name\", accessor: \"lastName\", },\r\n    { Header: \"role\", accessor: \"role\", },\r\n  ];\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const [isLoding, setIsLoding] = useState(false);\r\n\r\n  const [editModal, setEditModal] = useState(false);\r\n  const [openUser, setOpenUser] = useState();\r\n  const [gopageValue, setGopageValue] = useState();\r\n  const data = useMemo(() => accessRole, [accessRole]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  const [userdata, setUserData] = useState([]);\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0 },\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n\r\n  const {\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    pageOptions,\r\n    state: { pageIndex, pageSize },\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length);\r\n  }\r\n  const userFetchData = async () => {\r\n    if (_id) {\r\n      let result = await getApi('api/role-access/assignedUsers/', _id);\r\n      setUserData(result?.data);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    userFetchData()\r\n  }, [_id])\r\n\r\n  return (\r\n    <>\r\n      <Modal onClose={() => setRoleModal(false)} isOpen={isOpen} isCentered size={\"xl\"}>\r\n        <ModalOverlay />\r\n        <ModalContent height={\"580px\"} maxWidth={\"2xl\"}>\r\n          <ModalHeader>\r\n            <Flex justifyContent={'space-between'}>\r\n              <Text textTransform={\"capitalize\"}>{name} Access</Text>\r\n              <Text style={{\r\n                marginRight: \"25px\",\r\n                fontSize: \"15px\",\r\n                fontWeight: \"700\",\r\n                marginTop: '5px',\r\n                color: 'blue',\r\n                cursor: 'pointer',\r\n                textDecoration: 'underline'\r\n              }} onClick={() => { setOpenUser(true); setRoleModal(false); }}>View user's in {name} role</Text>\r\n              <ModalCloseButton mt='2' />\r\n            </Flex>\r\n          </ModalHeader>\r\n          <ModalBody overflow={\"auto\"} height={\"400px\"}>\r\n            <Table>\r\n              <Thead>\r\n                {headerGroups?.map((headerGroup, index) => (\r\n                  <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                    {headerGroup.headers?.map((column, index) => (\r\n                      <Th\r\n                        sx={{ width: \"10px\" }}\r\n                        key={index}\r\n                        borderColor={borderColor}\r\n                        display={column.display === false && \"none\"}\r\n                      >\r\n                      \r\n                        {column.display !== false && column.render(\"Header\")}\r\n                      </Th>\r\n                    ))}\r\n                  </Tr>\r\n                ))}\r\n              </Thead>\r\n              <Tbody {...getTableBodyProps()}>\r\n                {isLoding ? (\r\n                  <Tr>\r\n                    <Td colSpan={columns?.length}>\r\n                      <Flex\r\n                        justifyContent={\"center\"}\r\n                        alignItems={\"center\"}\r\n                        width=\"100%\"\r\n                        color={textColor}\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"700\"\r\n                      >\r\n                        <Spinner />\r\n                      </Flex>\r\n                    </Td>\r\n                  </Tr>\r\n                ) : data?.length === 0 ? (\r\n                  <Tr>\r\n                    <Td colSpan={columns.length}>\r\n                      <Text\r\n                        textAlign={\"center\"}\r\n                        width=\"100%\"\r\n                        color={textColor}\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"700\"\r\n                      >\r\n                        <DataNotFound />\r\n                      </Text>\r\n                    </Td>\r\n                  </Tr>\r\n                ) : (\r\n                  page?.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                      <Tr {...row?.getRowProps()} key={i}>\r\n                        {row?.cells?.map((cell, index) => {\r\n                          let data = \"\";\r\n                          if (cell?.column.Header === \"title\") {\r\n                            data = (\r\n                              <Text\r\n                                me=\"10px\"\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"create\") {\r\n                            data = (\r\n                              <Text\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? 'Yes' : 'No'}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"view\") {\r\n                            data = (\r\n                              <Text\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? 'Yes' : 'No'}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"update\") {\r\n                            data = (\r\n                              <Text\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? 'Yes' : 'No'}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"delete\") {\r\n                            data = (\r\n                              <Text\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? 'Yes' : 'No'}\r\n                              </Text>\r\n                            );\r\n                          }\r\n                          return (\r\n                            <Td\r\n                              {...cell?.getCellProps()}\r\n                              key={index}\r\n                              fontSize={{ sm: \"14px\" }}\r\n                              minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                              borderColor=\"transparent\"\r\n                              sx={{\r\n                                display: cell?.column.Header === \"#\" && \"none\",\r\n                              }}\r\n                            >\r\n                              {data}\r\n                            </Td>\r\n                          );\r\n                        })}\r\n                      </Tr>\r\n                    );\r\n                  })\r\n                )}\r\n              </Tbody>\r\n            </Table>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button variant=\"brand\" size=\"sm\" onClick={() => { setEditModal(true); setRoleModal(false) }}>\r\n              Change Access\r\n            </Button>\r\n            <Button\r\n              size=\"sm\"\r\n              onClick={() => setRoleModal(false)}\r\n              variant=\"outline\"\r\n              colorScheme=\"red\"\r\n              sx={{\r\n                marginLeft: 2,\r\n                textTransform: \"capitalize\",\r\n              }}\r\n            >\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <ChangeAccess tableData={tableData} accessRole={accessRole} setAccessRole={setAccessRole} setAccess={setAccess} setRoleModal={setRoleModal} columnsData={columnsData} _id={_id} fetchData={fetchData} name={name} setEditModal={setEditModal} setAction={setAction} editModal={editModal} />\r\n      <UserModal isOpen={openUser}\r\n        setRoleModal={setRoleModal}\r\n        setOpenUser={setOpenUser}\r\n        onOpen={onOpen}\r\n        columnsData={tableColumns}\r\n        tableData={userdata}\r\n        setAction={setAction}\r\n        _id={_id}\r\n        fetchData={userFetchData}\r\n        userdata={userdata}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RoleModal;\r\n","import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Button, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { postApi } from 'services/api';\r\nimport * as yup from 'yup'\r\n\r\nconst AddRole = (props) => {\r\n    const { onClose, isOpen, setAction } = props;\r\n    const [isLoding, setIsLoding] = useState(false);\r\n\r\n    const initialValues = {\r\n        roleName: '',\r\n        description: '',\r\n    };\r\n\r\n    const validationSchema = yup.object({\r\n        roleName: yup.string().required(\"Role Name is required\"),\r\n        description: yup.string().required(\"Description is required\")\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n            resetForm();\r\n        },\r\n    });\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\r\n\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await postApi('api/role-access/add', values)\r\n            if (response && response.status === 200) {\r\n                onClose(false);\r\n                setAction((pre) => !pre)\r\n            } else {\r\n                toast.error(response.response.data?.message)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} isCentered>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader justifyContent='space-between' display='flex' >\r\n                    Add Role\r\n                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />\r\n                </ModalHeader>\r\n                <ModalBody>\r\n\r\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Role Name<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.roleName}\r\n                                name=\"roleName\"\r\n                                placeholder='Enter Role Name'\r\n                                fontWeight='500'\r\n                                borderColor={errors.roleName && touched.roleName ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' fontSize={'sm'} color={'red'}> {errors.roleName && touched.roleName && errors.roleName}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Description<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.description}\r\n                                name=\"description\"\r\n                                placeholder='Enter Description'\r\n                                fontWeight='500'\r\n                                borderColor={errors.description && touched.description ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' fontSize={'sm'} color={'red'}> {errors.description && touched.description && errors.description}</Text>\r\n                        </GridItem>\r\n                    </Grid>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button size=\"sm\" variant='brand' mr={1} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>\r\n                    <Button size=\"sm\" variant='outline' color={'red'} colorScheme='red' onClick={() => {\r\n                        formik.resetForm()\r\n                        onClose(false)\r\n                    }}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default AddRole\r\n","import { Button, Text, useDisclosure } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getApi } from \"services/api\";\r\nimport CommonCheckTable from \"components/checkTable/checktable\";\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport RoleModal from \"./components/roleModal\";\r\nimport AddRole from \"./Add\";\r\n\r\nconst Index = () => {\r\n  let title = 'Roles'\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [roleModal, setRoleModal] = useState(false);\r\n  const [access, setAccess] = useState([])\r\n  const [roleId, setRoleId] = useState('')\r\n  const [searchboxOutside, setSearchboxOutside] = useState('');\r\n  const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);\r\n  const [displaySearchData, setDisplaySearchData] = useState(false);\r\n  const [accessRole, setAccessRole] = useState([])\r\n  const [roleName, setRoleName] = useState('')\r\n  const [searchedData, setSearchedData] = useState([]);\r\n\r\n  const columns = [\r\n    {\r\n      Header: \"#\",\r\n      accessor: \"_id\",\r\n      isSortable: false,\r\n      width: 10,\r\n      display: false\r\n    },\r\n\r\n    {\r\n      Header: \"Role Name\", accessor: \"roleName\", cell: (cell) => (\r\n        <Text\r\n          me=\"10px\"\r\n          onClick={() => { setRoleModal(true); setRoleName(cell?.value); setRoleId(cell?.row?.original?._id); setAccess(cell?.row?.original?.access); setAccessRole(cell?.row?.original?.access) }}\r\n          color='brand.600'\r\n          sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline', cursor: 'pointer' } }}\r\n          fontSize=\"sm\"\r\n          fontWeight=\"700\"\r\n        >\r\n          {cell?.value}\r\n        </Text>\r\n      )\r\n    },\r\n    { Header: \"Description\", accessor: \"description\" }\r\n  ];\r\n  const rowColumns = [\r\n    {\r\n      Header: \"#\",\r\n      accessor: \"_id\",\r\n      isSortable: false,\r\n      width: 10,\r\n      display: false\r\n    },\r\n\r\n    { Header: \"title\", accessor: \"title\" },\r\n    { Header: \"create\", accessor: \"create\", width: '20px' },\r\n    { Header: \"view\", accessor: \"view\", width: '20px' },\r\n    { Header: \"update\", accessor: \"update\", width: '20px' },\r\n    { Header: \"delete\", accessor: \"delete\", width: '20px' },\r\n  ]\r\n  const [action, setAction] = useState(false);\r\n  const [isLoding, setIsLoding] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const size = \"lg\";\r\n  const navigate = useNavigate()\r\n\r\n\r\n\r\n  const fetchData = async () => {\r\n    setIsLoding(true);\r\n    let result = await getApi(\"api/role-access\");\r\n    setData(result.data);\r\n    setIsLoding(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [action])\r\n\r\n  return (\r\n    <div>\r\n     \r\n      <CommonCheckTable\r\n        title={title}\r\n        isLoding={isLoding}\r\n        columnData={columns}\r\n        dataColumn={columns}\r\n        allData={data}\r\n        tableData={data}\r\n        AdvanceSearch={() => \"\"}\r\n        tableCustomFields={[]}\r\n        searchedDataOut={searchedData}\r\n        searchDisplay={displaySearchData}\r\n        setSearchDisplay={setDisplaySearchData}\r\n        setSearchedDataOut={setSearchedData}\r\n        searchboxOutside={searchboxOutside}\r\n        setSearchboxOutside={setSearchboxOutside}\r\n        BackButton={<Button onClick={() => navigate('/admin-setting')} variant=\"brand\" size=\"sm\" leftIcon={<IoIosArrowBack />} ml={2}>Back</Button>}\r\n        deleteMany={true}\r\n        access={true}\r\n        checkBox={false}\r\n        getTagValuesOutSide={getTagValuesOutSide}\r\n        setGetTagValuesOutside={setGetTagValuesOutside}\r\n        ManageGrid={false}\r\n        onOpen={onOpen}\r\n      />\r\n      <AddRole isOpen={isOpen} size={\"sm\"} setAction={setAction} onClose={onClose} />\r\n      {access && <RoleModal isOpen={roleModal}\r\n        setRoleModal={setRoleModal}\r\n        onOpen={onOpen}\r\n        isLoding={isLoding} columnsData={rowColumns} name={roleName} _id={roleId} tableData={access} accessRole={accessRole} setAccessRole={setAccessRole} setAccess={setAccess} fetchData={fetchData} setAction={setAction} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"],"names":["props","columnsData","name","tableData","fetchData","setAccess","_id","setAccessRole","setRoleModal","editModal","setEditModal","textColor","useColorModeValue","borderColor","columns","useMemo","isLoding","setIsLoding","useState","gopageValue","setGopageValue","data","tableInstance","JSON","parse","localStorage","getItem","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableBodyProps","headerGroups","prepareRow","page","pageOptions","state","pageSize","length","initialValues","roleName","access","formik","useFormik","enableReinitialize","onSubmit","values","_ref","resetForm","EditData","handleSubmit","setFieldValue","handleCheckboxChange","index","fieldName","event","checked","target","updatedAccess","map","item","idx","_objectSpread","async","putApi","concat","status","e","console","log","useEffect","_jsxs","Modal","onClose","isOpen","isCentered","size","children","_jsx","ModalOverlay","ModalContent","height","maxWidth","ModalHeader","textTransform","ModalCloseButton","ModalBody","overflow","Table","Thead","headerGroup","_headerGroup$headers","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","sx","width","pe","display","Flex","justify","align","fontSize","sm","lg","color","render","Tbody","Td","colSpan","justifyContent","alignItems","fontWeight","Spinner","Text","textAlign","DataNotFound","row","i","_row$cells","getRowProps","cells","cell","Header","me","value","_values$access$i","Checkbox","create","defaultChecked","onChange","_values$access$i2","view","_values$access$i3","update","_values$access$i4","delete","getCellProps","minW","md","ModalFooter","Button","variant","onClick","colorScheme","marginLeft","setUserModal","userModal","setOpenUser","userRole","selectedValues","setSelectedValues","getTableProps","canPreviousPage","canNextPage","pageCount","gotoPage","nextPage","previousPage","setPageSize","uniqueValues","Set","pre","style","mt","overflowY","mb","getHeaderProps","isSortable","getSortByToggleProps","center","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","_cell$row","isChecked","includes","prevSelectedValues","filter","selectedValue","Pagination","addUser","userData","setUserData","userFetchData","_result$data","result","getApi","user","_Fragment","RoleUser","accessRole","setAction","onOpen","openUser","userdata","marginRight","marginTop","cursor","textDecoration","ChangeAccess","UserModal","accessor","validationSchema","yup","required","description","AddData","errors","touched","handleBlur","handleChange","response","postApi","_response$response$da","toast","error","message","IconButton","icon","CloseIcon","Grid","templateColumns","gap","GridItem","base","FormLabel","ms","Input","onBlur","placeholder","mr","disabled","Index","useDisclosure","roleModal","roleId","setRoleId","searchboxOutside","setSearchboxOutside","getTagValuesOutSide","setGetTagValuesOutside","displaySearchData","setDisplaySearchData","setRoleName","searchedData","setSearchedData","_cell$row$original","_cell$row2","_cell$row2$original","_cell$row3","_cell$row3$original","original","action","setData","navigate","useNavigate","CommonCheckTable","title","columnData","dataColumn","allData","AdvanceSearch","tableCustomFields","searchedDataOut","searchDisplay","setSearchDisplay","setSearchedDataOut","BackButton","leftIcon","IoIosArrowBack","ml","deleteMany","checkBox","ManageGrid","AddRole","RoleModal"],"sourceRoot":""}