{"version":3,"file":"static/js/563.b50a077c.chunk.js","mappings":"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","sources":["views/admin/lead/Add.js","views/admin/lead/Edit.js","views/admin/lead/View.js"],"sourcesContent":["import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, IconButton } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport { useState } from 'react';\r\nimport { postApi } from 'services/api';\r\nimport { generateValidationSchema } from 'utils';\r\nimport CustomForm from 'utils/customForm';\r\nimport * as yup from 'yup'\r\n\r\nconst Add = (props) => {\r\n    const [isLoding, setIsLoding] = useState(false)\r\n\r\n\r\n    const initialFieldValues = Object.fromEntries(\r\n        (props?.leadData?.fields || []).map(field => [field?.name, ''])\r\n    );\r\n\r\n    const initialValues = {\r\n        ...initialFieldValues,\r\n        createBy: JSON.parse(localStorage.getItem('user'))._id\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: yup.object().shape(generateValidationSchema(props?.leadData?.fields)),\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n        },\r\n    });\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik\r\n\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await postApi('api/form/add', { ...values, moduleId: props?.leadData?._id })\r\n            if (response.status === 200) {\r\n                props.onClose();\r\n                formik.resetForm();\r\n                props.setAction((pre) => !pre)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        formik.resetForm();\r\n        props.onClose()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Drawer isOpen={props.isOpen} size={props.size}>\r\n                <DrawerOverlay />\r\n                <DrawerContent>\r\n                    <DrawerHeader alignItems={\"center\"} justifyContent='space-between' display='flex'  >\r\n                        Add Lead\r\n                        <IconButton onClick={props.onClose} icon={<CloseIcon />} />\r\n                    </DrawerHeader>\r\n                    <DrawerBody>\r\n                        <CustomForm moduleData={props.leadData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />\r\n                    </DrawerBody>\r\n                    <DrawerFooter>\r\n                        <Button sx={{ textTransform: \"capitalize\" }} size=\"sm\" disabled={isLoding ? true : false} variant=\"brand\" type=\"submit\" onClick={handleSubmit}                        >\r\n                            {isLoding ? <Spinner /> : 'Save'}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outline\"\r\n                            colorScheme='red' size=\"sm\"\r\n                            sx={{\r\n                                marginLeft: 2,\r\n                                textTransform: \"capitalize\",\r\n                            }}\r\n                            onClick={handleCancel}\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                    </DrawerFooter>\r\n                </DrawerContent>\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Add\r\n","import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, IconButton } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { putApi } from 'services/api';\r\nimport { getApi } from 'services/api';\r\nimport { generateValidationSchema } from '../../../utils';\r\nimport CustomForm from '../../../utils/customForm';\r\nimport * as yup from 'yup'\r\n\r\nconst Edit = (props) => {\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const initialFieldValues = Object.fromEntries(\r\n        (props?.leadData?.fields || []).map(field => [field?.name, ''])\r\n    );\r\n\r\n    //     // Lead Information:\r\n    //     leadName: '',\r\n    //     leadEmail: '',\r\n    //     leadPhoneNumber: '',\r\n    //     leadAddress: '',\r\n    //     // Lead Source and Details:\r\n    //     leadSource: '',\r\n    //     leadStatus: '',\r\n    //     leadSourceDetails: '',\r\n    //     leadCampaign: '',\r\n    //     leadSourceChannel: '',\r\n    //     leadSourceMedium: '',\r\n    //     leadSourceCampaign: '',\r\n    //     leadSourceReferral: '',\r\n    //     // Lead Assignment and Ownership:\r\n    //     leadAssignedAgent: '',\r\n    //     leadOwner: '',\r\n    //     leadCommunicationPreferences: '',\r\n    //     // Lead Dates and Follow-up:\r\n    //     leadCreationDate: '',\r\n    //     leadConversionDate: '',\r\n    //     leadFollowUpDate: '',\r\n    //     leadFollowUpStatus: '',\r\n    //     // Lead Scoring and Nurturing:\r\n    //     leadScore: '',\r\n    //     leadNurturingWorkflow: '',\r\n    //     leadEngagementLevel: '',\r\n    //     leadConversionRate: '',\r\n    //     leadNurturingStage: '',\r\n    //     leadNextAction: '',\r\n    //     createBy: JSON.parse(localStorage.getItem('user'))._id,\r\n    // });\r\n    const [initialValues, setInitialValues] = useState({\r\n        ...initialFieldValues,\r\n        createBy: JSON.parse(localStorage.getItem('user'))._id\r\n    })\r\n    const param = useParams()\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        enableReinitialize: true,\r\n        validationSchema: yup.object().shape(generateValidationSchema(props?.leadData?.fields)),\r\n        onSubmit: (values, { resetForm }) => {\r\n            EditData();\r\n        },\r\n    });\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik\r\n\r\n    const EditData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await putApi(`api/form/edit/${props?.selectedId || param.id}`, { ...values, moduleId: props.moduleId })\r\n            if (response.status === 200) {\r\n                props.onClose();\r\n                props.setAction((pre) => !pre)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        props.onClose(false)\r\n        props.setSelectedId && props?.setSelectedId()\r\n        formik.resetForm();\r\n    }\r\n\r\n    let response\r\n    const fetchData = async () => {\r\n        if (props?.selectedId || param.id) {\r\n            try {\r\n                setIsLoding(true)\r\n                response = await getApi('api/lead/view/', props?.selectedId ? props?.selectedId : param.id)\r\n                let editData = response?.data?.lead;\r\n                setInitialValues((prev) => ({ ...prev, ...editData }));\r\n            } catch (e) {\r\n                console.error(e)\r\n            } finally {\r\n                setIsLoding(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [props?.selectedId])\r\n\r\n    return (\r\n        <div>\r\n            <Drawer isOpen={props.isOpen} size={props.size}>\r\n                <DrawerOverlay />\r\n                <DrawerContent>\r\n                    <DrawerHeader alignItems={\"center\"} justifyContent='space-between' display='flex' >\r\n                        Edit Lead\r\n                        <IconButton onClick={handleClose} icon={<CloseIcon />} />\r\n                    </DrawerHeader>\r\n                    <DrawerBody>\r\n\r\n                        {isLoding ?\r\n                            <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                                <Spinner />\r\n                            </Flex>\r\n                            :\r\n                            <CustomForm moduleData={props.leadData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />\r\n\r\n                        }\r\n                    </DrawerBody>\r\n\r\n                    <DrawerFooter>\r\n                        <Button\r\n                            sx={{ textTransform: \"capitalize\" }}\r\n                            variant=\"brand\" size=\"sm\"\r\n                            type=\"submit\"\r\n                            disabled={isLoding ? true : false}\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            {isLoding ? <Spinner /> : 'Update'}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outline\"\r\n                            colorScheme='red' size=\"sm\"\r\n                            sx={{\r\n                                marginLeft: 2,\r\n                                textTransform: \"capitalize\",\r\n                            }}\r\n                            onClick={handleClose}\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                    </DrawerFooter>\r\n\r\n                </DrawerContent>\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edit","import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n    Button, Flex, Grid, GridItem, Heading, Menu, MenuButton, MenuDivider, MenuItem, MenuList,\r\n    Tab,\r\n    TabList,\r\n    TabPanel,\r\n    TabPanels,\r\n    Tabs,\r\n    Text,\r\n    VStack,\r\n    useColorModeValue,\r\n    useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport FolderTreeView from 'components/FolderTreeView/folderTreeView';\r\nimport Card from \"components/card/Card\";\r\nimport { HSeparator } from \"components/separator/Separator\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport { constant } from \"constant\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getApi } from \"services/api\";\r\nimport ColumnsTable from \"../contact/components/ColumnsTable\";\r\nimport TaskColumnsTable from \"../task/components/ColumnsTable\";\r\nimport PhoneCall from \"../contact/components/phonCall\";\r\nimport AddEmailHistory from \"../emailHistory/components/AddEmail\";\r\nimport AddMeeting from \"../meeting/components/Addmeeting\";\r\nimport AddPhoneCall from \"../phoneCall/components/AddPhoneCall\";\r\nimport Add from \"./Add\";\r\nimport Edit from \"./Edit\";\r\nimport { HasAccess } from \"../../../redux/accessUtils\";\r\nimport DataNotFound from \"components/notFoundData\";\r\nimport CustomView from \"utils/customView\";\r\nimport AddDocumentModal from \"utils/addDocumentModal\";\r\nimport CommonDeleteModel from \"components/commonDeleteModel\";\r\nimport { deleteApi } from \"services/api\";\r\nimport MeetingColumnsTable from \"../meeting/components/ColumnsTable\";\r\n\r\nconst View = () => {\r\n\r\n    const param = useParams()\r\n\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    const textColor = useColorModeValue(\"gray.500\", \"white\");\r\n\r\n    const [data, setData] = useState()\r\n    const [allData, setAllData] = useState([])\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [edit, setEdit] = useState(false);\r\n    const [deleteModel, setDelete] = useState(false);\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [addMeeting, setMeeting] = useState(false);\r\n    const [showEmail, setShowEmail] = useState(false);\r\n    const [showCall, setShowCall] = useState(false);\r\n    const [showTasks, setShowTasks] = useState(false);\r\n    const [showMeetings, setShowMeetings] = useState(false);\r\n    const [addDocument, setAddDocument] = useState(false);\r\n    const [action, setAction] = useState(false)\r\n    const [leadData, setLeadData] = useState([])\r\n    const navigate = useNavigate();\r\n    const size = \"lg\";\r\n\r\n    const [addEmailHistory, setAddEmailHistory] = useState(false);\r\n    const [addPhoneCall, setAddPhoneCall] = useState(false);\r\n\r\n    const [permission, taskPermission, meetingPermission, callAccess, emailAccess, taskAccess, meetingAccess] = HasAccess(['Leads', 'Tasks', 'Meetings', 'Calls', 'Emails', 'Tasks', 'Meetings']);\r\n\r\n\r\n    const columnsDataColumns = [\r\n        { Header: \"sender\", accessor: \"senderName\", },\r\n        { Header: \"recipient\", accessor: \"createByName\", },\r\n        { Header: \"time stamp\", accessor: \"timestamp\", },\r\n        { Header: \"Created\", accessor: \"createBy\", },\r\n    ];\r\n\r\n    const MeetingColumns = [\r\n        { Header: 'agenda', accessor: 'agenda' },\r\n        { Header: \"date Time\", accessor: \"dateTime\", },\r\n        { Header: \"times tamp\", accessor: \"timestamp\", },\r\n        { Header: \"create By\", accessor: \"createdByName\", },\r\n    ];\r\n    const taskColumns = [\r\n        { Header: 'Title', accessor: 'title' },\r\n        { Header: \"Category\", accessor: \"category\", },\r\n        { Header: \"Assign To\", accessor: \"assignmentToName\", },\r\n        { Header: \"Start Date\", accessor: \"start\", },\r\n        { Header: \"End Date\", accessor: \"end\", },\r\n    ];\r\n\r\n    const download = async (data) => {\r\n        if (data) {\r\n            let result = await getApi(`api/document/download/`, data)\r\n            if (result && result.status === 200) {\r\n                window.open(`${constant.baseUrl}api/document/download/${data}`)\r\n                toast.success('file Download successful')\r\n            } else if (result && result.response.status === 404) {\r\n                toast.error('file Not Found')\r\n            }\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        setIsLoding(true)\r\n        let response = await getApi('api/lead/view/', param.id)\r\n        setData(response.data?.lead);\r\n        setAllData(response.data);\r\n        setIsLoding(false)\r\n    }\r\n\r\n    const handleDeleteLead = async (id) => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await deleteApi('api/lead/delete/', id)\r\n            if (response.status === 200) {\r\n                setDelete(false)\r\n                setAction((pre) => !pre)\r\n                navigate('/lead')\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [action])\r\n\r\n    function toCamelCase(text) {\r\n        return text?.replace(/([a-z])([A-Z])/g, '$1 $2');\r\n    }\r\n\r\n    const fetchCustomData = async () => {\r\n        const response = await getApi('api/custom-field?moduleName=Leads')\r\n        setLeadData(response.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fetchCustomData) fetchCustomData()\r\n    }, [action])\r\n\r\n    return (\r\n        <>\r\n            {isOpen && <Add isOpen={isOpen} size={size} onClose={onClose} setLeadData={setLeadData} leadData={leadData[0]} setAction={setAction} />}\r\n            <Edit isOpen={edit} size={size} onClose={setEdit} setLeadData={setLeadData} leadData={leadData[0]} setAction={setAction} moduleId={leadData?.[0]?._id} />\r\n\r\n            <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type='Lead' handleDeleteData={handleDeleteLead} ids={param.id} />\r\n\r\n            {isLoding ?\r\n                <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                    <Spinner />\r\n                </Flex> :\r\n                <>\r\n                    <Tabs >\r\n                        <Grid templateColumns={'repeat(12, 1fr)'} mb={3} gap={1}>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                <TabList sx={{\r\n                                    border: \"none\",\r\n                                    '& button:focus': { boxShadow: 'none', },\r\n                                    '& button': {\r\n                                        margin: { sm: \"0 3px\", md: \"0 5px\" }, padding: { sm: \"5px\", md: \"8px\" }, border: '2px solid #8080803d', borderTopLeftRadius: \"10px\", borderTopRightRadius: \"10px\", borderBottom: 0, fontSize: { sm: \"12px\", md: \"16px\" }\r\n                                    },\r\n                                    '& button[aria-selected=\"true\"]': {\r\n                                        border: \"2px solid brand.200\", borderBottom: 0, zIndex: '0'\r\n                                    },\r\n                                }} >\r\n                                    <Tab>Information</Tab>\r\n                                    {(emailAccess?.view || callAccess?.view || taskAccess?.view || meetingAccess?.view) && <Tab> Communication</Tab>}\r\n                                    <Tab>Document</Tab>\r\n                                </TabList>\r\n\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} mt={{ sm: \"3px\", md: \"5px\" }} >\r\n                                <Flex justifyContent={\"right\"}>\r\n                                    <Menu>\r\n                                        {(user.role === 'superAdmin' || (permission?.create || permission?.update || permission?.delete)) && <MenuButton size=\"sm\" variant=\"outline\" colorScheme='blackAlpha' mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>\r\n                                            Actions\r\n                                        </MenuButton>}\r\n                                        <MenuDivider />\r\n                                        <MenuList minWidth={2}>\r\n                                            {(user.role === 'superAdmin' || permission?.create) && <MenuItem color={'blue'} onClick={() => onOpen()} alignItems={\"start\"} icon={<AddIcon />}>Add</MenuItem>}\r\n                                            {(user.role === 'superAdmin' || permission?.update) && <MenuItem onClick={() => setEdit(true)} alignItems={\"start\"} icon={<EditIcon />}>Edit</MenuItem>}\r\n                                            {(user.role === 'superAdmin' || permission?.delete) && <>\r\n                                                <MenuDivider />\r\n                                                <MenuItem alignItems={\"start\"} color={'red'} onClick={() => setDelete(true)} icon={<DeleteIcon />}>Delete</MenuItem>\r\n                                            </>}\r\n                                        </MenuList>\r\n                                    </Menu>\r\n                                    <Link to=\"/lead\">\r\n                                        <Button leftIcon={<IoIosArrowBack />} size='sm' variant=\"brand\">\r\n                                            Back\r\n                                        </Button>\r\n                                    </Link>\r\n                                </Flex>\r\n                            </GridItem>\r\n                        </Grid>\r\n\r\n                        <TabPanels>\r\n                            <TabPanel pt={4} p={0}>\r\n                                <CustomView data={leadData[0]} fieldData={data} toCamelCase={toCamelCase} />\r\n                            </TabPanel>\r\n                            <TabPanel pt={4} p={0}>\r\n                                <GridItem colSpan={{ base: 4 }} >\r\n                                    <Grid overflow={'hidden'} templateColumns={{ base: \"1fr\" }} gap={4}>\r\n                                        <Grid templateColumns={'repeat(12, 1fr)'} gap={4}>\r\n                                            {emailAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                                <Card >\r\n                                                    <ColumnsTable fetchData={fetchData} viewData={allData} emailAccess={emailAccess} columnsData={columnsDataColumns} lead='true' tableData={showEmail ? allData.Email : allData?.Email?.length > 0 ? [allData.Email[0]] : []} title={'Email '} />\r\n\r\n                                                    <AddEmailHistory viewData={allData} fetchData={fetchData} isOpen={addEmailHistory} onClose={setAddEmailHistory} data={data?.contact} setAction={setAction} lead='true' id={param.id} />\r\n                                                    {allData.Email?.length > 1 &&\r\n                                                        <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                                                            <Button size=\"sm\" colorScheme=\"brand\" variant=\"outline\" display=\"flex\" justifyContant=\"end\" onClick={() => showEmail ? setShowEmail(false) : setShowEmail(true)}>{showEmail ? \"Show less\" : \"Show more\"}</Button>\r\n                                                        </div>}\r\n                                                </Card>\r\n                                            </GridItem>}\r\n                                            {callAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                                <Card>\r\n                                                    <PhoneCall callAccess={callAccess} fetchData={fetchData} columnsData={columnsDataColumns} lead='true' tableData={showCall ? allData?.phoneCall : allData?.phoneCall?.length > 0 ? [allData?.phoneCall[0]] : []} title={'Call '} />\r\n                                                    {allData?.phoneCall?.length > 1 && <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                                                        <Button size=\"sm\" colorScheme=\"brand\" variant=\"outline\" display=\"flex\" justifyContant=\"end\" onClick={() => showCall ? setShowCall(false) : setShowCall(true)}>{showCall ? \"Show less\" : \"Show more\"}</Button>\r\n                                                    </div>}\r\n                                                    <AddPhoneCall viewData={allData} fetchData={fetchData} isOpen={addPhoneCall} onClose={setAddPhoneCall} setAction={setAction} data={data?.contact} id={param.id} lead='true' />\r\n                                                </Card>\r\n                                            </GridItem>}\r\n                                            {taskAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                                <Card >\r\n                                                    <TaskColumnsTable fetchData={fetchData} columnsData={taskColumns} lead='true' tableData={showTasks ? allData?.task : allData?.task?.length > 0 ? [allData?.task[0]] : []} title={'Task '} action={action} setAction={setAction} access={taskAccess} />\r\n                                                    {\r\n                                                        allData?.task?.length > 1 && <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                                                            <Button size=\"sm\" colorScheme=\"brand\" variant=\"outline\" display=\"flex\" justifyContant=\"end\" onClick={() => showTasks ? setShowTasks(false) : setShowTasks(true)}>{showTasks ? \"Show less\" : \"Show more\"}</Button>\r\n                                                        </div>}\r\n                                                </Card>\r\n                                            </GridItem>}\r\n                                            {/* {meetingAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                                    <Card>\r\n                                                        {\r\n                                                            allData?.meeting?.length > 1 && <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                                                                <Button size=\"sm\" colorScheme=\"brand\" variant=\"outline\" display=\"flex\" justifyContant=\"end\" onClick={() => showMeetings ? setShowMeetings(false) : setShowMeetings(true)}>{showMeetings ? \"Show less\" : \"Show more\"}</Button>\r\n                                                            </div>}\r\n                                                        {addMeeting && <AddMeeting fetchData={fetchData} isOpen={addMeeting} onClose={setMeeting} from=\"lead\" id={param.id} setAction={setAction} />}                                                    </Card>\r\n                                                </GridItem>} */}\r\n                                            {meetingAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                                <Card overflow={'scroll'}>\r\n                                                    <MeetingColumnsTable fetchData={fetchData} columnsData={MeetingColumns} tableData={showMeetings ? allData?.meeting : allData?.meeting?.length > 0 ? [allData?.meeting[0]] : []} title={'Meeting '} action={action} setAction={setAction} access={meetingAccess} />\r\n                                                    <AddMeeting fetchData={fetchData} isOpen={addMeeting} onClose={setMeeting} from=\"contact\" id={param.id} setAction={setAction} />\r\n                                                    {allData?.meetingHistory?.length > 1 && <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                                                        <Button colorScheme=\"brand\" size='sm' variant=\"outline\" display=\"flex\" justifyContant=\"end\" onClick={() => showMeetings ? setShowMeetings(false) : setShowMeetings(true)}>{showMeetings ? \"Show less\" : \"Show more\"}</Button>\r\n                                                    </div>}\r\n                                                </Card>\r\n                                            </GridItem>}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </GridItem>\r\n                            </TabPanel>\r\n                            <TabPanel pt={4} p={0}>\r\n                                <GridItem colSpan={{ base: 4 }} >\r\n                                    <Card minH={'50vh'} >\r\n                                        <Flex alignItems={'center'} justifyContent={'space-between'} mb='2'>\r\n                                            <Heading size=\"md\" mb={3}>\r\n                                                Documents\r\n                                            </Heading>\r\n                                            <Button leftIcon={<AddIcon />} size='sm' variant='brand' onClick={() => setAddDocument(true)}>Add Document</Button>\r\n                                        </Flex>\r\n                                        <AddDocumentModal addDocument={addDocument} setAddDocument={setAddDocument} linkId={param.id} from=\"lead\" setAction={setAction} />\r\n                                        <HSeparator />\r\n                                        <VStack mt={4} alignItems=\"flex-start\">\r\n                                            {allData?.Document?.length > 0 ? allData?.Document?.map((item) => (\r\n                                                <FolderTreeView name={item.folderName} item={item}>\r\n                                                    {item?.files?.map((file) => (\r\n                                                        <FolderTreeView download={download} data={file} name={file.fileName} isFile from=\"lead\" />\r\n                                                    ))}\r\n                                                </FolderTreeView>\r\n                                            )) : <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                <DataNotFound />\r\n                                            </Text>}\r\n                                        </VStack>\r\n                                    </Card>\r\n                                </GridItem>\r\n                            </TabPanel>\r\n\r\n                        </TabPanels>\r\n                    </Tabs>\r\n                    {(user.role === 'superAdmin' || (permission?.update || permission?.delete)) && <Card mt={3}>\r\n                        <Grid templateColumns=\"repeat(6, 1fr)\" gap={1}>\r\n                            <GridItem colStart={6} >\r\n                                <Flex justifyContent={\"right\"}>\r\n                                    {(user.role === 'superAdmin' || permission?.update) ? <Button size='sm' onClick={() => setEdit(true)} leftIcon={<EditIcon />} mr={2.5} variant=\"outline\" colorScheme=\"green\">Edit</Button> : ''}\r\n                                    {(user.role === 'superAdmin' || permission?.delete) ? <Button size='sm' style={{ background: 'red.800' }} onClick={() => setDelete(true)} leftIcon={<DeleteIcon />} colorScheme=\"red\" >Delete</Button> : ''}\r\n                                </Flex>\r\n                            </GridItem>\r\n                        </Grid>\r\n                    </Card>\r\n                    }\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default View;\r\n"],"names":["props","_props$leadData","_props$leadData2","isLoding","setIsLoding","useState","initialFieldValues","Object","fromEntries","leadData","fields","map","field","name","initialValues","_objectSpread","createBy","JSON","parse","localStorage","getItem","_id","formik","useFormik","validationSchema","yup","shape","generateValidationSchema","onSubmit","values","_ref","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","_props$leadData3","postApi","moduleId","status","onClose","setAction","pre","e","console","log","_jsx","children","_jsxs","Drawer","isOpen","size","DrawerOverlay","DrawerContent","DrawerHeader","alignItems","justifyContent","display","IconButton","onClick","icon","CloseIcon","DrawerBody","CustomForm","moduleData","DrawerFooter","Button","sx","textTransform","disabled","variant","type","Spinner","colorScheme","marginLeft","handleCancel","setInitialValues","param","useParams","enableReinitialize","EditData","putApi","concat","selectedId","id","handleClose","setSelectedId","response","useEffect","_response","_response$data","getApi","editData","data","lead","prev","error","fetchData","Flex","width","View","_leadData$","_allData$Email","_allData$Email2","_allData$phoneCall","_allData$phoneCall2","_allData$task","_allData$task2","_allData$meeting","_allData$meetingHisto","_allData$Document","_allData$Document2","user","textColor","useColorModeValue","setData","allData","setAllData","onOpen","useDisclosure","edit","setEdit","deleteModel","setDelete","addMeeting","setMeeting","showEmail","setShowEmail","showCall","setShowCall","showTasks","setShowTasks","showMeetings","setShowMeetings","addDocument","setAddDocument","action","setLeadData","navigate","useNavigate","addEmailHistory","setAddEmailHistory","addPhoneCall","setAddPhoneCall","permission","taskPermission","meetingPermission","callAccess","emailAccess","taskAccess","meetingAccess","HasAccess","columnsDataColumns","Header","accessor","download","result","window","open","constant","baseUrl","toast","success","fetchCustomData","_Fragment","Add","Edit","CommonDeleteModel","handleDeleteData","deleteApi","ids","Tabs","Grid","templateColumns","mb","gap","GridItem","colSpan","base","md","TabList","border","boxShadow","margin","sm","padding","borderTopLeftRadius","borderTopRightRadius","borderBottom","fontSize","zIndex","Tab","view","mt","Menu","role","create","update","delete","MenuButton","mr","as","rightIcon","ChevronDownIcon","MenuDivider","MenuList","minWidth","MenuItem","color","AddIcon","EditIcon","DeleteIcon","Link","to","leftIcon","IoIosArrowBack","TabPanels","TabPanel","pt","p","CustomView","fieldData","toCamelCase","text","replace","overflow","Card","ColumnsTable","viewData","columnsData","tableData","Email","length","title","AddEmailHistory","contact","style","justifyContant","PhoneCall","phoneCall","AddPhoneCall","TaskColumnsTable","task","access","MeetingColumnsTable","meeting","AddMeeting","from","meetingHistory","minH","Heading","AddDocumentModal","linkId","HSeparator","VStack","Document","item","_item$files","FolderTreeView","folderName","files","file","fileName","isFile","Text","textAlign","fontWeight","DataNotFound","colStart","background"],"sourceRoot":""}