{"version":3,"file":"static/js/376.ce154861.chunk.js","mappings":"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","sources":["components/commonTableModel/Contact.js","components/commonTableModel/ContactModel.js","components/commonTableModel/Lead.js","components/commonTableModel/LeadModel.js","views/admin/task/components/addTask.js","views/admin/task/components/editTask.js"],"sourcesContent":["import {\r\n  Box, Checkbox,\r\n  Flex, Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useMemo, useState } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport { GrFormNext, GrFormPrevious } from \"react-icons/gr\";\r\n\r\n// Custom components\r\nimport Card from \"components/card/Card\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\n\r\nexport default function ContactTable(props) {\r\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\r\n\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (type === \"multi\") {\r\n      if (event.target.checked) {\r\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n      } else {\r\n        setSelectedValues((prevSelectedValues) =>\r\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n        );\r\n      }\r\n    } else {\r\n      if (event.target.checked) {\r\n        setSelectedValues(value);\r\n      } else {\r\n        setSelectedValues(null);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Card\r\n      direction='column'\r\n      w='100%'\r\n      px='0px'\r\n      style={{ border: '1px solid gray.200' }}\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\r\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\r\n        <Text\r\n          color={textColor}\r\n          fontSize='22px'\r\n          fontWeight='700'\r\n          lineHeight='100%'>\r\n          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)\r\n        </Text>\r\n      </Flex>\r\n      <Box overflowY={'auto'} className=\"table-container-property\" >\r\n        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\r\n          <Thead zIndex={1}>\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers.map((column, index) => (\r\n\r\n                  <Th\r\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                    pe=\"10px\"\r\n                    key={index}\r\n                    borderColor={borderColor}\r\n                  >\r\n                    <Flex\r\n                      align=\"center\"\r\n                      justifyContent={column.center ? \"center\" : \"start\"}\r\n                      fontSize={{ sm: \"14px\", lg: \"16px\" }}\r\n                      color=\" secondaryGray.900\"\r\n                    >\r\n                      <span style={{ textTransform: \"capitalize\", marginRight: \"8px\" }}>\r\n                        {column.render(\"Header\")}\r\n                      </span>\r\n\r\n                      {column.isSortable !== false && (\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                        </span>\r\n                      )}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody  {...getTableBodyProps()}>\r\n            {data?.length === 0 && (\r\n              <Tr>\r\n                <Td colSpan={columns.length}>\r\n                  <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                    -- No Data Found --\r\n                  </Text>\r\n                </Td>\r\n              </Tr>\r\n            )}\r\n            {page?.map((row, index) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Tr {...row?.getRowProps()} key={index}>\r\n                  {row?.cells?.map((cell, index) => {\r\n                    let data = \"\";\r\n                    if (cell?.column.Header === \"#\") {\r\n                      data = (\r\n                        <Flex align=\"center\">\r\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\r\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.row?.index + 1}\r\n                          </Text>\r\n                        </Flex>\r\n                      );\r\n                    } else if (cell?.column.Header === \"title\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"first Name\") {\r\n                      data = (\r\n                        // <Link to={`/contactView/${cell?.row?.original._id}`}>\r\n                        <Text\r\n                          me=\"10px\"\r\n                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                        // </Link>\r\n                      );\r\n                    } else if (cell?.column.Header === \"last Name\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"phone Number\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Email Address\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"physical Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"mailing Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Contact Method\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Td\r\n                        {...cell?.getCellProps()}\r\n                        key={index}\r\n                        fontSize={{ sm: \"14px\" }}\r\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                        borderColor='transparent'>\r\n                        {data}\r\n                      </Td>\r\n                    );\r\n                  })}\r\n                </Tr>\r\n              );\r\n            })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card>\r\n  );\r\n}\r\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\r\nimport React, { useState } from 'react'\r\nimport ContactTable from './Contact.js'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { GiClick } from \"react-icons/gi\";\r\n\r\nconst ContactModel = (props) => {\r\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\r\n    const [selectedValues, setSelectedValues] = useState();\r\n    const [isLoding, setIsLoding] = useState(false)\r\n\r\n    const columns = [\r\n        { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n        { Header: 'title', accessor: 'title' },\r\n        { Header: \"first Name\", accessor: \"firstName\", },\r\n        { Header: \"last Name\", accessor: \"lastName\", },\r\n        { Header: \"phone Number\", accessor: \"phoneNumber\", },\r\n        { Header: \"Email Address\", accessor: \"email\", },\r\n        { Header: \"physical Address\", accessor: \"physicalAddress\", },\r\n        { Header: \"mailing Address\", accessor: \"mailingAddress\", },\r\n        { Header: \"Contact Method\", accessor: \"preferredContactMethod\", },\r\n    ];\r\n\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n   \r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            setFieldValue(fieldName, selectedValues)\r\n            onClose()\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Select Contact</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex> : <ContactTable tableData={data} selectedValues={selectedValues} setSelectedValues={setSelectedValues} columnsData={columns} title=\"Contact\" />}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size='sm' me={2} onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>\r\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ContactModel\r\n","import {\r\n  Box, Checkbox,\r\n  Flex, Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\n\r\n// Custom components\r\nimport Card from \"components/card/Card\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\n\r\nexport default function LeadTable(props) {\r\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\r\n\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (type === \"multi\") {\r\n      if (event.target.checked) {\r\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n      } else {\r\n        setSelectedValues((prevSelectedValues) =>\r\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n        );\r\n      }\r\n    } else {\r\n      if (event.target.checked) {\r\n        setSelectedValues(value);\r\n      } else {\r\n        setSelectedValues(null);\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n\r\n  return (\r\n    <Card\r\n      direction='column'\r\n      w='100%'\r\n      px='0px'\r\n      style={{ border: '1px solid gray.200' }}\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\r\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\r\n        <Text\r\n          color={textColor}\r\n          fontSize='22px'\r\n          fontWeight='700'\r\n          lineHeight='100%'>\r\n          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)\r\n        </Text>\r\n      </Flex>\r\n      <Box overflowY={'auto'} className=\"table-container-property\" >\r\n        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\r\n          <Thead zIndex={1}>\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers.map((column, index) => (\r\n                  <Th\r\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                    pe=\"10px\"\r\n                    key={index}\r\n                    borderColor={borderColor}\r\n                  >\r\n                    <Flex\r\n                      align=\"center\"\r\n                      justifyContent={column.center ? \"center\" : \"start\"}\r\n                      fontSize={{ sm: \"14px\", lg: \"16px\" }}\r\n                      color=\" secondaryGray.900\"\r\n                    >\r\n                      <span style={{ textTransform: \"capitalize\", marginRight: \"8px\" }}>\r\n                        {column.render(\"Header\")}\r\n                      </span>\r\n\r\n                      {column.isSortable !== false && (\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                        </span>\r\n                      )}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody  {...getTableBodyProps()}>\r\n            {data?.length === 0 && (\r\n              <Tr>\r\n                <Td colSpan={columns.length}>\r\n                  <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                    -- No Data Found --\r\n                  </Text>\r\n                </Td>\r\n              </Tr>\r\n            )}\r\n            {page?.map((row, index) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Tr {...row?.getRowProps()} key={index}>\r\n                  {row?.cells?.map((cell, index) => {\r\n                    let data = \"\";\r\n                    if (cell?.column.Header === \"#\") {\r\n                      data = (\r\n                        <Flex align=\"center\">\r\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\r\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.row?.index + 1}\r\n                          </Text>\r\n                        </Flex>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Name\") {\r\n                      data = (\r\n                        // <Link to={user?.role !== 'superAdmin' ? `/leadView/${cell?.row?.values._id}` : `/admin/leadView/${cell?.row?.values._id}`}>\r\n                        <Text\r\n                          me=\"10px\"\r\n                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                        // </Link>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Email\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead PhoneNumber\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Status\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Owner\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Score\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Td\r\n                        {...cell?.getCellProps()}\r\n                        key={index}\r\n                        fontSize={{ sm: \"14px\" }}\r\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                        borderColor='transparent'>\r\n                        {data}\r\n                      </Td>\r\n                    );\r\n                  })}\r\n                </Tr>\r\n              );\r\n            })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card>\r\n  );\r\n}\r\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\r\nimport React, { useState } from 'react'\r\nimport LeadTable from './Lead'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { GiClick } from \"react-icons/gi\";\r\n\r\nconst ContactModel = (props) => {\r\n    const { onClose, isOpen, fieldName, setFieldValue,data } = props\r\n    const [selectedValues, setSelectedValues] = useState();\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    // const [data, setData] = useState([])\r\n\r\n    const columns = [\r\n        { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n        { Header: 'Lead Name', accessor: 'leadName', width: 20 },\r\n        { Header: \"Lead Email\", accessor: \"leadEmail\", },\r\n        { Header: \"Lead PhoneNumber\", accessor: \"leadPhoneNumber\", },\r\n        { Header: \"Lead Address\", accessor: \"leadAddress\", },\r\n        { Header: \"Lead Status\", accessor: \"leadStatus\", },\r\n        { Header: \"Lead Owner\", accessor: \"leadOwner\", },\r\n        { Header: \"Lead Score\", accessor: \"leadScore\", },\r\n    ];\r\n\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n   \r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            setFieldValue(fieldName, selectedValues)\r\n            onClose()\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Select Lead</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex> : <LeadTable tableData={data} selectedValues={selectedValues} setSelectedValues={setSelectedValues} columnsData={columns} title=\"Lead\" />}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size='sm' me={2} onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>\r\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ContactModel\r\n","import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Button, Checkbox, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';\r\nimport ContactModel from \"components/commonTableModel/ContactModel\";\r\nimport LeadModel from \"components/commonTableModel/LeadModel\";\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport { useEffect, useState } from 'react';\r\nimport { LiaMousePointerSolid } from 'react-icons/lia';\r\nimport { TaskSchema } from 'schema';\r\nimport { getApi, postApi } from 'services/api';\r\nimport moment from 'moment';\r\n\r\nconst AddTask = (props) => {\r\n    const { onClose, isOpen, fetchData } = props\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const userId = JSON.parse(localStorage.getItem('user'))._id\r\n    const [assignmentToData, setAssignmentToData] = useState([]);\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [contactModelOpen, setContactModel] = useState(false);\r\n    const [leadModelOpen, setLeadModel] = useState(false);\r\n\r\n    const initialValues = {\r\n        title: '',\r\n        category: props.leadContect === 'contactView' ? 'Contact' : props.leadContect === 'leadView' ? 'Lead' : 'None',\r\n        description: '',\r\n        notes: '',\r\n        assignmentTo: props.leadContect === 'contactView' && props.id ? props.id : '',\r\n        assignmentToLead: props.leadContect === 'leadView' && props.id ? props.id : '',\r\n        reminder: '',\r\n        start: '',\r\n        end: '',\r\n        backgroundColor: '',\r\n        borderColor: '#ffffff',\r\n        textColor: '',\r\n        allDay: isChecked === true ? 'Yes' : 'No',\r\n        display: '',\r\n        url: '',\r\n        createBy: userId,\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: TaskSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n        },\r\n    });\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik\r\n\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n\r\n            if (values?.start) {\r\n                values.start = isChecked ? moment(values.start).format('YYYY-MM-DD') || '' : moment(values.start).format('YYYY-MM-DD HH:mm') || '';\r\n            }\r\n            if (values?.end) {\r\n                values.end = isChecked ? moment(values.end).format('YYY-MM-DD') || '' : moment(values.end).format('YYYY-MM-DD HH:mm') || '';\r\n            }\r\n\r\n            let response = await postApi('api/task/add', values)\r\n            if (response.status === 200) {\r\n                formik.resetForm()\r\n                onClose();\r\n                fetchData()\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    useEffect(async () => {\r\n        values.start = props?.date\r\n        try {\r\n            let result\r\n            if (values.category === \"Contact\") {\r\n                result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)\r\n            } else if (values.category === \"Lead\") {\r\n                result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);\r\n            }\r\n            setAssignmentToData(result?.data)\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, [props, values.category])\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} size={'xl'} >\r\n            <ModalOverlay />\r\n            <ModalContent height={\"600px\"}>\r\n                <ModalHeader justifyContent='space-between' display='flex' >\r\n                    Create Task\r\n                    <IconButton onClick={() => props.from ? onClose(false) : onClose()} icon={<CloseIcon />} />\r\n                </ModalHeader>\r\n                <ModalBody overflowY={\"auto\"} height={\"700px\"}>\r\n                    {/* Contact Model  */}\r\n                    <ContactModel isOpen={contactModelOpen} data={assignmentToData} onClose={setContactModel} fieldName='assignmentTo' setFieldValue={setFieldValue} />\r\n                    {/* Lead Model  */}\r\n                    <LeadModel isOpen={leadModelOpen} data={assignmentToData} onClose={setLeadModel} fieldName='assignmentToLead' setFieldValue={setFieldValue} />\r\n\r\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Title<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.title}\r\n                                name=\"title\"\r\n                                placeholder='Title'\r\n                                fontWeight='500'\r\n                                borderColor={errors?.title && touched?.title ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.title && touched.title && errors.title}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Related\r\n                            </FormLabel>\r\n                            <RadioGroup onChange={(e) => { setFieldValue('category', e); setFieldValue('assignmentTo', null); setFieldValue('assignmentToLead', null); }} value={values.category}>\r\n                                <Stack direction='row'>\r\n                                    <Radio value='None' >None</Radio>\r\n                                    {props.leadContect === 'contactView' && <Radio value='Contact'>Contact</Radio>}\r\n                                    {props.leadContect === 'leadView' && <Radio value='Lead'>Lead</Radio>}\r\n                                    {!props.leadContect && <> <Radio value='Contact'>Contact</Radio><Radio value='Lead'>Lead</Radio></>}\r\n                                </Stack>\r\n                            </RadioGroup>\r\n                            <Text mb='10px' color={'red'}> {errors.category && touched.category && errors.category}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, md: values.category === \"None\" ? 12 : 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Description\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.description}\r\n                                name=\"description\"\r\n                                placeholder='Description'\r\n                                fontWeight='500'\r\n                                borderColor={errors?.description && touched?.description ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.description && touched.description && errors.description}</Text>\r\n                        </GridItem>\r\n                        {values.category === \"Contact\" ?\r\n                            <>\r\n                                <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                        Assignment To  Contact\r\n                                    </FormLabel>\r\n                                    <Flex justifyContent={'space-between'}>\r\n                                        <Select\r\n                                            value={values.assignmentTo}\r\n                                            name=\"assignmentTo\"\r\n                                            onChange={handleChange}\r\n                                            mb={errors.assignmentTo && touched.assignmentTo ? undefined : '10px'}\r\n                                            fontWeight='500'\r\n                                            placeholder={'Assignment To'}\r\n                                            borderColor={errors.assignmentTo && touched.assignmentTo ? \"red.300\" : null}\r\n                                        >\r\n                                            {assignmentToData?.map((item) => {\r\n                                                return <option value={item._id} key={item._id}>{values.category === 'Contact' && `${item.firstName} ${item.lastName}`}</option>\r\n                                            })}\r\n                                        </Select>\r\n                                        <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                    </Flex>\r\n                                    <Text mb='10px' color={'red'}> {errors.assignmentTo && touched.assignmentTo && errors.assignmentTo}</Text>\r\n                                </GridItem>\r\n                            </>\r\n                            : values.category === \"Lead\" ?\r\n                                <>\r\n                                    <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                            Assignment To Lead\r\n                                        </FormLabel>\r\n                                        <Flex justifyContent={'space-between'}>\r\n                                            <Select\r\n                                                value={values.assignmentToLead}\r\n                                                name=\"assignmentToLead\"\r\n                                                onChange={handleChange}\r\n                                                mb={errors.assignmentToLead && touched.assignmentToLead ? undefined : '10px'}\r\n                                                fontWeight='500'\r\n                                                placeholder={'Assignment To'}\r\n                                                borderColor={errors.assignmentToLead && touched.assignmentToLead ? \"red.300\" : null}\r\n                                            >\r\n                                                {assignmentToData?.map((item) => {\r\n                                                    return <option value={item._id} key={item._id}>{values.category === 'Lead' && item.leadName}</option>\r\n                                                })}\r\n                                            </Select>\r\n                                            <IconButton onClick={() => setLeadModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                        </Flex>\r\n                                        <Text mb='10px' color={'red'}> {errors.assignmentToLead && touched.assignmentToLead && errors.assignmentToLead}</Text>\r\n                                    </GridItem>\r\n                                </>\r\n                                : ''\r\n                        }\r\n                        <GridItem colSpan={{ base: 12 }} >\r\n                            <Checkbox isChecked={isChecked}\r\n                                name=\"allDay\"\r\n                                onChange={(e) => {\r\n                                    setFieldValue('allDay', e.target.checked === true ? 'Yes' : 'No');\r\n                                    setIsChecked(e.target.checked);\r\n                                }}\r\n                            >All Day Task ? </Checkbox>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Start Date<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                type={isChecked ? 'date' : 'datetime-local'}\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.start}\r\n                                name=\"start\"\r\n                                fontWeight='500'\r\n                                borderColor={errors?.start && touched?.start ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.start && touched.start && errors.start}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                End Date\r\n                            </FormLabel>\r\n                            <Input\r\n                                type={isChecked ? 'date' : 'datetime-local'}\r\n                                fontSize='sm'\r\n                                min={values.start}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.end}\r\n                                name=\"end\"\r\n                                fontWeight='500'\r\n                                borderColor={errors?.end && touched?.end ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.end && touched.end && errors.end}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, sm: 4 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Background-Color\r\n                            </FormLabel>\r\n                            <Input\r\n                                type='color'\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.backgroundColor}\r\n                                name=\"backgroundColor\"\r\n                                fontWeight='500'\r\n                                borderColor={errors?.backgroundColor && touched?.backgroundColor ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.backgroundColor && touched.backgroundColor && errors.backgroundColor}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, sm: 4 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Border-Color\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                type='color'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.borderColor}\r\n                                name=\"borderColor\"\r\n                                placeholder='borderColor'\r\n                                fontWeight='500'\r\n                                borderColor={errors?.borderColor && touched?.borderColor ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.borderColor && touched.borderColor && errors.borderColor}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, sm: 4 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Text-Color\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                type='color'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.textColor}\r\n                                name=\"textColor\"\r\n                                placeholder='textColor'\r\n                                fontWeight='500'\r\n                                textColor={errors?.textColor && touched?.textColor ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.textColor && touched.textColor && errors.textColor}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Url\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.url}\r\n                                name=\"url\"\r\n                                placeholder='Enter url'\r\n                                fontWeight='500'\r\n                                borderColor={errors?.url && touched?.url ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.url && touched.url && errors.url}</Text>\r\n                        </GridItem>\r\n\r\n                        <GridItem colSpan={{ base: 12 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Notes\r\n                            </FormLabel>\r\n                            <Textarea\r\n                                resize={'none'}\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.notes}\r\n                                name=\"notes\"\r\n                                placeholder='Notes'\r\n                                fontWeight='500'\r\n                                borderColor={errors?.notes && touched?.notes ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.notes && touched.notes && errors.notes}</Text>\r\n                        </GridItem>\r\n                    </Grid>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button size=\"sm\" variant='brand' disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>\r\n                    <Button sx={{\r\n                        marginLeft: 2,\r\n                        textTransform: \"capitalize\",\r\n                    }} variant=\"outline\"\r\n                        colorScheme=\"red\" size=\"sm\" onClick={() => {\r\n                            formik.resetForm()\r\n                            onClose()\r\n                        }}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default AddTask\r\n","import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Button, Checkbox, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea, useBreakpointValue } from '@chakra-ui/react';\r\nimport { useFormik } from 'formik';\r\nimport { useEffect, useState } from 'react';\r\nimport { LiaMousePointerSolid } from 'react-icons/lia';\r\nimport { TaskSchema } from 'schema';\r\nimport { getApi, putApi } from 'services/api';\r\nimport ContactModel from \"components/commonTableModel/ContactModel\";\r\nimport LeadModel from \"components/commonTableModel/LeadModel\";\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport moment from 'moment';\r\n\r\nconst EditTask = (props) => {\r\n    const { onClose, isOpen, setAction } = props\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const userId = JSON.parse(localStorage.getItem('user'))._id\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n    const [assignmentToData, setAssignmentToData] = useState([]);\r\n    const [contactModelOpen, setContactModel] = useState(false);\r\n    const [leadModelOpen, setLeadModel] = useState(false);\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const initialValues = {\r\n        title: '',\r\n        category: 'None',\r\n        description: '',\r\n        notes: '',\r\n        assignmentTo: '',\r\n        assignmentToLead: '',\r\n        reminder: '',\r\n        start: '',\r\n        end: '',\r\n        backgroundColor: '',\r\n        borderColor: '#ffffff',\r\n        textColor: '',\r\n        display: '',\r\n        url: '',\r\n        allDay: '',\r\n        status: '',\r\n        createBy: userId,\r\n    };\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: initialValues,\r\n        validationSchema: TaskSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            EditData();\r\n        },\r\n    });\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik\r\n    const EditData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n\r\n            if (values?.start) {\r\n                values.start = isChecked ? moment(values.start).format('YYYY-MM-DD') || '' : moment(values.start).format('YYYY-MM-DD HH:mm') || '';\r\n            }\r\n            if (values?.end) {\r\n                values.end = isChecked ? moment(values.end).format('YYYY-MM-DD') || '' : moment(values.end).format('YYYY-MM-DD HH:mm') || '';\r\n            }\r\n\r\n            let response = await putApi(`api/task/edit/${props.id}`, values)\r\n            if (response.status === 200) {\r\n                formik.resetForm()\r\n                props.viewClose();\r\n                onClose(false)\r\n                setAction((pre) => !pre)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    const fetchTaskData = async () => {\r\n        if (props.id) {\r\n            try {\r\n                setIsLoding(true)\r\n                let result = await getApi('api/task/view/', props.id)\r\n\r\n                setFieldValue('title', result?.data?.title)\r\n                setFieldValue('category', result?.data?.category)\r\n                setFieldValue('description', result?.data?.description)\r\n                setFieldValue('notes', result?.data?.notes)\r\n                setFieldValue('assignmentTo', result?.data?.assignmentTo)\r\n                setFieldValue('reminder', result?.data?.reminder)\r\n                setFieldValue('start', result?.data?.start)\r\n                setFieldValue('end', result?.data?.end)\r\n                setFieldValue('backgroundColor', result?.data?.backgroundColor)\r\n                setFieldValue('borderColor', result?.data?.borderColor)\r\n                setFieldValue('textColor', result?.data?.textColor)\r\n                setFieldValue('display', result?.data?.display)\r\n                setFieldValue('url', result?.data?.url)\r\n                setFieldValue(\"status\", result?.data?.status)\r\n                setFieldValue('assignmentToLead', result?.data?.assignmentToLead)\r\n                setFieldValue('allDay', result?.data?.allDay === 'Yes' ? 'Yes' : 'No')\r\n                setIsChecked(result?.data?.allDay === 'Yes' ? true : false)\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n            finally {\r\n                setIsLoding(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    const getContactDetails = async () => {\r\n        try {\r\n            let result\r\n            if (values.category === \"Contact\") {\r\n                result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)\r\n            } else if (values.category === \"Lead\") {\r\n                result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);\r\n            }\r\n            setAssignmentToData(result?.data)\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getContactDetails()\r\n    }, [values.category])\r\n\r\n    useEffect(() => {\r\n        fetchTaskData()\r\n        getContactDetails()\r\n    }, [props.id, isOpen])\r\n    return (\r\n        <Modal isOpen={isOpen} size={'xl'} >\r\n            {!props.from && <ModalOverlay />}\r\n            <ModalContent overflowY={\"auto\"} height={\"600px\"}>\r\n                <ModalHeader justifyContent='space-between' display='flex' >\r\n                    Edit Task\r\n                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />\r\n                </ModalHeader>\r\n                <ModalBody overflowY={\"auto\"} height={\"700px\"}>\r\n                    {/* Contact Model  */}\r\n                    <ContactModel isOpen={contactModelOpen} data={assignmentToData} onClose={setContactModel} values={values} fieldName='assignmentTo' setFieldValue={setFieldValue} />\r\n                    {/* Lead Model  */}\r\n                    <LeadModel isOpen={leadModelOpen} data={assignmentToData} onClose={setLeadModel} values={values} fieldName='assignmentToLead' setFieldValue={setFieldValue} />\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex>\r\n                        :\r\n                        <Grid templateColumns=\"repeat(12, 1fr)\" gap={3} >\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Title<Text color={\"red\"}>*</Text>\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.title}\r\n                                    name=\"title\"\r\n                                    placeholder='Title'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.title && touched?.title ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'} fontSize='sm'> {errors.title && touched.title && errors.title}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Related\r\n                                </FormLabel>\r\n                                <RadioGroup onChange={(e) => { setFieldValue('category', e); setFieldValue('assignmentTo', null); setFieldValue('assignmentToLead', null); }} value={values.category}>\r\n                                    <Stack direction='row'>\r\n                                        <Radio value='None' >None</Radio>\r\n                                        {values.category === 'Contact' && <Radio value='Contact'>Contact</Radio>}\r\n                                        {values.category === 'Lead' && <Radio value='Lead'>Lead</Radio>}\r\n                                        {!values.category && <> <Radio value='Contact'>Contact</Radio><Radio value='Lead'>Lead</Radio></>}\r\n                                    </Stack>\r\n                                </RadioGroup>\r\n                                <Text mb='10px' color={'red'}> {errors.category && touched.category && errors.category}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: values.category === \"None\" ? 12 : 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Description\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.description}\r\n                                    name=\"description\"\r\n                                    placeholder='Description'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.description && touched?.description ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.description && touched.description && errors.description}</Text>\r\n                            </GridItem>\r\n                            {values.category === \"Contact\" ?\r\n                                <>\r\n                                    <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                            Assignment To  Contact\r\n                                        </FormLabel>\r\n                                        <Flex justifyContent={'space-between'}>\r\n                                            <Select\r\n                                                value={values.assignmentTo}\r\n                                                name=\"assignmentTo\"\r\n                                                onChange={handleChange}\r\n                                                mb={errors.assignmentTo && touched.assignmentTo ? undefined : '10px'}\r\n                                                fontWeight='500'\r\n                                                placeholder={'Assignment To'}\r\n                                                borderColor={errors.assignmentTo && touched.assignmentTo ? \"red.300\" : null}\r\n                                            >\r\n                                                {assignmentToData?.map((item) => {\r\n                                                    return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>\r\n                                                })}\r\n                                            </Select>\r\n                                            <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                        </Flex>\r\n                                        <Text mb='10px' color={'red'}> {errors.assignmentTo && touched.assignmentTo && errors.assignmentTo}</Text>\r\n                                    </GridItem>\r\n                                </>\r\n                                : values.category === \"Lead\" ?\r\n                                    <>\r\n                                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                                Assignment To Lead\r\n                                            </FormLabel>\r\n                                            <Flex justifyContent={'space-between'}>\r\n                                                <Select\r\n                                                    value={values.assignmentToLead}\r\n                                                    name=\"assignmentToLead\"\r\n                                                    onChange={handleChange}\r\n                                                    mb={errors.assignmentToLead && touched.assignmentToLead ? undefined : '10px'}\r\n                                                    fontWeight='500'\r\n                                                    placeholder={'Assignment To'}\r\n                                                    borderColor={errors.assignmentToLead && touched.assignmentToLead ? \"red.300\" : null}\r\n                                                >\r\n                                                    {assignmentToData?.map((item) => {\r\n                                                        return <option value={item._id} key={item._id}>{item.leadName}</option>\r\n                                                    })}\r\n                                                </Select>\r\n                                                <IconButton onClick={() => setLeadModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                            </Flex>\r\n                                            <Text mb='10px' color={'red'}> {errors.assignmentToLead && touched.assignmentToLead && errors.assignmentToLead}</Text>\r\n                                        </GridItem>\r\n                                    </>\r\n                                    : ''\r\n                            }\r\n                            <GridItem colSpan={{ base: 12 }} >\r\n                                <Checkbox isChecked={isChecked} name='allDay'\r\n                                    onChange={(e) => {\r\n                                        const target = e.target.checked;\r\n                                        setFieldValue('allDay', e.target.checked === true ? 'Yes' : 'No');\r\n                                        setIsChecked(target);\r\n                                    }}>\r\n                                    All Day Task ?\r\n                                </Checkbox>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Start Date\r\n                                </FormLabel>\r\n                                <Input\r\n                                    type={isChecked === true ? 'date' : 'datetime-local'}\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={isChecked ? moment(values.start).format('YYYY-MM-DD') || '' : moment(values.start).format('YYYY-MM-DDTHH:mm') || ''}\r\n                                    name=\"start\"\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.start && touched?.start ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.start && touched.start && errors.start}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    End Date\r\n                                </FormLabel>\r\n                                <Input\r\n                                    type={isChecked === true ? 'date' : 'datetime-local'}\r\n                                    fontSize='sm'\r\n                                    min={values.start}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={isChecked ? moment(values.end).format('YYYY-MM-DD') || '' : moment(values.end).format('YYYY-MM-DDTHH:mm') || ''}\r\n                                    name=\"end\"\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.end && touched?.end ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.end && touched.end && errors.end}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, sm: 4 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Background-Color\r\n                                </FormLabel>\r\n                                <Input\r\n                                    type='color'\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.backgroundColor}\r\n                                    name=\"backgroundColor\"\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.backgroundColor && touched?.backgroundColor ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.backgroundColor && touched.backgroundColor && errors.backgroundColor}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, sm: 4 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Border-Color\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    type='color'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.borderColor}\r\n                                    name=\"borderColor\"\r\n                                    placeholder='borderColor'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.borderColor && touched?.borderColor ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.borderColor && touched.borderColor && errors.borderColor}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, sm: 4 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Text-Color\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    type='color'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.textColor}\r\n                                    name=\"textColor\"\r\n                                    placeholder='textColor'\r\n                                    fontWeight='500'\r\n                                    textColor={errors?.textColor && touched?.textColor ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.textColor && touched.textColor && errors.textColor}</Text>\r\n                            </GridItem>\r\n\r\n\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Url\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.url}\r\n                                    name=\"url\"\r\n                                    placeholder='Enter url'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.url && touched?.url ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.url && touched.url && errors.url}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Status\r\n                                </FormLabel>\r\n                                <Select\r\n                                    onChange={(e) => setFieldValue(\"status\", e.target.value)}\r\n                                    value={values?.status}\r\n                                    style={{ fontSize: \"14px\" }}>\r\n                                    <option value='completed'>Completed</option>\r\n                                    <option value='todo'>Todo</option>\r\n                                    <option value='onHold'>On Hold</option>\r\n                                    <option value='inProgress'>In Progress</option>\r\n                                    <option value='pending'>Pending</option>\r\n                                </Select>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Notes\r\n                                </FormLabel>\r\n                                <Textarea\r\n                                    resize={'none'}\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.notes}\r\n                                    name=\"notes\"\r\n                                    placeholder='Notes'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.notes && touched?.notes ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.notes && touched.notes && errors.notes}</Text>\r\n                            </GridItem>\r\n                        </Grid>\r\n                    }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button size=\"sm\" variant='brand' onClick={handleSubmit}>Update</Button>\r\n                    <Button sx={{\r\n                        marginLeft: 2,\r\n                        textTransform: \"capitalize\",\r\n                    }} variant=\"outline\"\r\n                        colorScheme=\"red\" size=\"sm\" ml={2} onClick={() => onClose(false)}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default EditTask\r\n"],"names":["ContactTable","props","columnsData","tableData","title","type","selectedValues","setSelectedValues","columns","useMemo","data","gopageValue","setGopageValue","JSON","parse","localStorage","getItem","useState","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","length","textColor","useColorModeValue","borderColor","handleCheckboxChange","event","value","target","checked","prevSelectedValues","filter","selectedValue","_jsxs","Card","direction","w","px","style","border","overflowX","sm","lg","children","_jsx","Flex","justify","mb","align","Text","color","fontSize","fontWeight","lineHeight","CountUpComponent","targetNumber","Box","overflowY","className","Table","_objectSpread","variant","Thead","zIndex","map","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","isSortable","getSortByToggleProps","pe","justifyContent","center","textTransform","marginRight","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","colSpan","textAlign","width","row","_row$cells","getRowProps","cells","cell","_cell$row","Header","Checkbox","colorScheme","isChecked","includes","onChange","me","getCellProps","minW","md","Pagination","onClose","isOpen","fieldName","setFieldValue","isLoding","setIsLoding","Modal","size","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","alignItems","Spinner","accessor","ModalFooter","Button","onClick","async","e","console","log","disabled","leftIcon","GiClick","LeadTable","fetchData","setIsChecked","userId","_id","assignmentToData","setAssignmentToData","user","contactModelOpen","setContactModel","leadModelOpen","setLeadModel","initialValues","category","leadContect","description","notes","assignmentTo","id","assignmentToLead","reminder","start","end","backgroundColor","allDay","display","url","createBy","formik","useFormik","validationSchema","TaskSchema","onSubmit","values","_ref","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","moment","format","postApi","status","useEffect","date","_result","result","getApi","role","concat","height","IconButton","from","icon","CloseIcon","ContactModel","LeadModel","Grid","templateColumns","gap","GridItem","base","FormLabel","ms","Input","onBlur","name","placeholder","RadioGroup","Stack","Radio","_Fragment","Select","undefined","item","firstName","lastName","ml","LiaMousePointerSolid","leadName","min","Textarea","resize","sx","marginLeft","setAction","enableReinitialize","EditData","putApi","viewClose","pre","getContactDetails","_result$data","_result$data2","_result$data3","_result$data4","_result$data5","_result$data6","_result$data7","_result$data8","_result$data9","_result$data10","_result$data11","_result$data12","_result$data13","_result$data14","_result$data15","_result$data16","_result$data17","fetchTaskData"],"sourceRoot":""}