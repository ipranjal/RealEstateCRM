{"version":3,"file":"static/js/195.b9d3189c.chunk.js","mappings":"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","sources":["views/admin/contact/Add.js","views/admin/contact/Edit.js","views/admin/contact/components/propertyTable.js","views/admin/contact/components/propertyModel.js","views/admin/contact/View.js"],"sourcesContent":["import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, IconButton } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport { useState } from 'react';\r\nimport { postApi } from 'services/api';\r\nimport { generateValidationSchema } from 'utils';\r\nimport CustomForm from 'utils/customForm';\r\nimport * as yup from 'yup'\r\n\r\nconst Add = (props) => {\r\n    const [isLoding, setIsLoding] = useState(false)\r\n\r\n    const initialFieldValues = Object.fromEntries(\r\n        (props?.contactData?.fields || []).map(field => [field?.name, ''])\r\n    );\r\n    const initialValues = {\r\n        ...initialFieldValues,\r\n        createBy: JSON.parse(localStorage.getItem('user'))._id\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: yup.object().shape(generateValidationSchema(props?.contactData?.fields)),\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n            resetForm();\r\n        },\r\n    });\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik\r\n\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await postApi('api/form/add', { ...values, moduleId: props?.contactData?._id })\r\n            if (response.status === 200) {\r\n                props.onClose();\r\n                props.setAction((pre) => !pre)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        formik.resetForm();\r\n        props.onClose()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Drawer isOpen={props.isOpen} size={props.size}>\r\n                <DrawerOverlay />\r\n                <DrawerContent>\r\n                    <DrawerHeader alignItems={\"center\"} justifyContent='space-between' display='flex' >\r\n                        Add Contact\r\n                        <IconButton onClick={props.onClose} icon={<CloseIcon />} />\r\n                    </DrawerHeader>\r\n                    <DrawerBody>\r\n                        <CustomForm moduleData={props.contactData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />\r\n                    </DrawerBody>\r\n\r\n\r\n                    <DrawerFooter>\r\n                        <Button\r\n                            sx={{ textTransform: \"capitalize\" }}\r\n                            variant=\"brand\"\r\n                            disabled={isLoding ? true : false}\r\n                            type=\"submit\" size=\"sm\"\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            {isLoding ? <Spinner /> : 'Save'}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outline\"\r\n                            colorScheme='red' size=\"sm\"\r\n                            sx={{\r\n                                marginLeft: 2,\r\n                                textTransform: \"capitalize\",\r\n                            }}\r\n                            onClick={handleCancel}\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                    </DrawerFooter>\r\n\r\n                </DrawerContent>\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Add\r\n","import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, IconButton } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getApi, putApi } from 'services/api';\r\nimport { generateValidationSchema } from '../../../utils';\r\nimport * as yup from 'yup'\r\nimport CustomForm from 'utils/customForm';\r\n\r\nconst Edit = (props) => {\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const initialFieldValues = Object.fromEntries(\r\n        (props?.contactData?.fields || []).map(field => [field?.name, ''])\r\n    );\r\n\r\n    //     lastName: \"\",\r\n    //     title: \"\",\r\n    //     email: \"\",\r\n    //     phoneNumber: \"\",\r\n    //     mobileNumber: \"\",\r\n    //     physicalAddress: \"\",\r\n    //     mailingAddress: \"\",\r\n    //     preferredContactMethod: \"\",\r\n    //     // 2.Lead Source Information\r\n    //     leadSource: \"\",\r\n    //     referralSource: \"\",\r\n    //     campaignSource: \"\",\r\n    //     // 3. Status and Classifications\r\n    //     leadStatus: \"\",\r\n    //     leadRating: \"\",\r\n    //     leadConversionProbability: \"\",\r\n    //     // 4. Property of Interest\r\n    //     // 5. History:\r\n    //     notesandComments: \"\",\r\n    //     // 6. Tags or Categories\r\n    //     tagsOrLabelsForcategorizingcontacts: \"\",\r\n    //     // 7. Important Dates::\r\n    //     birthday: \"\",\r\n    //     anniversary: \"\",\r\n    //     keyMilestones: \"\",\r\n    //     // 8. Additional Personal Information\r\n    //     dob: \"\",\r\n    //     gender: \"\",\r\n    //     occupation: \"\",\r\n    //     interestsOrHobbies: \"\",\r\n    //     // 9. Preferred  Communication Preferences:\r\n    //     communicationFrequency: \"\",\r\n    //     preferences: \"\",\r\n    //     // 10. Social Media Profiles:\r\n    //     linkedInProfile: \"\",\r\n    //     facebookProfile: \"\",\r\n    //     twitterHandle: \"\",\r\n    //     otherProfiles: \"\",\r\n    //     // 11. Lead Assignment and Team Collaboration:\r\n    //     agentOrTeamMember: \"\",\r\n    //     internalNotesOrComments: \"\",\r\n    //     createBy: JSON.parse(localStorage.getItem('user'))._id,\r\n    // });\r\n    const [initialValues, setInitialValues] = useState({\r\n        ...initialFieldValues,\r\n        createBy: JSON.parse(localStorage.getItem('user'))._id\r\n    });\r\n    const param = useParams()\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        enableReinitialize: true,\r\n        validationSchema: yup.object().shape(generateValidationSchema(props?.contactData?.fields)),\r\n        onSubmit: (values, { resetForm }) => {\r\n            EditData();\r\n        },\r\n    });\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik\r\n\r\n    const EditData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await putApi(`api/form/edit/${props?.selectedId || param.id}`, { ...values, moduleId: props?.moduleId })\r\n            if (response.status === 200) {\r\n                props.onClose();\r\n                props.setAction((pre) => !pre)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        props.onClose(false)\r\n        props.setSelectedId && props?.setSelectedId()\r\n    }\r\n    let response\r\n    const fetchData = async () => {\r\n        if (props?.selectedId || param.id) {\r\n            try {\r\n                setIsLoding(true)\r\n                response = await getApi('api/contact/view/', props?.selectedId ? props?.selectedId : param.id)\r\n                setInitialValues((prev) => ({ ...prev, ...response?.data?.contact }))\r\n\r\n                // values.lastName = response?.data?.contact?.lastName;\r\n                // values.title = response?.data?.contact?.title;\r\n                // values.email = response?.data?.contact?.email;\r\n                // values.phoneNumber = response?.data?.contact?.phoneNumber;\r\n                // values.mobileNumber = response?.data?.contact?.mobileNumber;\r\n                // values.physicalAddress = response?.data?.contact?.physicalAddress;\r\n                // values.mailingAddress = response?.data?.contact?.mailingAddress;\r\n                // values.preferredContactMethod = response?.data?.contact?.preferredContactMethod;\r\n                // // 2.Lead Source Information\r\n                // values.leadSource = response?.data?.contact?.leadSource;\r\n                // values.referralSource = response?.data?.contact?.referralSource;\r\n                // values.campaignSource = response?.data?.contact?.campaignSource;\r\n                // // 3. Status and Classifications\r\n                // values.leadStatus = response?.data?.contact?.leadStatus;\r\n                // values.leadRating = response?.data?.contact?.leadRating;\r\n                // values.leadConversionProbability = response?.data?.contact?.leadConversionProbability;\r\n                // // 5. History:\r\n                // values.emailHistory = response?.data?.contact?.emailHistory;\r\n                // values.phoneCallHistory = response?.data?.contact?.phoneCallHistory;\r\n                // values.meetingHistory = response?.data?.contact?.meetingHistory;\r\n                // values.notesandComments = response?.data?.contact?.notesandComments;\r\n                // // 6. Tags or Categories\r\n                // values.tagsOrLabelsForcategorizingcontacts = response?.data?.contact?.tagsOrLabelsForcategorizingcontacts;\r\n                // // 7. Important Dates::\r\n                // values.birthday = moment(response?.data?.contact?.birthday).format('YYYY-MM-DD')\r\n                // values.anniversary = moment(response?.data?.contact?.anniversary).format('YYYY-MM-DD')\r\n                // values.keyMilestones = response?.data?.contact?.keyMilestones;\r\n                // // 8. Additional Personal Information\r\n                // values.dob = moment(response?.data?.contact?.dob).format('YYYY-MM-DD')\r\n                // values.gender = response?.data?.contact?.gender;\r\n                // values.occupation = response?.data?.contact?.occupation;\r\n                // values.interestsOrHobbies = response?.data?.contact?.interestsOrHobbies;\r\n                // // 9. Preferred  Communication Preferences:\r\n                // values.communicationFrequency = response?.data?.contact?.communicationFrequency;\r\n                // values.preferences = response?.data?.contact?.preferences;\r\n                // // 10. Social Media Profiles:\r\n                // values.linkedInProfile = response?.data?.contact?.linkedInProfile;\r\n                // values.facebookProfile = response?.data?.contact?.facebookProfile;\r\n                // values.twitterHandle = response?.data?.contact?.twitterHandle;\r\n                // values.otherProfiles = response?.data?.contact?.otherProfiles;\r\n                // // 11. Lead Assignment and Team Collaboration:\r\n                // values.agentOrTeamMember = response?.data?.contact?.agentOrTeamMember;\r\n                // values.internalNotesOrComments = response?.data?.contact?.internalNotesOrComments;\r\n\r\n            } catch (e) {\r\n                console.error(e)\r\n            } finally {\r\n                setIsLoding(false)\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [props?.selectedId])\r\n\r\n    return (\r\n        <div>\r\n            <Drawer isOpen={props.isOpen} size={props.size}>\r\n                <DrawerOverlay />\r\n                <DrawerContent>\r\n                    <DrawerHeader alignItems={\"center\"} justifyContent='space-between' display='flex' >\r\n                        Edit Contact\r\n                        <IconButton onClick={handleClose} icon={<CloseIcon />} />\r\n                    </DrawerHeader>\r\n                    <DrawerBody>\r\n                        {isLoding ?\r\n                            <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                                <Spinner />\r\n                            </Flex>\r\n                            :\r\n\r\n                            <CustomForm moduleData={props.contactData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />\r\n\r\n                        }\r\n                    </DrawerBody>\r\n                  \r\n                    <DrawerFooter>\r\n                        <Button\r\n                            sx={{ textTransform: \"capitalize\" }}\r\n                            variant=\"brand\"\r\n                            type=\"submit\" size=\"sm\"\r\n                            disabled={isLoding ? true : false}\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            {isLoding ? <Spinner /> : 'Update'}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outline\"\r\n                            colorScheme='red' size=\"sm\"\r\n                            sx={{\r\n                                marginLeft: 2,\r\n                                textTransform: \"capitalize\",\r\n                            }}\r\n                            onClick={handleClose}\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                    </DrawerFooter>\r\n                </DrawerContent>\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edit","import {\r\n  Box, Checkbox,\r\n  Flex, Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\n\r\n// Custom components\r\nimport Card from \"components/card/Card\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DataNotFound from \"components/notFoundData\";\r\n\r\nexport default function PropertyTable(props) {\r\n  const { columnsData, tableData, title, selectedValues, setSelectedValues } = props;\r\n\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (event.target.checked) {\r\n      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n    } else {\r\n      setSelectedValues((prevSelectedValues) =>\r\n        prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Card\r\n      direction='column'\r\n      w='100%'\r\n      px='0px'\r\n      style={{ border: '1px solid gray.200' }\r\n      }\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\r\n      <Box overflowY={'auto'} className=\"table-container-property\" >\r\n        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\r\n          <Thead >\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers.map((column, index) => (\r\n                  <Th\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    pe='10px'\r\n                    key={index}\r\n                    borderColor={borderColor}>\r\n                    <Flex\r\n                      justify='space-between'\r\n                      align='center'\r\n                      fontSize={{ sm: \"14px\", lg: \"14px\" }}\r\n                      color=\"secondaryGray.900\">\r\n                      {column.render(\"Header\")}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody  {...getTableBodyProps()}>\r\n            {data?.length === 0 && (\r\n              <Tr>\r\n                <Td colSpan={columns.length}>\r\n                  <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                    <DataNotFound />\r\n                  </Text>\r\n                </Td>\r\n              </Tr>\r\n            )}\r\n            {page?.map((row, index) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Tr {...row?.getRowProps()} key={index}>\r\n                  {row?.cells?.map((cell, index) => {\r\n                    let data = \"\";\r\n                    if (cell?.column.Header === \"#\") {\r\n                      data = (\r\n                        <Flex align=\"center\">\r\n                          <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.row?.index + 1}\r\n                          </Text>\r\n                        </Flex>\r\n                      );\r\n                    } else if (cell?.column.Header === \"property Type\") {\r\n                      data = (\r\n                        <Link to={user?.role !== 'superAdmin' ? `/propertyView/${cell?.row?.original?._id}` : `/propertyView/${cell?.row?.original?._id}`}>\r\n                          <Text\r\n                            me=\"10px\"\r\n                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                            color='brand.600'\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                          >\r\n                            {cell?.value}\r\n                          </Text>\r\n                        </Link>\r\n                      );\r\n                    } else if (cell?.column.Header === \"property Address\") {\r\n                      data = (\r\n\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n\r\n                      );\r\n                    } else if (cell?.column.Header === \"listing Price\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"square Footage\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"year Built\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"number of Bedrooms\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"number of Bathrooms\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Td\r\n                        {...cell?.getCellProps()}\r\n                        key={index}\r\n                        fontSize={{ sm: \"14px\" }}\r\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                        borderColor='transparent'>\r\n                        {data}\r\n                      </Td>\r\n                    );\r\n                  })}\r\n                </Tr>\r\n              );\r\n            })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card >\r\n  );\r\n}\r\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { useEffect, useState } from 'react'\r\nimport { getApi, postApi } from 'services/api'\r\nimport CheckTable from './propertyTable'\r\n\r\nconst PropertyModel = (props) => {\r\n    const { onClose, isOpen, fetchData, id, interestProperty } = props\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n    const [isLoding, setIsLoding] = useState(false)\r\n\r\n\r\n    const columns = [\r\n        { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n        { Header: 'property Type', accessor: 'propertyType' },\r\n        { Header: \"property Address\", accessor: \"propertyAddress\", },\r\n        { Header: \"listing Price\", accessor: \"listingPrice\", },\r\n        { Header: \"square Footage\", accessor: \"squareFootage\", },\r\n        { Header: \"year Built\", accessor: \"yearBuilt\", },\r\n    ];\r\n    const [data, setData] = useState([])\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n    const fetchPropertyData = async () => {\r\n        setIsLoding(true)\r\n        let result = await getApi(user.role === 'superAdmin' ? 'api/property/' : `api/property/?createBy=${user._id}`);\r\n        if (result && result.status == 200) {\r\n            setData(result?.data);\r\n        }\r\n        setIsLoding(false)\r\n    }\r\n    const uniqueValues = [...new Set(selectedValues)];\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let result = await postApi(`api/contact/add-property-interest/${id}`, uniqueValues);\r\n            if (result && result.status == 200) {\r\n                fetchData()\r\n                onClose()\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        interestProperty?.map((item) => setSelectedValues((prevSelectedValues) => [...prevSelectedValues, item]))\r\n        fetchPropertyData()\r\n    }, [interestProperty])\r\n\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Select Interested Property</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex> : <CheckTable tableData={data} selectedValues={selectedValues} setSelectedValues={setSelectedValues} columnsData={columns} title=\"Properties\" />}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button size=\"sm\" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false}> {isLoding ? <Spinner /> : 'Save'}</Button>\r\n                    <Button size=\"sm\" sx={{\r\n                        marginLeft: 2,\r\n                        textTransform: \"capitalize\",\r\n                    }} variant=\"outline\"\r\n                        colorScheme=\"red\" onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default PropertyModel\r\n","import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Button, Flex, Grid, GridItem, Heading, IconButton, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Tab, TabList, TabPanel, TabPanels, Tabs, Text, VStack, useColorModeValue, useDisclosure } from \"@chakra-ui/react\";\r\nimport FolderTreeView from 'components/FolderTreeView/folderTreeView';\r\nimport Card from \"components/card/Card\";\r\nimport { HSeparator } from \"components/separator/Separator\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport { constant } from \"constant\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { BiLink, BiLogoLinkedin } from \"react-icons/bi\";\r\nimport { BsTwitter } from \"react-icons/bs\";\r\nimport { FaFacebook } from \"react-icons/fa\";\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { LuBuilding2 } from \"react-icons/lu\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getApi } from \"services/api\";\r\nimport AddEmailHistory from \"../emailHistory/components/AddEmail\";\r\nimport AddMeeting from \"../meeting/components/Addmeeting\";\r\nimport AddPhoneCall from \"../phoneCall/components/AddPhoneCall\";\r\nimport AddTask from \"../task/components/addTask\";\r\nimport Add from \"./Add\";\r\nimport Edit from \"./Edit\";\r\nimport ColumnsTable from \"./components/ColumnsTable\";\r\nimport PhoneCall from \"./components/phonCall\";\r\nimport PropertyModel from \"./components/propertyModel\";\r\nimport PropertyTable from \"./components/propertyTable\";\r\nimport { HasAccess } from \"../../../redux/accessUtils\";\r\nimport MeetingColumnsTable from \"../meeting/components/ColumnsTable\";\r\nimport TaskColumnsTable from \"../task/components/ColumnsTable\";\r\nimport DataNotFound from \"components/notFoundData\";\r\nimport CustomView from \"utils/customView\";\r\nimport AddDocumentModal from \"utils/addDocumentModal\";\r\nimport CommonDeleteModel from \"components/commonDeleteModel\";\r\nimport { deleteApi } from \"services/api\";\r\n\r\nconst View = () => {\r\n\r\n    const param = useParams()\r\n    const textColor = useColorModeValue(\"gray.500\", \"white\");\r\n\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    const buttonbg = useColorModeValue(\"gray.200\", \"white\");\r\n    const [data, setData] = useState([])\r\n    const [allData, setAllData] = useState([]);\r\n    const [contactData, setContactData] = useState([]);\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [edit, setEdit] = useState(false);\r\n    const [deleteModel, setDelete] = useState(false);\r\n    const [propertyModel, setPropertyModel] = useState(false);\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [action, setAction] = useState(false)\r\n\r\n    const [taskModel, setTaskModel] = useState(false);\r\n    const [addEmailHistory, setAddEmailHistory] = useState(false);\r\n    const [addPhoneCall, setAddPhoneCall] = useState(false);\r\n    const [addMeeting, setMeeting] = useState(false);\r\n    const [showEmail, setShowEmail] = useState(false);\r\n    const [showCall, setShowCall] = useState(false);\r\n    const [showTasks, setShowTasks] = useState(false);\r\n    const [showMeetings, setShowMeetings] = useState(false);\r\n    const [addDocument, setAddDocument] = useState(false);\r\n\r\n    const size = \"lg\";\r\n    const navigate = useNavigate()\r\n\r\n    const [permission, callAccess, emailAccess, taskAccess, meetingAccess] = HasAccess(['Contacts', 'Calls', 'Emails', 'Tasks', 'Meetings']);\r\n\r\n    const columnsDataColumns = [\r\n        { Header: \"sender\", accessor: \"senderName\", },\r\n        { Header: \"recipient\", accessor: \"createByName\", },\r\n        { Header: \"time stamp\", accessor: \"timestamp\", },\r\n        { Header: \"Created\", accessor: \"createBy\", },\r\n    ];\r\n\r\n    const PropertyColumn = [\r\n        { Header: 'property Type', accessor: 'propertyType' },\r\n        { Header: \"property Address\", accessor: \"propertyAddress\", },\r\n        { Header: \"listing Price\", accessor: \"listingPrice\", },\r\n        { Header: \"square Footage\", accessor: \"squareFootage\", },\r\n        { Header: \"year Built\", accessor: \"yearBuilt\", },\r\n    ];\r\n    const textColumnsDataColumns = [\r\n        { Header: \"sender\", accessor: \"sender\", },\r\n        { Header: \"recipient\", accessor: \"to\", },\r\n        { Header: \"time stamp\", accessor: \"timestamp\", },\r\n        { Header: \"Created\", accessor: \"createBy\", },\r\n    ];\r\n\r\n    const MeetingColumns = [\r\n        { Header: 'agenda', accessor: 'agenda' },\r\n        { Header: \"date Time\", accessor: \"dateTime\", },\r\n        { Header: \"times tamp\", accessor: \"timestamp\", },\r\n        { Header: \"create By\", accessor: \"createdByName\", },\r\n    ];\r\n    const taskColumns = [\r\n        { Header: 'Title', accessor: 'title' },\r\n        { Header: \"Category\", accessor: \"category\", },\r\n        { Header: \"Assignment To\", accessor: \"assignmentToName\", },\r\n        { Header: \"Start Date\", accessor: \"start\", },\r\n        { Header: \"End Date\", accessor: \"end\", },\r\n    ];\r\n\r\n    const download = async (data) => {\r\n        if (data) {\r\n            let result = await getApi(`api/document/download/`, data)\r\n            if (result && result.status === 200) {\r\n                window.open(`${constant.baseUrl}api/document/download/${data}`)\r\n                toast.success('file Download successful')\r\n            } else if (result && result.response.status === 404) {\r\n                toast.error('file Not Found')\r\n            }\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        setIsLoding(true)\r\n        let response = await getApi('api/contact/view/', param.id)\r\n        setData(response.data?.contact);\r\n        setAllData(response?.data);\r\n        setIsLoding(false)\r\n    }\r\n\r\n    const handleDeleteContact = async (id) => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await deleteApi('api/contact/delete/', id)\r\n            if (response.status === 200) {\r\n                setDelete(false)\r\n                setAction((pre) => !pre)\r\n                navigate('/contacts')\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [action])\r\n\r\n    function toCamelCase(text) {\r\n        return text?.replace(/([a-z])([A-Z])/g, '$1 $2');\r\n    }\r\n\r\n    const fetchCustomData = async () => {\r\n        const response = await getApi('api/custom-field?moduleName=Contacts')\r\n        setContactData(response.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fetchCustomData) fetchCustomData()\r\n    }, [action])\r\n\r\n    return (\r\n        <>\r\n            {isOpen && <Add isOpen={isOpen} size={size} onClose={onClose} contactData={contactData[0]} />}\r\n            <Edit isOpen={edit} contactData={contactData[0]} size={size} onClose={setEdit} setAction={setAction} moduleId={contactData?.[0]?._id} />\r\n            <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type='Contact' handleDeleteData={handleDeleteContact} ids={param.id} />\r\n            <AddEmailHistory fetchData={fetchData} isOpen={addEmailHistory} onClose={setAddEmailHistory} id={param.id} viewData={allData} lead=\"false\" />\r\n\r\n            {isLoding ?\r\n                <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                    <Spinner />\r\n                </Flex> : <>\r\n                    <Tabs >\r\n                        <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} gap={1}>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                <TabList sx={{\r\n                                    width: '100%',\r\n                                    overflowX: 'auto',\r\n                                    border: \"none\",\r\n                                    '& button:focus': { boxShadow: 'none', },\r\n                                    '& button': {\r\n                                        margin: { sm: \"0 3px\", md: \"0 5px\" }, padding: { sm: \"5px\", md: \"8px\" }, fontSize: { sm: \"12px\", md: \"16px\" }, border: '2px solid #8080803d', borderTopLeftRadius: \"10px\", borderTopRightRadius: \"10px\", borderBottom: 0\r\n                                    },\r\n                                    '& button[aria-selected=\"true\"]': {\r\n                                        border: \"2px solid brand.200\", borderBottom: 0, zIndex: '0'\r\n                                    },\r\n                                }} >\r\n                                    <Tab >Information</Tab>\r\n                                    {(emailAccess?.view || callAccess?.view || taskAccess?.view || meetingAccess?.view) && <Tab> Communication</Tab>}\r\n                                    <Tab>Document</Tab>\r\n                                </TabList>\r\n\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} mt={{ sm: \"3px\", md: \"5px\" }} >\r\n                                <Flex justifyContent={\"right\"}>\r\n                                    <Menu>\r\n                                        {(user.role === 'superAdmin' || permission?.create || permission?.update || permission?.delete) && <MenuButton size=\"sm\" variant=\"outline\" colorScheme='blackAlpha' va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>\r\n                                            Actions\r\n                                        </MenuButton>}\r\n                                        <MenuDivider />\r\n                                        <MenuList minWidth={2}>\r\n                                            {(user.role === 'superAdmin' || permission?.create) && <MenuItem alignItems={'start'} onClick={() => onOpen()} color={'blue'} icon={<AddIcon />}>Add</MenuItem>}\r\n                                            {(user.role === 'superAdmin' || permission?.update) && <MenuItem alignItems={'start'} onClick={() => setEdit(true)} icon={<EditIcon />}>Edit</MenuItem>}\r\n                                            {(user.role === 'superAdmin' || permission?.delete) &&\r\n                                                <>\r\n                                                    <MenuDivider />\r\n                                                    <MenuItem alignItems={'start'} onClick={() => setDelete(true)} color={'red'} icon={<DeleteIcon />}>Delete</MenuItem>\r\n                                                </>\r\n                                            }\r\n                                        </MenuList>\r\n                                    </Menu>\r\n                                    <Link to=\"/contacts\">\r\n                                        <Button leftIcon={<IoIosArrowBack />} size=\"sm\" variant=\"brand\">\r\n                                            Back\r\n                                        </Button>\r\n                                    </Link>\r\n                                </Flex>\r\n                            </GridItem>\r\n                        </Grid>\r\n                        <TabPanels>\r\n                            <TabPanel pt={4} p={0}>\r\n                                <CustomView data={contactData[0]} fieldData={data} toCamelCase={toCamelCase} />\r\n                                <GridItem colSpan={{ base: 12 }} mt={4}>\r\n                                    <Card >\r\n                                        <Grid templateColumns={{ base: \"1fr\" }} gap={4}>\r\n                                            <GridItem colSpan={2}>\r\n                                                <Box>\r\n                                                    <Flex alignItems={'center'} mb={2} justifyContent={'space-between'}>\r\n                                                        <Heading size=\"md\">\r\n                                                            Property of Interest({allData?.interestProperty?.interestProperty?.length})\r\n                                                        </Heading>\r\n                                                        <Button onClick={() => setPropertyModel(true)} leftIcon={<LuBuilding2 />} size=\"sm\" colorScheme=\"gray\" bg={buttonbg}>Select Interested Property  </Button>\r\n                                                        <PropertyModel fetchData={fetchData} isOpen={propertyModel} onClose={setPropertyModel} id={param.id} interestProperty={data?.interestProperty} />\r\n                                                    </Flex>\r\n                                                </Box>\r\n\r\n                                                <Grid templateColumns={'repeat(2, 1fr)'} gap={4}>\r\n                                                    <GridItem colSpan={{ base: 2 }}>\r\n                                                        <PropertyTable fetchData={fetchData} columnsData={PropertyColumn} tableData={allData?.interestProperty?.interestProperty?.length > 0 ? allData?.interestProperty?.interestProperty : []} title={'Interested Property'} />\r\n                                                    </GridItem>\r\n                                                </Grid>\r\n                                            </GridItem>\r\n\r\n                                        </Grid>\r\n                                    </Card>\r\n                                </GridItem>\r\n\r\n                            </TabPanel>\r\n                            <TabPanel pt={4} p={0}>\r\n                                <GridItem colSpan={{ base: 12 }} >\r\n                                    <Grid templateColumns={{ base: \"1fr\" }} gap={4}>\r\n\r\n                                        <Grid templateColumns={'repeat(12, 1fr)'} gap={4}>\r\n                                            {emailAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                                <Card overflow={'scroll'}>\r\n                                                    <ColumnsTable viewData={allData} fetchData={fetchData} emailAccess={emailAccess} columnsData={columnsDataColumns} tableData={showEmail ? allData.EmailHistory : allData?.EmailHistory?.length > 0 ? [allData.EmailHistory[0]] : []} title={'Email '} />\r\n                                                    {allData?.EmailHistory?.length > 1 &&\r\n                                                        <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                                                            <Button colorScheme=\"brand\" variant=\"outline\" size='sm' display=\"flex\" justifyContant=\"end\" onClick={() => showEmail ? setShowEmail(false) : setShowEmail(true)}>{showEmail ? \"Show less\" : \"Show more\"}</Button>\r\n                                                        </div>}\r\n                                                </Card>\r\n                                            </GridItem>}\r\n                                            {callAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                                <Card overflow={'scroll'}>\r\n                                                    <PhoneCall callAccess={callAccess} fetchData={fetchData} columnsData={columnsDataColumns} tableData={showCall ? allData?.phoneCallHistory : allData?.phoneCallHistory?.length > 0 ? [allData?.phoneCallHistory[0]] : []} title={'Call '} />\r\n                                                    <AddPhoneCall viewData={allData} fetchData={fetchData} setAction={setAction} isOpen={addPhoneCall} onClose={setAddPhoneCall} data={data?.contact} id={param.id} />\r\n                                                    {allData?.phoneCallHistory?.length > 1 && <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                                                        <Button colorScheme=\"brand\" variant=\"outline\" size='sm' display=\"flex\" justifyContant=\"end\" onClick={() => showCall ? setShowCall(false) : setShowCall(true)}>{showCall ? \"Show less\" : \"Show more\"}</Button>\r\n                                                    </div>}\r\n                                                </Card>\r\n                                            </GridItem>}\r\n                                            {taskAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                                <Card overflow={'scroll'}><TaskColumnsTable fetchData={fetchData} columnsData={taskColumns} tableData={showTasks ? allData?.task : allData?.task?.length > 0 ? [allData?.task[0]] : []} title={'Task '} action={action} setAction={setAction} access={taskAccess} />\r\n                                                    <AddTask fetchData={fetchData} isOpen={taskModel} onClose={setTaskModel} from=\"contact\" id={param.id} />\r\n                                                    {allData?.task?.length > 1 && <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                                                        <Button colorScheme=\"brand\" variant=\"outline\" size='sm' display=\"flex\" justifyContant=\"end\" onClick={() => showTasks ? setShowTasks(false) : setShowTasks(true)}>{showTasks ? \"Show less\" : \"Show more\"}</Button>\r\n                                                    </div>}\r\n                                                </Card>\r\n                                            </GridItem>}\r\n                                            {meetingAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                                                <Card overflow={'scroll'}>\r\n                                                    <MeetingColumnsTable fetchData={fetchData} columnsData={MeetingColumns} tableData={showMeetings ? allData?.meetingHistory : allData?.meetingHistory?.length > 0 ? [allData?.meetingHistory[0]] : []} title={'Meeting '} action={action} setAction={setAction} access={meetingAccess} />\r\n                                                    <AddMeeting fetchData={fetchData} isOpen={addMeeting} onClose={setMeeting} from=\"contact\" id={param.id} setAction={setAction} />\r\n                                                    {allData?.meetingHistory?.length > 1 && <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                                                        <Button colorScheme=\"brand\" size='sm' variant=\"outline\" display=\"flex\" justifyContant=\"end\" onClick={() => showMeetings ? setShowMeetings(false) : setShowMeetings(true)}>{showMeetings ? \"Show less\" : \"Show more\"}</Button>\r\n                                                    </div>}\r\n                                                </Card>\r\n                                            </GridItem>}\r\n                                           \r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </GridItem>\r\n\r\n                            </TabPanel>\r\n                            <TabPanel pt={4} p={0}>\r\n                                <GridItem colSpan={{ base: 12 }} >\r\n                                    <Card minH={'40vh'} >\r\n                                        <Flex alignItems={'center'} justifyContent={'space-between'} mb='2'>\r\n                                            <Heading size=\"md\" mb={3}>\r\n                                                Documents\r\n                                            </Heading>\r\n                                            <Button leftIcon={<AddIcon />} size='sm' variant='brand' onClick={() => setAddDocument(true)}>Add Document</Button>\r\n                                        </Flex>\r\n                                        <AddDocumentModal addDocument={addDocument} setAddDocument={setAddDocument} linkId={param.id} from=\"contact\" setAction={setAction} />\r\n                                        <HSeparator />\r\n                                        <VStack mt={4} alignItems=\"flex-start\">\r\n                                            {allData?.Document?.length > 0 ? allData?.Document?.map((item) => (\r\n                                                <FolderTreeView name={item.folderName} item={item}>\r\n                                                    {item?.files?.map((file) => (\r\n                                                        <FolderTreeView download={download} data={file} name={file.fileName} isFile from=\"contact\" />\r\n                                                    ))}\r\n                                                </FolderTreeView>\r\n                                            )) :\r\n                                                <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                    <DataNotFound />\r\n                                                </Text>\r\n                                            }\r\n\r\n                                        </VStack>\r\n                                    </Card>\r\n                                </GridItem>\r\n                            </TabPanel>\r\n\r\n                            <TabPanel pt={4} p={0}>\r\n\r\n                                <GridItem colSpan={{ base: 12 }} >\r\n                                    <Card >\r\n                                        <Grid templateColumns={{ base: \"1fr\" }} gap={4}>\r\n                                            <GridItem colSpan={2}>\r\n                                                <Box>\r\n                                                    <Heading size=\"md\" mb={3}>\r\n                                                        Social Media Profiles\r\n                                                    </Heading>\r\n                                                    <HSeparator />\r\n                                                </Box>\r\n                                            </GridItem>\r\n                                            {data?.linkedInProfile || data?.facebookProfile || data?.twitterHandle || data?.otherProfiles ?\r\n                                                <Grid templateColumns={'repeat(12, 1fr)'} gap={4} my={3} flexWrap={'wrap'} display={'flex'} justifyContent={'center'}>\r\n                                                    {data?.linkedInProfile && <GridItem textAlign={'center'} colSpan={{ base: 2, md: 1 }}>\r\n                                                        <a target='_blank' href={data?.linkedInProfile}>\r\n                                                            <IconButton colorScheme=\"brand\" aria-label=\"Call Fred\" borderRadius=\"10px\" size=\"md\" icon={<BiLogoLinkedin />} />\r\n                                                        </a>\r\n                                                        <Text fontSize=\"sm\" mt={2} fontWeight=\"bold\" color={'blackAlpha.900'}> LinkedIn Profile  </Text>\r\n                                                    </GridItem>}\r\n                                                    {data?.facebookProfile && <GridItem textAlign={'center'} colSpan={{ base: 2, md: 1 }}>\r\n                                                        <a target='_blank' href={`https://www.facebook.com/${data.facebookProfile}`}>\r\n                                                            <IconButton colorScheme=\"brand\" aria-label=\"Call Fred\" borderRadius=\"10px\" size=\"md\" icon={<FaFacebook />} />\r\n                                                        </a>\r\n                                                        <Text fontSize=\"sm\" mt={2} fontWeight=\"bold\" color={'blackAlpha.900'}> Facebook Profile  </Text>\r\n                                                    </GridItem>}\r\n                                                    {data?.linkedInProfile && <GridItem textAlign={'center'} colSpan={{ base: 2, md: 1 }}>\r\n                                                        <a target='_blank' href={`https://www.facebook.com/${data.facebookProfile}`}>\r\n                                                            <IconButton colorScheme=\"brand\" aria-label=\"Call Fred\" borderRadius=\"10px\" size=\"md\" icon={<BsTwitter />} />\r\n                                                        </a>\r\n                                                        <Text fontSize=\"sm\" mt={2} px={2} fontWeight=\"bold\" color={'blackAlpha.900'}>Twitter Handle </Text>\r\n                                                    </GridItem>}\r\n\r\n                                                    {data?.linkedInProfile && <GridItem textAlign={'center'} colSpan={{ base: 2, md: 1 }}>\r\n                                                        <a target='_blank' href={data?.otherProfiles}>\r\n                                                            <IconButton colorScheme=\"brand\" aria-label=\"Call Fred\" borderRadius=\"10px\" size=\"md\" icon={<BiLink />} />\r\n                                                        </a>\r\n                                                        <Text fontSize=\"sm\" mt={2} fontWeight=\"bold\" color={'blackAlpha.900'}> Other Profiles  </Text>\r\n                                                    </GridItem>}\r\n                                                </Grid>\r\n                                                :\r\n                                                <Grid templateColumns={'repeat(2, 1fr)'} gap={4}>\r\n                                                    <GridItem colSpan={{ base: 2 }} textAlign={'center'}>\r\n                                                        <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\"> <DataNotFound /></Text>\r\n\r\n                                                    </GridItem>\r\n                                                </Grid>\r\n                                            }\r\n                                        </Grid>\r\n                                    </Card>\r\n                                </GridItem>\r\n\r\n                            </TabPanel>\r\n                        </TabPanels>\r\n                    </Tabs>\r\n\r\n                    {(user.role === 'superAdmin' || (permission?.update || permission?.delete)) && <Card mt={3}>\r\n                        <Grid templateColumns=\"repeat(6, 1fr)\" gap={1}>\r\n                            <GridItem colStart={6} >\r\n                                <Flex justifyContent={\"right\"}>\r\n                                    {permission?.update && <Button size=\"sm\" onClick={() => setEdit(true)} leftIcon={<EditIcon />} mr={2.5} variant=\"outline\" colorScheme=\"green\">Edit</Button>}\r\n                                    {permission?.delete && <Button size=\"sm\" style={{ background: 'red.800' }} onClick={() => setDelete(true)} leftIcon={<DeleteIcon />} colorScheme=\"red\" >Delete</Button>}\r\n                                </Flex>\r\n                            </GridItem>\r\n                        </Grid>\r\n                    </Card>}\r\n                </>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default View;\r\n"],"names":["props","_props$contactData","_props$contactData2","isLoding","setIsLoding","useState","initialFieldValues","Object","fromEntries","contactData","fields","map","field","name","initialValues","_objectSpread","createBy","JSON","parse","localStorage","getItem","_id","formik","useFormik","validationSchema","yup","shape","generateValidationSchema","onSubmit","values","_ref","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","_props$contactData3","postApi","moduleId","status","onClose","setAction","pre","e","console","log","_jsx","children","_jsxs","Drawer","isOpen","size","DrawerOverlay","DrawerContent","DrawerHeader","alignItems","justifyContent","display","IconButton","onClick","icon","CloseIcon","DrawerBody","CustomForm","moduleData","DrawerFooter","Button","sx","textTransform","variant","disabled","type","Spinner","colorScheme","marginLeft","handleCancel","setInitialValues","param","useParams","enableReinitialize","EditData","putApi","concat","selectedId","id","handleClose","setSelectedId","response","useEffect","getApi","prev","_response","_response$data","data","contact","error","fetchData","Flex","width","PropertyTable","columnsData","tableData","title","selectedValues","setSelectedValues","columns","useMemo","user","gopageValue","setGopageValue","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","length","textColor","useColorModeValue","borderColor","Card","direction","w","px","style","border","overflowX","sm","lg","Box","overflowY","className","Table","color","mb","Thead","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","getSortByToggleProps","pe","justify","align","fontSize","render","Tbody","Td","colSpan","Text","textAlign","fontWeight","DataNotFound","row","_row$cells","getRowProps","cells","cell","_cell$row","Header","Checkbox","value","isChecked","includes","onChange","event","handleCheckboxChange","target","checked","prevSelectedValues","filter","selectedValue","me","_cell$row2","_cell$row2$original","_cell$row3","_cell$row3$original","Link","to","role","original","textDecoration","getCellProps","minW","md","Pagination","interestProperty","setData","uniqueValues","Set","item","result","fetchPropertyData","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","CheckTable","accessor","isSortable","ModalFooter","View","_contactData$","_allData$interestProp","_allData$interestProp2","_allData$interestProp3","_allData$interestProp4","_allData$interestProp5","_allData$EmailHistory","_allData$EmailHistory2","_allData$phoneCallHis","_allData$phoneCallHis2","_allData$task","_allData$task2","_allData$meetingHisto","_allData$meetingHisto2","_allData$Document","_allData$Document2","buttonbg","allData","setAllData","setContactData","onOpen","useDisclosure","edit","setEdit","deleteModel","setDelete","propertyModel","setPropertyModel","action","taskModel","setTaskModel","addEmailHistory","setAddEmailHistory","addPhoneCall","setAddPhoneCall","addMeeting","setMeeting","showEmail","setShowEmail","showCall","setShowCall","showTasks","setShowTasks","showMeetings","setShowMeetings","addDocument","setAddDocument","navigate","useNavigate","permission","callAccess","emailAccess","taskAccess","meetingAccess","HasAccess","columnsDataColumns","download","window","open","constant","baseUrl","toast","success","fetchCustomData","_Fragment","Add","Edit","CommonDeleteModel","handleDeleteData","deleteApi","ids","AddEmailHistory","viewData","lead","Tabs","Grid","templateColumns","gap","GridItem","base","TabList","boxShadow","margin","padding","borderTopLeftRadius","borderTopRightRadius","borderBottom","zIndex","Tab","view","mt","Menu","create","update","delete","MenuButton","va","mr","as","rightIcon","ChevronDownIcon","MenuDivider","MenuList","minWidth","MenuItem","AddIcon","EditIcon","DeleteIcon","leftIcon","IoIosArrowBack","TabPanels","TabPanel","pt","p","CustomView","fieldData","toCamelCase","text","replace","Heading","LuBuilding2","bg","PropertyModel","overflow","ColumnsTable","EmailHistory","justifyContant","PhoneCall","phoneCallHistory","AddPhoneCall","TaskColumnsTable","task","access","AddTask","from","MeetingColumnsTable","meetingHistory","AddMeeting","minH","AddDocumentModal","linkId","HSeparator","VStack","Document","_item$files","FolderTreeView","folderName","files","file","fileName","isFile","linkedInProfile","facebookProfile","twitterHandle","otherProfiles","my","flexWrap","href","borderRadius","BiLogoLinkedin","FaFacebook","BsTwitter","BiLink","colStart","background"],"sourceRoot":""}